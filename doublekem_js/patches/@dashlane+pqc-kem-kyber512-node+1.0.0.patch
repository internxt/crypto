diff --git a/node_modules/@dashlane/pqc-kem-kyber512-node/README.md b/node_modules/@dashlane/pqc-kem-kyber512-node/README.md
index 3078888..9dee12a 100644
--- a/node_modules/@dashlane/pqc-kem-kyber512-node/README.md
+++ b/node_modules/@dashlane/pqc-kem-kyber512-node/README.md
@@ -22,6 +22,38 @@ It is possible to test the bindings, to compare them in real-world conditions on
 
 Pre-built bindings are available on [the playground](https://dashlane.github.io/pqc.js/).
 
+Some bindings can directly be downloaded from [npmjs.com](https://npmjs.com):
+
+CRYSTALS-Kyber:
+```
+npm install @dashlane/pqc-kem-kyber<512|768|1024>-<node|browser>
+```
+
+NTRU-HPS:
+```
+npm install @dashlane/pqc-kem-ntruhps<2048509|2048677|4096821>-<node|browser>
+```
+
+NTRU Prime:
+```
+npm install @dashlane/pqc-kem-ntrulpr<653|761|857>-<node|browser>
+```
+
+SABER:
+```
+npm install @dashlane/pqc-kem-<light||fire>saber-<node|browser>
+```
+
+CRYSTALS-Dilithium:
+```
+npm install @dashlane/pqc-sign-dilithium<2|3|5>-<node|browser>
+```
+
+Falcon:
+```
+npm install @dashlane/pqc-sign-falcon-<512|1024>-<node|browser>
+```
+
 ## How to build
 
 - `sudo apt install emscripten`
diff --git a/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.asm.js b/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.asm.js
index d3a34a4..0558543 100644
--- a/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.asm.js
+++ b/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.asm.js
@@ -1,63 +1,37 @@
 var createKEMNativeCaller = (() => {
-    var _scriptDir = import.meta.url;
-    return (function (createKEMNativeCaller) {
-        createKEMNativeCaller = createKEMNativeCaller || {};
-        var Module = typeof createKEMNativeCaller != "undefined" ? createKEMNativeCaller : {};
+    var _scriptName = import.meta.url;
+    return (async function (moduleArg = {}) {
+        var moduleRtn;
+        var Module = moduleArg;
         var readyPromiseResolve, readyPromiseReject;
-        Module["ready"] = new Promise(function (resolve, reject) { readyPromiseResolve = resolve; readyPromiseReject = reject; });
+        var readyPromise = new Promise((resolve, reject) => { readyPromiseResolve = resolve; readyPromiseReject = reject; });
+        var ENVIRONMENT_IS_WEB = typeof window == "object";
+        var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
+        var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
+        if (ENVIRONMENT_IS_NODE) {
+            const { createRequire: createRequire } = await import("module");
+            var require = createRequire(import.meta.url);
+        }
         var moduleOverrides = Object.assign({}, Module);
         var arguments_ = [];
         var thisProgram = "./this.program";
         var quit_ = (status, toThrow) => { throw toThrow; };
-        var ENVIRONMENT_IS_WEB = typeof window == "object";
-        var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
-        var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
         var scriptDirectory = "";
-        function locateFile(path) { if (Module["locateFile"]) {
-            return Module["locateFile"](path, scriptDirectory);
-        } return scriptDirectory + path; }
-        var read_, readAsync, readBinary, setWindowTitle;
-        function logExceptionOnExit(e) { if (e instanceof ExitStatus)
-            return; let toLog = e; err("exiting due to exception: " + toLog); }
-        var fs;
-        var nodePath;
-        var requireNodeFS;
+        var readAsync, readBinary;
         if (ENVIRONMENT_IS_NODE) {
-            if (ENVIRONMENT_IS_WORKER) {
-                scriptDirectory = require("path").dirname(scriptDirectory) + "/";
-            }
-            else {
-                scriptDirectory = __dirname + "/";
-            }
-            requireNodeFS = (() => { if (!nodePath) {
-                fs = require("fs");
-                nodePath = require("path");
-            } });
-            read_ = function shell_read(filename, binary) { var ret = tryParseAsDataURI(filename); if (ret) {
-                return binary ? ret : ret.toString();
-            } requireNodeFS(); filename = nodePath["normalize"](filename); return fs.readFileSync(filename, binary ? undefined : "utf8"); };
-            readBinary = (filename => { var ret = read_(filename, true); if (!ret.buffer) {
-                ret = new Uint8Array(ret);
-            } return ret; });
-            readAsync = ((filename, onload, onerror) => { var ret = tryParseAsDataURI(filename); if (ret) {
-                onload(ret);
-            } requireNodeFS(); filename = nodePath["normalize"](filename); fs.readFile(filename, function (err, data) { if (err)
-                onerror(err);
+            var fs = require("fs");
+            var nodePath = require("path");
+            scriptDirectory = require("url").fileURLToPath(new URL("./", import.meta.url));
+            readBinary = filename => { filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename); var ret = fs.readFileSync(filename); return ret; };
+            readAsync = (filename, binary = true) => { filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename); return new Promise((resolve, reject) => { fs.readFile(filename, binary ? undefined : "utf8", (err, data) => { if (err)
+                reject(err);
             else
-                onload(data.buffer); }); });
-            if (process["argv"].length > 1) {
-                thisProgram = process["argv"][1].replace(/\\/g, "/");
+                resolve(binary ? data.buffer : data); }); }); };
+            if (!Module["thisProgram"] && process.argv.length > 1) {
+                thisProgram = process.argv[1].replace(/\\/g, "/");
             }
-            arguments_ = process["argv"].slice(2);
-            process["on"]("uncaughtException", function (ex) { if (!(ex instanceof ExitStatus)) {
-                throw ex;
-            } });
-            process["on"]("unhandledRejection", function (reason) { throw reason; });
-            quit_ = ((status, toThrow) => { if (keepRuntimeAlive()) {
-                process["exitCode"] = status;
-                throw toThrow;
-            } logExceptionOnExit(toThrow); process["exit"](status); });
-            Module["inspect"] = function () { return "[Emscripten Module object]"; };
+            arguments_ = process.argv.slice(2);
+            quit_ = (status, toThrow) => { process.exitCode = status; throw toThrow; };
         }
         else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
             if (ENVIRONMENT_IS_WORKER) {
@@ -66,66 +40,38 @@ var createKEMNativeCaller = (() => {
             else if (typeof document != "undefined" && document.currentScript) {
                 scriptDirectory = document.currentScript.src;
             }
-            if (_scriptDir) {
-                scriptDirectory = _scriptDir;
+            if (_scriptName) {
+                scriptDirectory = _scriptName;
             }
-            if (scriptDirectory.indexOf("blob:") !== 0) {
-                scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
+            if (scriptDirectory.startsWith("blob:")) {
+                scriptDirectory = "";
             }
             else {
-                scriptDirectory = "";
+                scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
             }
             {
-                read_ = (url => { try {
-                    var xhr = new XMLHttpRequest;
-                    xhr.open("GET", url, false);
-                    xhr.send(null);
-                    return xhr.responseText;
-                }
-                catch (err) {
-                    var data = tryParseAsDataURI(url);
-                    if (data) {
-                        return intArrayToString(data);
-                    }
-                    throw err;
-                } });
                 if (ENVIRONMENT_IS_WORKER) {
-                    readBinary = (url => { try {
-                        var xhr = new XMLHttpRequest;
-                        xhr.open("GET", url, false);
-                        xhr.responseType = "arraybuffer";
-                        xhr.send(null);
-                        return new Uint8Array(xhr.response);
-                    }
-                    catch (err) {
-                        var data = tryParseAsDataURI(url);
-                        if (data) {
-                            return data;
-                        }
-                        throw err;
-                    } });
+                    readBinary = url => { var xhr = new XMLHttpRequest; xhr.open("GET", url, false); xhr.responseType = "arraybuffer"; xhr.send(null); return new Uint8Array(xhr.response); };
                 }
-                readAsync = ((url, onload, onerror) => { var xhr = new XMLHttpRequest; xhr.open("GET", url, true); xhr.responseType = "arraybuffer"; xhr.onload = (() => { if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
-                    onload(xhr.response);
-                    return;
-                } var data = tryParseAsDataURI(url); if (data) {
-                    onload(data.buffer);
-                    return;
-                } onerror(); }); xhr.onerror = onerror; xhr.send(null); });
+                readAsync = url => { if (isFileURI(url)) {
+                    return new Promise((reject, resolve) => { var xhr = new XMLHttpRequest; xhr.open("GET", url, true); xhr.responseType = "arraybuffer"; xhr.onload = () => { if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
+                        resolve(xhr.response);
+                    } reject(xhr.status); }; xhr.onerror = reject; xhr.send(null); });
+                } return fetch(url, { credentials: "same-origin" }).then(response => { if (response.ok) {
+                    return response.arrayBuffer();
+                } return Promise.reject(new Error(response.status + " : " + response.url)); }); };
             }
-            setWindowTitle = (title => document.title = title);
         }
         else { }
         var out = console.log.bind(console);
-        var err = console.warn.bind(console);
+        var err = console.error.bind(console);
         Object.assign(Module, moduleOverrides);
         moduleOverrides = null;
         var wasmBinary;
-        var noExitRuntime = true;
         var WebAssembly = { Memory: function (opts) { this.buffer = new ArrayBuffer(opts["initial"] * 65536); }, Module: function (binary) { }, Instance: function (module, info) {
                 this.exports = (
                 // EMSCRIPTEN_START_ASM
-                function instantiate(Y) {
+                function instantiate(V) {
                     function c(d) { d.set = function (a, b) { this[a] = b; }; d.get = function (a) { return this[a]; }; return d; }
                     var e;
                     var f = new Uint8Array(123);
@@ -146,9 +92,9 @@ var createKEMNativeCaller = (() => {
                             m[i++] = h << 6 | f[o.charCodeAt(a + 3)];
                     } }
                     function p(q) { l(e, 1024, "AQAAAAAAAACCgAAAAAAAAIqAAAAAAACAAIAAgAAAAICLgAAAAAAAAAEAAIAAAAAAgYAAgAAAAIAJgAAAAAAAgIoAAAAAAAAAiAAAAAAAAAAJgACAAAAAAAoAAIAAAAAAi4AAgAAAAACLAAAAAAAAgImAAAAAAACAA4AAAAAAAIACgAAAAAAAgIAAAAAAAACACoAAAAAAAAAKAACAAAAAgIGAAIAAAACAgIAAAAAAAIABAACAAAAAAAiAAIAAAACAcmFuZG9tYnl0ZXMAbGlic29kaXVtL3NyYy9saWJzb2RpdW0vcmFuZG9tYnl0ZXMvcmFuZG9tYnl0ZXMuYwBidWZfbGVuIDw9IFNJWkVfTUFY"); l(e, 1312, "7PsK/Zn+E/rVBY4FHwHKAFX/bgIpBrYAwgNO+z76vAU9AtP6CAF/AcP8sgW++X7/V/35A9wCYAL6+ZsBM//d+ccEjALY/fcD8/rTBeb++PkEAvj/wP5m/a75dvt+AL0Fq/ym//H+PgNrAHP6Cf9J/HL+wQMc+iv9wAHX+6UCBfux+64BKwJLAx37ZwMOBmkApgFLArEAFf/d/jT+JgZ1Bgr/CgOHBG3/9/zLBab9XwTK+YQCmPxdAaIBSQFk/7X/MQNJBFsCYgIqBfv6R/qAAUH7eP/CBMn6lvzcAF37hflf+wb6AvsaAxr6qvya/N4BlP/M/uQD3wO+A0z68gVcBg=="); l(e, 1568, "4BGA"); }
-                    function W(X) {
-                        var r = X.a;
-                        var s = r.buffer;
+                    function r() { throw new Error("abort"); }
+                    function U(q) {
+                        var s = new ArrayBuffer(16777216);
                         var t = new Int8Array(s);
                         var u = new Int16Array(s);
                         var v = new Int32Array(s);
@@ -167,17 +113,15 @@ var createKEMNativeCaller = (() => {
                         var I = Math.ceil;
                         var J = Math.trunc;
                         var K = Math.sqrt;
-                        var L = X.abort;
-                        var M = NaN;
-                        var N = Infinity;
-                        var O = X.b;
-                        var P = X.c;
-                        var Q = X.d;
-                        var R = 8393184;
-                        var S = 0;
-                        var T = 0;
+                        var L = q.a;
+                        var M = L.a;
+                        var N = L.b;
+                        var O = L.c;
+                        var P = 8393184;
+                        var Q = 0;
+                        var R = 0;
                         // EMSCRIPTEN_START_FUNCS
-                        function ha(a) { a = a | 0; var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0; l = R - 16 | 0; R = l; a: {
+                        function _(a) { a = a | 0; var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0; k = P - 16 | 0; P = k; a: {
                             b: {
                                 c: {
                                     d: {
@@ -187,1369 +131,1296 @@ var createKEMNativeCaller = (() => {
                                                     h: {
                                                         i: {
                                                             j: {
-                                                                k: {
-                                                                    if (a >>> 0 <= 244) {
-                                                                        h = v[1018];
-                                                                        g = a >>> 0 < 11 ? 16 : a + 11 & -8;
-                                                                        c = g >>> 3 | 0;
-                                                                        b = h >>> c | 0;
-                                                                        if (b & 3) {
-                                                                            d = c + ((b ^ -1) & 1) | 0;
-                                                                            b = d << 3;
-                                                                            g = v[b + 4120 >> 2];
-                                                                            a = g + 8 | 0;
-                                                                            c = v[g + 8 >> 2];
-                                                                            b = b + 4112 | 0;
-                                                                            l: {
-                                                                                if ((c | 0) == (b | 0)) {
-                                                                                    v[1018] = Va(d) & h;
-                                                                                    break l;
-                                                                                }
-                                                                                v[c + 12 >> 2] = b;
-                                                                                v[b + 8 >> 2] = c;
+                                                                if (a >>> 0 <= 244) {
+                                                                    e = v[1018];
+                                                                    h = a >>> 0 < 11 ? 16 : a + 11 & 504;
+                                                                    a = h >>> 3 | 0;
+                                                                    b = e >>> a | 0;
+                                                                    if (b & 3) {
+                                                                        c = a + ((b ^ -1) & 1) | 0;
+                                                                        b = c << 3;
+                                                                        a = b + 4112 | 0;
+                                                                        b = v[b + 4120 >> 2];
+                                                                        d = v[b + 8 >> 2];
+                                                                        k: {
+                                                                            if ((a | 0) == (d | 0)) {
+                                                                                v[1018] = Ya(c) & e;
+                                                                                break k;
                                                                             }
-                                                                            b = d << 3;
-                                                                            v[g + 4 >> 2] = b | 3;
-                                                                            b = b + g | 0;
-                                                                            v[b + 4 >> 2] = v[b + 4 >> 2] | 1;
-                                                                            break a;
+                                                                            v[d + 12 >> 2] = a;
+                                                                            v[a + 8 >> 2] = d;
                                                                         }
-                                                                        k = v[1020];
-                                                                        if (k >>> 0 >= g >>> 0) {
-                                                                            break k;
+                                                                        a = b + 8 | 0;
+                                                                        c = c << 3;
+                                                                        v[b + 4 >> 2] = c | 3;
+                                                                        b = b + c | 0;
+                                                                        v[b + 4 >> 2] = v[b + 4 >> 2] | 1;
+                                                                        break a;
+                                                                    }
+                                                                    i = v[1020];
+                                                                    if (i >>> 0 >= h >>> 0) {
+                                                                        break j;
+                                                                    }
+                                                                    if (b) {
+                                                                        c = 2 << a;
+                                                                        a = Xa((0 - c | c) & b << a);
+                                                                        c = a << 3;
+                                                                        b = c + 4112 | 0;
+                                                                        c = v[c + 4120 >> 2];
+                                                                        d = v[c + 8 >> 2];
+                                                                        l: {
+                                                                            if ((b | 0) == (d | 0)) {
+                                                                                e = Ya(a) & e;
+                                                                                v[1018] = e;
+                                                                                break l;
+                                                                            }
+                                                                            v[d + 12 >> 2] = b;
+                                                                            v[b + 8 >> 2] = d;
                                                                         }
-                                                                        if (b) {
-                                                                            a = 2 << c;
-                                                                            a = (a | 0 - a) & b << c;
-                                                                            a = (a & 0 - a) - 1 | 0;
-                                                                            f = a >>> 12 & 16;
-                                                                            a = a >>> f | 0;
-                                                                            e = a >>> 5 & 8;
-                                                                            a = a >>> e | 0;
-                                                                            d = a >>> 2 & 4;
-                                                                            a = a >>> d | 0;
-                                                                            c = a >>> 1 & 2;
-                                                                            a = a >>> c | 0;
-                                                                            b = a >>> 1 & 1;
-                                                                            c = (b | (c | (d | (e | f)))) + (a >>> b | 0) | 0;
-                                                                            a = c << 3;
-                                                                            e = v[a + 4120 >> 2];
-                                                                            b = v[e + 8 >> 2];
-                                                                            a = a + 4112 | 0;
+                                                                        v[c + 4 >> 2] = h | 3;
+                                                                        g = c + h | 0;
+                                                                        a = a << 3;
+                                                                        f = a - h | 0;
+                                                                        v[g + 4 >> 2] = f | 1;
+                                                                        v[a + c >> 2] = f;
+                                                                        if (i) {
+                                                                            a = (i & -8) + 4112 | 0;
+                                                                            d = v[1023];
+                                                                            b = 1 << (i >>> 3);
                                                                             m: {
-                                                                                if ((b | 0) == (a | 0)) {
-                                                                                    h = Va(c) & h;
-                                                                                    v[1018] = h;
+                                                                                if (!(b & e)) {
+                                                                                    v[1018] = b | e;
+                                                                                    b = a;
                                                                                     break m;
                                                                                 }
-                                                                                v[b + 12 >> 2] = a;
-                                                                                v[a + 8 >> 2] = b;
-                                                                            }
-                                                                            a = e + 8 | 0;
-                                                                            v[e + 4 >> 2] = g | 3;
-                                                                            d = e + g | 0;
-                                                                            b = c << 3;
-                                                                            g = b - g | 0;
-                                                                            v[d + 4 >> 2] = g | 1;
-                                                                            v[b + e >> 2] = g;
-                                                                            if (k) {
-                                                                                b = k >>> 3 | 0;
-                                                                                c = (b << 3) + 4112 | 0;
-                                                                                e = v[1023];
-                                                                                b = 1 << b;
-                                                                                n: {
-                                                                                    if (!(b & h)) {
-                                                                                        v[1018] = b | h;
-                                                                                        b = c;
-                                                                                        break n;
-                                                                                    }
-                                                                                    b = v[c + 8 >> 2];
-                                                                                }
-                                                                                v[c + 8 >> 2] = e;
-                                                                                v[b + 12 >> 2] = e;
-                                                                                v[e + 12 >> 2] = c;
-                                                                                v[e + 8 >> 2] = b;
-                                                                            }
-                                                                            v[1023] = d;
-                                                                            v[1020] = g;
-                                                                            break a;
-                                                                        }
-                                                                        j = v[1019];
-                                                                        if (!j) {
-                                                                            break k;
-                                                                        }
-                                                                        a = (j & 0 - j) - 1 | 0;
-                                                                        f = a >>> 12 & 16;
-                                                                        a = a >>> f | 0;
-                                                                        e = a >>> 5 & 8;
-                                                                        a = a >>> e | 0;
-                                                                        d = a >>> 2 & 4;
-                                                                        a = a >>> d | 0;
-                                                                        c = a >>> 1 & 2;
-                                                                        a = a >>> c | 0;
-                                                                        b = a >>> 1 & 1;
-                                                                        b = v[((b | (c | (d | (e | f)))) + (a >>> b | 0) << 2) + 4376 >> 2];
-                                                                        d = (v[b + 4 >> 2] & -8) - g | 0;
-                                                                        c = b;
-                                                                        while (1) {
-                                                                            o: {
-                                                                                a = v[c + 16 >> 2];
-                                                                                if (!a) {
-                                                                                    a = v[c + 20 >> 2];
-                                                                                    if (!a) {
-                                                                                        break o;
-                                                                                    }
-                                                                                }
-                                                                                c = (v[a + 4 >> 2] & -8) - g | 0;
-                                                                                e = c >>> 0 < d >>> 0;
-                                                                                d = e ? c : d;
-                                                                                b = e ? a : b;
-                                                                                c = a;
-                                                                                continue;
+                                                                                b = v[a + 8 >> 2];
                                                                             }
-                                                                            break;
+                                                                            v[a + 8 >> 2] = d;
+                                                                            v[b + 12 >> 2] = d;
+                                                                            v[d + 12 >> 2] = a;
+                                                                            v[d + 8 >> 2] = b;
                                                                         }
-                                                                        i = v[b + 24 >> 2];
-                                                                        e = v[b + 12 >> 2];
-                                                                        if ((e | 0) != (b | 0)) {
-                                                                            a = v[b + 8 >> 2];
-                                                                            v[a + 12 >> 2] = e;
-                                                                            v[e + 8 >> 2] = a;
-                                                                            break b;
-                                                                        }
-                                                                        c = b + 20 | 0;
-                                                                        a = v[c >> 2];
-                                                                        if (!a) {
+                                                                        a = c + 8 | 0;
+                                                                        v[1023] = g;
+                                                                        v[1020] = f;
+                                                                        break a;
+                                                                    }
+                                                                    l = v[1019];
+                                                                    if (!l) {
+                                                                        break j;
+                                                                    }
+                                                                    c = v[(Xa(l) << 2) + 4376 >> 2];
+                                                                    f = (v[c + 4 >> 2] & -8) - h | 0;
+                                                                    b = c;
+                                                                    while (1) {
+                                                                        n: {
                                                                             a = v[b + 16 >> 2];
                                                                             if (!a) {
-                                                                                break j;
-                                                                            }
-                                                                            c = b + 16 | 0;
-                                                                        }
-                                                                        while (1) {
-                                                                            f = c;
-                                                                            e = a;
-                                                                            c = a + 20 | 0;
-                                                                            a = v[c >> 2];
-                                                                            if (a) {
-                                                                                continue;
-                                                                            }
-                                                                            c = e + 16 | 0;
-                                                                            a = v[e + 16 >> 2];
-                                                                            if (a) {
-                                                                                continue;
+                                                                                a = v[b + 20 >> 2];
+                                                                                if (!a) {
+                                                                                    break n;
+                                                                                }
                                                                             }
-                                                                            break;
+                                                                            d = (v[a + 4 >> 2] & -8) - h | 0;
+                                                                            b = d >>> 0 < f >>> 0;
+                                                                            f = b ? d : f;
+                                                                            c = b ? a : c;
+                                                                            b = a;
+                                                                            continue;
                                                                         }
-                                                                        v[f >> 2] = 0;
+                                                                        break;
+                                                                    }
+                                                                    j = v[c + 24 >> 2];
+                                                                    a = v[c + 12 >> 2];
+                                                                    if ((c | 0) != (a | 0)) {
+                                                                        b = v[c + 8 >> 2];
+                                                                        v[b + 12 >> 2] = a;
+                                                                        v[a + 8 >> 2] = b;
                                                                         break b;
                                                                     }
-                                                                    g = -1;
-                                                                    if (a >>> 0 > 4294967231) {
-                                                                        break k;
+                                                                    b = v[c + 20 >> 2];
+                                                                    if (b) {
+                                                                        d = c + 20 | 0;
                                                                     }
-                                                                    a = a + 11 | 0;
-                                                                    g = a & -8;
-                                                                    i = v[1019];
-                                                                    if (!i) {
-                                                                        break k;
+                                                                    else {
+                                                                        b = v[c + 16 >> 2];
+                                                                        if (!b) {
+                                                                            break i;
+                                                                        }
+                                                                        d = c + 16 | 0;
                                                                     }
-                                                                    d = 0 - g | 0;
-                                                                    h = 0;
-                                                                    p: {
-                                                                        if (g >>> 0 < 256) {
-                                                                            break p;
+                                                                    while (1) {
+                                                                        g = d;
+                                                                        a = b;
+                                                                        d = a + 20 | 0;
+                                                                        b = v[a + 20 >> 2];
+                                                                        if (b) {
+                                                                            continue;
                                                                         }
-                                                                        h = 31;
-                                                                        if (g >>> 0 > 16777215) {
-                                                                            break p;
+                                                                        d = a + 16 | 0;
+                                                                        b = v[a + 16 >> 2];
+                                                                        if (b) {
+                                                                            continue;
                                                                         }
-                                                                        a = a >>> 8 | 0;
-                                                                        f = a + 1048320 >>> 16 & 8;
-                                                                        a = a << f;
-                                                                        c = a + 520192 >>> 16 & 4;
-                                                                        a = a << c;
-                                                                        b = a + 245760 >>> 16 & 2;
-                                                                        a = (a << b >>> 15 | 0) - (b | (c | f)) | 0;
-                                                                        h = (g >>> a + 21 & 1 | a << 1) + 28 | 0;
+                                                                        break;
                                                                     }
-                                                                    c = v[(h << 2) + 4376 >> 2];
-                                                                    q: {
-                                                                        r: {
-                                                                            s: {
-                                                                                if (!c) {
-                                                                                    a = 0;
-                                                                                    break s;
-                                                                                }
+                                                                    v[g >> 2] = 0;
+                                                                    break b;
+                                                                }
+                                                                h = -1;
+                                                                if (a >>> 0 > 4294967231) {
+                                                                    break j;
+                                                                }
+                                                                b = a + 11 | 0;
+                                                                h = b & -8;
+                                                                g = v[1019];
+                                                                if (!g) {
+                                                                    break j;
+                                                                }
+                                                                i = 31;
+                                                                f = 0 - h | 0;
+                                                                if (a >>> 0 <= 16777204) {
+                                                                    a = E(b >>> 8 | 0);
+                                                                    i = ((h >>> 38 - a & 1) - (a << 1) | 0) + 62 | 0;
+                                                                }
+                                                                b = v[(i << 2) + 4376 >> 2];
+                                                                o: {
+                                                                    p: {
+                                                                        q: {
+                                                                            if (!b) {
                                                                                 a = 0;
-                                                                                b = g << ((h | 0) == 31 ? 0 : 25 - (h >>> 1 | 0) | 0);
-                                                                                while (1) {
-                                                                                    t: {
-                                                                                        f = (v[c + 4 >> 2] & -8) - g | 0;
-                                                                                        if (f >>> 0 >= d >>> 0) {
-                                                                                            break t;
-                                                                                        }
-                                                                                        e = c;
-                                                                                        d = f;
-                                                                                        if (d) {
-                                                                                            break t;
-                                                                                        }
-                                                                                        d = 0;
-                                                                                        a = c;
+                                                                                break q;
+                                                                            }
+                                                                            a = 0;
+                                                                            c = h << ((i | 0) != 31 ? 25 - (i >>> 1 | 0) | 0 : 0);
+                                                                            while (1) {
+                                                                                r: {
+                                                                                    e = (v[b + 4 >> 2] & -8) - h | 0;
+                                                                                    if (e >>> 0 >= f >>> 0) {
                                                                                         break r;
                                                                                     }
-                                                                                    f = v[c + 20 >> 2];
-                                                                                    c = v[((b >>> 29 & 4) + c | 0) + 16 >> 2];
-                                                                                    a = f ? (f | 0) == (c | 0) ? a : f : a;
-                                                                                    b = b << 1;
-                                                                                    if (c) {
-                                                                                        continue;
+                                                                                    d = b;
+                                                                                    f = e;
+                                                                                    if (f) {
+                                                                                        break r;
                                                                                     }
-                                                                                    break;
+                                                                                    f = 0;
+                                                                                    a = b;
+                                                                                    break p;
                                                                                 }
-                                                                            }
-                                                                            if (!(a | e)) {
-                                                                                e = 0;
-                                                                                a = 2 << h;
-                                                                                a = (a | 0 - a) & i;
-                                                                                if (!a) {
-                                                                                    break k;
+                                                                                e = v[b + 20 >> 2];
+                                                                                b = v[((c >>> 29 & 4) + b | 0) + 16 >> 2];
+                                                                                a = e ? (e | 0) == (b | 0) ? a : e : a;
+                                                                                c = c << 1;
+                                                                                if (b) {
+                                                                                    continue;
                                                                                 }
-                                                                                a = (a & 0 - a) - 1 | 0;
-                                                                                j = a >>> 12 & 16;
-                                                                                a = a >>> j | 0;
-                                                                                h = a >>> 5 & 8;
-                                                                                a = a >>> h | 0;
-                                                                                f = a >>> 2 & 4;
-                                                                                a = a >>> f | 0;
-                                                                                c = a >>> 1 & 2;
-                                                                                a = a >>> c | 0;
-                                                                                b = a >>> 1 & 1;
-                                                                                a = v[((b | (c | (f | (h | j)))) + (a >>> b | 0) << 2) + 4376 >> 2];
-                                                                            }
-                                                                            if (!a) {
-                                                                                break q;
+                                                                                break;
                                                                             }
                                                                         }
-                                                                        while (1) {
-                                                                            b = (v[a + 4 >> 2] & -8) - g | 0;
-                                                                            c = b >>> 0 < d >>> 0;
-                                                                            d = c ? b : d;
-                                                                            e = c ? a : e;
-                                                                            b = v[a + 16 >> 2];
-                                                                            if (b) {
-                                                                                a = b;
-                                                                            }
-                                                                            else {
-                                                                                a = v[a + 20 >> 2];
-                                                                            }
-                                                                            if (a) {
-                                                                                continue;
+                                                                        if (!(a | d)) {
+                                                                            d = 0;
+                                                                            a = 2 << i;
+                                                                            a = (0 - a | a) & g;
+                                                                            if (!a) {
+                                                                                break j;
                                                                             }
-                                                                            break;
+                                                                            a = v[(Xa(a) << 2) + 4376 >> 2];
                                                                         }
-                                                                    }
-                                                                    if (!e | v[1020] - g >>> 0 <= d >>> 0) {
-                                                                        break k;
-                                                                    }
-                                                                    h = v[e + 24 >> 2];
-                                                                    b = v[e + 12 >> 2];
-                                                                    if ((e | 0) != (b | 0)) {
-                                                                        a = v[e + 8 >> 2];
-                                                                        v[a + 12 >> 2] = b;
-                                                                        v[b + 8 >> 2] = a;
-                                                                        break c;
-                                                                    }
-                                                                    c = e + 20 | 0;
-                                                                    a = v[c >> 2];
-                                                                    if (!a) {
-                                                                        a = v[e + 16 >> 2];
                                                                         if (!a) {
-                                                                            break i;
+                                                                            break o;
                                                                         }
-                                                                        c = e + 16 | 0;
                                                                     }
                                                                     while (1) {
-                                                                        f = c;
-                                                                        b = a;
-                                                                        c = a + 20 | 0;
-                                                                        a = v[c >> 2];
-                                                                        if (a) {
-                                                                            continue;
+                                                                        c = (v[a + 4 >> 2] & -8) - h | 0;
+                                                                        b = c >>> 0 < f >>> 0;
+                                                                        f = b ? c : f;
+                                                                        d = b ? a : d;
+                                                                        b = v[a + 16 >> 2];
+                                                                        if (b) {
+                                                                            a = b;
+                                                                        }
+                                                                        else {
+                                                                            a = v[a + 20 >> 2];
                                                                         }
-                                                                        c = b + 16 | 0;
-                                                                        a = v[b + 16 >> 2];
                                                                         if (a) {
                                                                             continue;
                                                                         }
                                                                         break;
                                                                     }
-                                                                    v[f >> 2] = 0;
-                                                                    break c;
                                                                 }
-                                                                c = v[1020];
-                                                                if (c >>> 0 >= g >>> 0) {
-                                                                    d = v[1023];
-                                                                    b = c - g | 0;
-                                                                    u: {
-                                                                        if (b >>> 0 >= 16) {
-                                                                            v[1020] = b;
-                                                                            a = d + g | 0;
-                                                                            v[1023] = a;
-                                                                            v[a + 4 >> 2] = b | 1;
-                                                                            v[c + d >> 2] = b;
-                                                                            v[d + 4 >> 2] = g | 3;
-                                                                            break u;
-                                                                        }
-                                                                        v[1023] = 0;
-                                                                        v[1020] = 0;
-                                                                        v[d + 4 >> 2] = c | 3;
-                                                                        a = c + d | 0;
-                                                                        v[a + 4 >> 2] = v[a + 4 >> 2] | 1;
-                                                                    }
-                                                                    a = d + 8 | 0;
-                                                                    break a;
+                                                                if (!d | v[1020] - h >>> 0 <= f >>> 0) {
+                                                                    break j;
                                                                 }
-                                                                h = v[1021];
-                                                                if (h >>> 0 > g >>> 0) {
-                                                                    b = h - g | 0;
-                                                                    v[1021] = b;
-                                                                    c = v[1024];
-                                                                    a = c + g | 0;
-                                                                    v[1024] = a;
-                                                                    v[a + 4 >> 2] = b | 1;
-                                                                    v[c + 4 >> 2] = g | 3;
-                                                                    a = c + 8 | 0;
-                                                                    break a;
+                                                                i = v[d + 24 >> 2];
+                                                                a = v[d + 12 >> 2];
+                                                                if ((d | 0) != (a | 0)) {
+                                                                    b = v[d + 8 >> 2];
+                                                                    v[b + 12 >> 2] = a;
+                                                                    v[a + 8 >> 2] = b;
+                                                                    break c;
                                                                 }
-                                                                a = 0;
-                                                                j = g + 47 | 0;
-                                                                b = j;
-                                                                if (v[1136]) {
-                                                                    c = v[1138];
+                                                                b = v[d + 20 >> 2];
+                                                                if (b) {
+                                                                    c = d + 20 | 0;
                                                                 }
                                                                 else {
-                                                                    v[1139] = -1;
-                                                                    v[1140] = -1;
-                                                                    v[1137] = 4096;
-                                                                    v[1138] = 4096;
-                                                                    v[1136] = l + 12 & -16 ^ 1431655768;
-                                                                    v[1141] = 0;
-                                                                    v[1129] = 0;
-                                                                    c = 4096;
+                                                                    b = v[d + 16 >> 2];
+                                                                    if (!b) {
+                                                                        break h;
+                                                                    }
+                                                                    c = d + 16 | 0;
                                                                 }
-                                                                f = 0 - c | 0;
-                                                                e = b + c | 0;
-                                                                c = f & e;
-                                                                if (c >>> 0 <= g >>> 0) {
-                                                                    break a;
+                                                                while (1) {
+                                                                    e = c;
+                                                                    a = b;
+                                                                    c = a + 20 | 0;
+                                                                    b = v[a + 20 >> 2];
+                                                                    if (b) {
+                                                                        continue;
+                                                                    }
+                                                                    c = a + 16 | 0;
+                                                                    b = v[a + 16 >> 2];
+                                                                    if (b) {
+                                                                        continue;
+                                                                    }
+                                                                    break;
                                                                 }
-                                                                b = v[1128];
-                                                                if (b) {
-                                                                    k = b;
-                                                                    d = v[1126];
-                                                                    b = d + c | 0;
-                                                                    if (k >>> 0 < b >>> 0 | b >>> 0 <= d >>> 0) {
-                                                                        break a;
+                                                                v[e >> 2] = 0;
+                                                                break c;
+                                                            }
+                                                            d = v[1020];
+                                                            if (d >>> 0 >= h >>> 0) {
+                                                                a = v[1023];
+                                                                b = d - h | 0;
+                                                                s: {
+                                                                    if (b >>> 0 >= 16) {
+                                                                        c = a + h | 0;
+                                                                        v[c + 4 >> 2] = b | 1;
+                                                                        v[a + d >> 2] = b;
+                                                                        v[a + 4 >> 2] = h | 3;
+                                                                        break s;
                                                                     }
+                                                                    v[a + 4 >> 2] = d | 3;
+                                                                    b = a + d | 0;
+                                                                    v[b + 4 >> 2] = v[b + 4 >> 2] | 1;
+                                                                    c = 0;
+                                                                    b = 0;
                                                                 }
-                                                                if (w[4516] & 4) {
-                                                                    break f;
+                                                                v[1020] = b;
+                                                                v[1023] = c;
+                                                                a = a + 8 | 0;
+                                                                break a;
+                                                            }
+                                                            c = v[1021];
+                                                            if (c >>> 0 > h >>> 0) {
+                                                                b = c - h | 0;
+                                                                v[1021] = b;
+                                                                a = v[1024];
+                                                                c = a + h | 0;
+                                                                v[1024] = c;
+                                                                v[c + 4 >> 2] = b | 1;
+                                                                v[a + 4 >> 2] = h | 3;
+                                                                a = a + 8 | 0;
+                                                                break a;
+                                                            }
+                                                            a = 0;
+                                                            f = h + 47 | 0;
+                                                            if (v[1136]) {
+                                                                b = v[1138];
+                                                            }
+                                                            else {
+                                                                v[1139] = -1;
+                                                                v[1140] = -1;
+                                                                v[1137] = 4096;
+                                                                v[1138] = 4096;
+                                                                v[1136] = k + 12 & -16 ^ 1431655768;
+                                                                v[1141] = 0;
+                                                                v[1129] = 0;
+                                                                b = 4096;
+                                                            }
+                                                            e = f + b | 0;
+                                                            g = 0 - b | 0;
+                                                            b = e & g;
+                                                            if (b >>> 0 <= h >>> 0) {
+                                                                break a;
+                                                            }
+                                                            i = v[1128];
+                                                            if (i) {
+                                                                j = v[1126];
+                                                                d = j + b | 0;
+                                                                if (d >>> 0 <= j >>> 0 | d >>> 0 > i >>> 0) {
+                                                                    break a;
                                                                 }
-                                                                v: {
-                                                                    w: {
-                                                                        d = v[1024];
-                                                                        if (d) {
-                                                                            a = 4520;
-                                                                            while (1) {
-                                                                                b = v[a >> 2];
-                                                                                if (b >>> 0 <= d >>> 0 & d >>> 0 < b + v[a + 4 >> 2] >>> 0) {
-                                                                                    break w;
+                                                            }
+                                                            t: {
+                                                                if (!(w[4516] & 4)) {
+                                                                    u: {
+                                                                        v: {
+                                                                            w: {
+                                                                                x: {
+                                                                                    d = v[1024];
+                                                                                    if (d) {
+                                                                                        a = 4520;
+                                                                                        while (1) {
+                                                                                            i = v[a >> 2];
+                                                                                            if (i >>> 0 <= d >>> 0 & d >>> 0 < i + v[a + 4 >> 2] >>> 0) {
+                                                                                                break x;
+                                                                                            }
+                                                                                            a = v[a + 8 >> 2];
+                                                                                            if (a) {
+                                                                                                continue;
+                                                                                            }
+                                                                                            break;
+                                                                                        }
+                                                                                    }
+                                                                                    c = X(0);
+                                                                                    if ((c | 0) == -1) {
+                                                                                        break u;
+                                                                                    }
+                                                                                    e = b;
+                                                                                    a = v[1137];
+                                                                                    d = a - 1 | 0;
+                                                                                    if (d & c) {
+                                                                                        e = (b - c | 0) + (c + d & 0 - a) | 0;
+                                                                                    }
+                                                                                    if (e >>> 0 <= h >>> 0) {
+                                                                                        break u;
+                                                                                    }
+                                                                                    d = v[1128];
+                                                                                    if (d) {
+                                                                                        g = v[1126];
+                                                                                        a = g + e | 0;
+                                                                                        if (a >>> 0 <= g >>> 0 | a >>> 0 > d >>> 0) {
+                                                                                            break u;
+                                                                                        }
+                                                                                    }
+                                                                                    a = X(e);
+                                                                                    if ((c | 0) != (a | 0)) {
+                                                                                        break w;
+                                                                                    }
+                                                                                    break t;
                                                                                 }
-                                                                                a = v[a + 8 >> 2];
-                                                                                if (a) {
-                                                                                    continue;
+                                                                                e = g & e - c;
+                                                                                c = X(e);
+                                                                                if ((c | 0) == (v[a >> 2] + v[a + 4 >> 2] | 0)) {
+                                                                                    break v;
                                                                                 }
-                                                                                break;
+                                                                                a = c;
                                                                             }
-                                                                        }
-                                                                        b = _(0);
-                                                                        if ((b | 0) == -1) {
-                                                                            break g;
-                                                                        }
-                                                                        h = c;
-                                                                        d = v[1137];
-                                                                        a = d - 1 | 0;
-                                                                        if (a & b) {
-                                                                            h = (c - b | 0) + (a + b & 0 - d) | 0;
-                                                                        }
-                                                                        if (h >>> 0 > 2147483646 | g >>> 0 >= h >>> 0) {
-                                                                            break g;
-                                                                        }
-                                                                        a = v[1128];
-                                                                        if (a) {
-                                                                            f = a;
-                                                                            d = v[1126];
-                                                                            a = d + h | 0;
-                                                                            if (f >>> 0 < a >>> 0 | a >>> 0 <= d >>> 0) {
-                                                                                break g;
+                                                                            if ((a | 0) == -1) {
+                                                                                break u;
+                                                                            }
+                                                                            if (h + 48 >>> 0 <= e >>> 0) {
+                                                                                c = a;
+                                                                                break t;
+                                                                            }
+                                                                            c = v[1138];
+                                                                            c = c + (f - e | 0) & 0 - c;
+                                                                            if ((X(c) | 0) == -1) {
+                                                                                break u;
                                                                             }
+                                                                            e = c + e | 0;
+                                                                            c = a;
+                                                                            break t;
                                                                         }
-                                                                        a = _(h);
-                                                                        if ((b | 0) != (a | 0)) {
-                                                                            break v;
+                                                                        if ((c | 0) != -1) {
+                                                                            break t;
                                                                         }
-                                                                        break e;
-                                                                    }
-                                                                    h = f & e - h;
-                                                                    if (h >>> 0 > 2147483646) {
-                                                                        break g;
-                                                                    }
-                                                                    b = _(h);
-                                                                    if ((b | 0) == (v[a + 4 >> 2] + v[a >> 2] | 0)) {
-                                                                        break h;
                                                                     }
-                                                                    a = b;
+                                                                    v[1129] = v[1129] | 4;
                                                                 }
-                                                                if (!((a | 0) == -1 | g + 48 >>> 0 <= h >>> 0)) {
-                                                                    b = v[1138];
-                                                                    b = 0 - b & b + (j - h | 0);
-                                                                    if (b >>> 0 > 2147483646) {
-                                                                        b = a;
-                                                                        break e;
-                                                                    }
-                                                                    if ((_(b) | 0) != -1) {
-                                                                        h = b + h | 0;
-                                                                        b = a;
-                                                                        break e;
+                                                                c = X(b);
+                                                                a = X(0);
+                                                                if ((c | 0) == -1 | (a | 0) == -1 | a >>> 0 <= c >>> 0) {
+                                                                    break e;
+                                                                }
+                                                                e = a - c | 0;
+                                                                if (e >>> 0 <= h + 40 >>> 0) {
+                                                                    break e;
+                                                                }
+                                                            }
+                                                            a = v[1126] + e | 0;
+                                                            v[1126] = a;
+                                                            if (a >>> 0 > y[1127]) {
+                                                                v[1127] = a;
+                                                            }
+                                                            y: {
+                                                                f = v[1024];
+                                                                if (f) {
+                                                                    a = 4520;
+                                                                    while (1) {
+                                                                        b = v[a >> 2];
+                                                                        d = v[a + 4 >> 2];
+                                                                        if ((b + d | 0) == (c | 0)) {
+                                                                            break y;
+                                                                        }
+                                                                        a = v[a + 8 >> 2];
+                                                                        if (a) {
+                                                                            continue;
+                                                                        }
+                                                                        break;
                                                                     }
-                                                                    _(0 - h | 0);
                                                                     break g;
                                                                 }
-                                                                b = a;
-                                                                if ((a | 0) != -1) {
-                                                                    break e;
+                                                                a = v[1022];
+                                                                if (!(a >>> 0 <= c >>> 0 ? a : 0)) {
+                                                                    v[1022] = c;
                                                                 }
+                                                                a = 0;
+                                                                v[1131] = e;
+                                                                v[1130] = c;
+                                                                v[1026] = -1;
+                                                                v[1027] = v[1136];
+                                                                v[1133] = 0;
+                                                                while (1) {
+                                                                    b = a << 3;
+                                                                    d = b + 4112 | 0;
+                                                                    v[b + 4120 >> 2] = d;
+                                                                    v[b + 4124 >> 2] = d;
+                                                                    a = a + 1 | 0;
+                                                                    if ((a | 0) != 32) {
+                                                                        continue;
+                                                                    }
+                                                                    break;
+                                                                }
+                                                                a = e - 40 | 0;
+                                                                b = -8 - c & 7;
+                                                                d = a - b | 0;
+                                                                v[1021] = d;
+                                                                b = b + c | 0;
+                                                                v[1024] = b;
+                                                                v[b + 4 >> 2] = d | 1;
+                                                                v[(a + c | 0) + 4 >> 2] = 40;
+                                                                v[1025] = v[1140];
+                                                                break f;
+                                                            }
+                                                            if (v[a + 12 >> 2] & 8 | (c >>> 0 <= f >>> 0 | b >>> 0 > f >>> 0)) {
                                                                 break g;
                                                             }
-                                                            e = 0;
-                                                            break b;
+                                                            v[a + 4 >> 2] = d + e;
+                                                            a = -8 - f & 7;
+                                                            b = a + f | 0;
+                                                            v[1024] = b;
+                                                            c = v[1021] + e | 0;
+                                                            a = c - a | 0;
+                                                            v[1021] = a;
+                                                            v[b + 4 >> 2] = a | 1;
+                                                            v[(c + f | 0) + 4 >> 2] = 40;
+                                                            v[1025] = v[1140];
+                                                            break f;
                                                         }
-                                                        b = 0;
-                                                        break c;
-                                                    }
-                                                    if ((b | 0) != -1) {
-                                                        break e;
+                                                        a = 0;
+                                                        break b;
                                                     }
+                                                    a = 0;
+                                                    break c;
                                                 }
-                                                v[1129] = v[1129] | 4;
-                                            }
-                                            if (c >>> 0 > 2147483646) {
-                                                break d;
-                                            }
-                                            b = _(c);
-                                            a = _(0);
-                                            if (b >>> 0 >= a >>> 0 | ((a | 0) == -1 | (b | 0) == -1)) {
-                                                break d;
-                                            }
-                                            h = a - b | 0;
-                                            if (h >>> 0 <= g + 40 >>> 0) {
-                                                break d;
-                                            }
-                                        }
-                                        a = v[1126] + h | 0;
-                                        v[1126] = a;
-                                        if (a >>> 0 > y[1127]) {
-                                            v[1127] = a;
-                                        }
-                                        x: {
-                                            y: {
+                                                if (y[1022] > c >>> 0) {
+                                                    v[1022] = c;
+                                                }
+                                                d = c + e | 0;
+                                                a = 4520;
                                                 z: {
-                                                    f = v[1024];
-                                                    if (f) {
-                                                        a = 4520;
-                                                        while (1) {
-                                                            d = v[a + 4 >> 2];
-                                                            c = v[a >> 2];
-                                                            if ((d + c | 0) == (b | 0)) {
-                                                                break z;
-                                                            }
+                                                    while (1) {
+                                                        b = v[a >> 2];
+                                                        if ((b | 0) != (d | 0)) {
                                                             a = v[a + 8 >> 2];
                                                             if (a) {
                                                                 continue;
                                                             }
-                                                            break;
+                                                            break z;
                                                         }
-                                                        break y;
+                                                        break;
                                                     }
-                                                    a = v[1022];
-                                                    if (!(a >>> 0 <= b >>> 0 ? a : 0)) {
-                                                        v[1022] = b;
+                                                    if (!(w[a + 12 | 0] & 8)) {
+                                                        break d;
                                                     }
-                                                    a = 0;
-                                                    v[1131] = h;
-                                                    v[1130] = b;
-                                                    v[1026] = -1;
-                                                    v[1027] = v[1136];
-                                                    v[1133] = 0;
-                                                    while (1) {
-                                                        d = a << 3;
-                                                        c = d + 4112 | 0;
-                                                        v[d + 4120 >> 2] = c;
-                                                        v[d + 4124 >> 2] = c;
-                                                        a = a + 1 | 0;
-                                                        if ((a | 0) != 32) {
-                                                            continue;
+                                                }
+                                                a = 4520;
+                                                while (1) {
+                                                    A: {
+                                                        b = v[a >> 2];
+                                                        if (b >>> 0 <= f >>> 0) {
+                                                            d = b + v[a + 4 >> 2] | 0;
+                                                            if (d >>> 0 > f >>> 0) {
+                                                                break A;
+                                                            }
                                                         }
-                                                        break;
+                                                        a = v[a + 8 >> 2];
+                                                        continue;
                                                     }
-                                                    a = b + 8 & 7 ? -8 - b & 7 : 0;
-                                                    c = a + b | 0;
-                                                    v[1024] = c;
-                                                    a = (h - a | 0) - 40 | 0;
-                                                    v[1021] = a;
-                                                    v[c + 4 >> 2] = a | 1;
-                                                    v[(b + h | 0) - 36 >> 2] = 40;
-                                                    v[1025] = v[1140];
-                                                    break x;
-                                                }
-                                                if (w[a + 12 | 0] & 8 | c >>> 0 > f >>> 0 | b >>> 0 <= f >>> 0) {
-                                                    break y;
+                                                    break;
                                                 }
-                                                v[a + 4 >> 2] = d + h;
-                                                a = f + 8 & 7 ? -8 - f & 7 : 0;
-                                                c = a + f | 0;
-                                                v[1024] = c;
-                                                b = v[1021] + h | 0;
-                                                a = b - a | 0;
-                                                v[1021] = a;
-                                                v[c + 4 >> 2] = a | 1;
-                                                v[(b + f | 0) + 4 >> 2] = 40;
+                                                a = e - 40 | 0;
+                                                b = -8 - c & 7;
+                                                g = a - b | 0;
+                                                v[1021] = g;
+                                                b = b + c | 0;
+                                                v[1024] = b;
+                                                v[b + 4 >> 2] = g | 1;
+                                                v[(a + c | 0) + 4 >> 2] = 40;
                                                 v[1025] = v[1140];
-                                                break x;
-                                            }
-                                            if (y[1022] > b >>> 0) {
-                                                v[1022] = b;
-                                            }
-                                            e = b + h | 0;
-                                            a = 4520;
-                                            A: {
+                                                a = (d + (39 - d & 7) | 0) - 47 | 0;
+                                                b = a >>> 0 < f + 16 >>> 0 ? f : a;
+                                                v[b + 4 >> 2] = 27;
+                                                a = v[1133];
+                                                v[b + 16 >> 2] = v[1132];
+                                                v[b + 20 >> 2] = a;
+                                                a = v[1131];
+                                                v[b + 8 >> 2] = v[1130];
+                                                v[b + 12 >> 2] = a;
+                                                v[1132] = b + 8;
+                                                v[1131] = e;
+                                                v[1130] = c;
+                                                v[1133] = 0;
+                                                a = b + 24 | 0;
+                                                while (1) {
+                                                    v[a + 4 >> 2] = 7;
+                                                    c = a + 8 | 0;
+                                                    a = a + 4 | 0;
+                                                    if (c >>> 0 < d >>> 0) {
+                                                        continue;
+                                                    }
+                                                    break;
+                                                }
+                                                if ((b | 0) == (f | 0)) {
+                                                    break f;
+                                                }
+                                                v[b + 4 >> 2] = v[b + 4 >> 2] & -2;
+                                                c = b - f | 0;
+                                                v[f + 4 >> 2] = c | 1;
+                                                v[b >> 2] = c;
                                                 B: {
-                                                    C: {
-                                                        D: {
-                                                            E: {
-                                                                F: {
-                                                                    while (1) {
-                                                                        if ((e | 0) != v[a >> 2]) {
-                                                                            a = v[a + 8 >> 2];
-                                                                            if (a) {
-                                                                                continue;
-                                                                            }
-                                                                            break F;
-                                                                        }
-                                                                        break;
-                                                                    }
-                                                                    if (!(w[a + 12 | 0] & 8)) {
-                                                                        break E;
-                                                                    }
-                                                                }
-                                                                a = 4520;
-                                                                while (1) {
-                                                                    c = v[a >> 2];
-                                                                    if (c >>> 0 <= f >>> 0) {
-                                                                        d = c + v[a + 4 >> 2] | 0;
-                                                                        if (d >>> 0 > f >>> 0) {
-                                                                            break D;
-                                                                        }
-                                                                    }
-                                                                    a = v[a + 8 >> 2];
-                                                                    continue;
-                                                                }
-                                                            }
-                                                            v[a >> 2] = b;
-                                                            v[a + 4 >> 2] = v[a + 4 >> 2] + h;
-                                                            h = (b + 8 & 7 ? -8 - b & 7 : 0) + b | 0;
-                                                            v[h + 4 >> 2] = g | 3;
-                                                            e = e + (e + 8 & 7 ? -8 - e & 7 : 0) | 0;
-                                                            i = g + h | 0;
-                                                            c = e - i | 0;
-                                                            if ((e | 0) == (f | 0)) {
-                                                                v[1024] = i;
-                                                                a = v[1021] + c | 0;
-                                                                v[1021] = a;
-                                                                v[i + 4 >> 2] = a | 1;
-                                                                break B;
+                                                    if (c >>> 0 <= 255) {
+                                                        a = (c & -8) + 4112 | 0;
+                                                        b = v[1018];
+                                                        c = 1 << (c >>> 3);
+                                                        C: {
+                                                            if (!(b & c)) {
+                                                                v[1018] = b | c;
+                                                                b = a;
+                                                                break C;
                                                             }
-                                                            if (v[1023] == (e | 0)) {
-                                                                v[1023] = i;
-                                                                a = v[1020] + c | 0;
-                                                                v[1020] = a;
-                                                                v[i + 4 >> 2] = a | 1;
-                                                                v[a + i >> 2] = a;
-                                                                break B;
+                                                            b = v[a + 8 >> 2];
+                                                        }
+                                                        v[a + 8 >> 2] = f;
+                                                        v[b + 12 >> 2] = f;
+                                                        d = 8;
+                                                        c = 12;
+                                                        break B;
+                                                    }
+                                                    a = 31;
+                                                    if (c >>> 0 <= 16777215) {
+                                                        a = E(c >>> 8 | 0);
+                                                        a = ((c >>> 38 - a & 1) - (a << 1) | 0) + 62 | 0;
+                                                    }
+                                                    v[f + 28 >> 2] = a;
+                                                    v[f + 16 >> 2] = 0;
+                                                    v[f + 20 >> 2] = 0;
+                                                    b = (a << 2) + 4376 | 0;
+                                                    D: {
+                                                        d = v[1019];
+                                                        e = 1 << a;
+                                                        E: {
+                                                            if (!(d & e)) {
+                                                                v[1019] = d | e;
+                                                                v[b >> 2] = f;
+                                                                break E;
                                                             }
-                                                            a = v[e + 4 >> 2];
-                                                            if ((a & 3) == 1) {
-                                                                f = a & -8;
-                                                                G: {
-                                                                    if (a >>> 0 <= 255) {
-                                                                        d = v[e + 8 >> 2];
-                                                                        a = a >>> 3 | 0;
-                                                                        b = v[e + 12 >> 2];
-                                                                        if ((b | 0) == (d | 0)) {
-                                                                            v[1018] = v[1018] & Va(a);
-                                                                            break G;
-                                                                        }
-                                                                        v[d + 12 >> 2] = b;
-                                                                        v[b + 8 >> 2] = d;
-                                                                        break G;
-                                                                    }
-                                                                    j = v[e + 24 >> 2];
-                                                                    b = v[e + 12 >> 2];
-                                                                    H: {
-                                                                        if ((e | 0) != (b | 0)) {
-                                                                            a = v[e + 8 >> 2];
-                                                                            v[a + 12 >> 2] = b;
-                                                                            v[b + 8 >> 2] = a;
-                                                                            break H;
-                                                                        }
-                                                                        I: {
-                                                                            a = e + 20 | 0;
-                                                                            d = v[a >> 2];
-                                                                            if (d) {
-                                                                                break I;
-                                                                            }
-                                                                            a = e + 16 | 0;
-                                                                            d = v[a >> 2];
-                                                                            if (d) {
-                                                                                break I;
-                                                                            }
-                                                                            b = 0;
-                                                                            break H;
-                                                                        }
-                                                                        while (1) {
-                                                                            g = a;
-                                                                            b = d;
-                                                                            a = b + 20 | 0;
-                                                                            d = v[a >> 2];
-                                                                            if (d) {
-                                                                                continue;
-                                                                            }
-                                                                            a = b + 16 | 0;
-                                                                            d = v[b + 16 >> 2];
-                                                                            if (d) {
-                                                                                continue;
-                                                                            }
-                                                                            break;
-                                                                        }
-                                                                        v[g >> 2] = 0;
-                                                                    }
-                                                                    if (!j) {
-                                                                        break G;
-                                                                    }
-                                                                    d = v[e + 28 >> 2];
-                                                                    a = (d << 2) + 4376 | 0;
-                                                                    J: {
-                                                                        if (v[a >> 2] == (e | 0)) {
-                                                                            v[a >> 2] = b;
-                                                                            if (b) {
-                                                                                break J;
-                                                                            }
-                                                                            v[1019] = v[1019] & Va(d);
-                                                                            break G;
-                                                                        }
-                                                                        v[j + (v[j + 16 >> 2] == (e | 0) ? 16 : 20) >> 2] = b;
-                                                                        if (!b) {
-                                                                            break G;
-                                                                        }
-                                                                    }
-                                                                    v[b + 24 >> 2] = j;
-                                                                    a = v[e + 16 >> 2];
-                                                                    if (a) {
-                                                                        v[b + 16 >> 2] = a;
-                                                                        v[a + 24 >> 2] = b;
-                                                                    }
-                                                                    a = v[e + 20 >> 2];
-                                                                    if (!a) {
-                                                                        break G;
-                                                                    }
-                                                                    v[b + 20 >> 2] = a;
-                                                                    v[a + 24 >> 2] = b;
+                                                            a = c << ((a | 0) != 31 ? 25 - (a >>> 1 | 0) | 0 : 0);
+                                                            d = v[b >> 2];
+                                                            while (1) {
+                                                                b = d;
+                                                                if ((c | 0) == (v[b + 4 >> 2] & -8)) {
+                                                                    break D;
                                                                 }
-                                                                e = e + f | 0;
-                                                                c = c + f | 0;
-                                                            }
-                                                            v[e + 4 >> 2] = v[e + 4 >> 2] & -2;
-                                                            v[i + 4 >> 2] = c | 1;
-                                                            v[c + i >> 2] = c;
-                                                            if (c >>> 0 <= 255) {
-                                                                a = c >>> 3 | 0;
-                                                                b = (a << 3) + 4112 | 0;
-                                                                c = 1 << a;
-                                                                a = v[1018];
-                                                                K: {
-                                                                    if (!(c & a)) {
-                                                                        v[1018] = a | c;
-                                                                        a = b;
-                                                                        break K;
-                                                                    }
-                                                                    a = v[b + 8 >> 2];
+                                                                d = a >>> 29 | 0;
+                                                                a = a << 1;
+                                                                e = (d & 4) + b | 0;
+                                                                d = v[e + 16 >> 2];
+                                                                if (d) {
+                                                                    continue;
                                                                 }
-                                                                v[b + 8 >> 2] = i;
-                                                                v[a + 12 >> 2] = i;
-                                                                v[i + 12 >> 2] = b;
-                                                                v[i + 8 >> 2] = a;
-                                                                break B;
-                                                            }
-                                                            a = 31;
-                                                            if (c >>> 0 <= 16777215) {
-                                                                a = c >>> 8 | 0;
-                                                                g = a + 1048320 >>> 16 & 8;
-                                                                a = a << g;
-                                                                d = a + 520192 >>> 16 & 4;
-                                                                a = a << d;
-                                                                b = a + 245760 >>> 16 & 2;
-                                                                a = (a << b >>> 15 | 0) - (b | (d | g)) | 0;
-                                                                a = (c >>> a + 21 & 1 | a << 1) + 28 | 0;
+                                                                break;
                                                             }
-                                                            v[i + 28 >> 2] = a;
-                                                            v[i + 16 >> 2] = 0;
-                                                            v[i + 20 >> 2] = 0;
-                                                            g = (a << 2) + 4376 | 0;
-                                                            d = 1 << a;
-                                                            b = v[1019];
-                                                            L: {
-                                                                if (!(d & b)) {
-                                                                    v[1019] = b | d;
-                                                                    v[g >> 2] = i;
-                                                                    v[i + 24 >> 2] = g;
-                                                                    break L;
-                                                                }
-                                                                a = c << ((a | 0) == 31 ? 0 : 25 - (a >>> 1 | 0) | 0);
-                                                                b = v[g >> 2];
-                                                                while (1) {
-                                                                    d = b;
-                                                                    if ((v[b + 4 >> 2] & -8) == (c | 0)) {
-                                                                        break C;
-                                                                    }
-                                                                    b = a >>> 29 | 0;
-                                                                    a = a << 1;
-                                                                    g = d + (b & 4) | 0;
-                                                                    b = v[g + 16 >> 2];
-                                                                    if (b) {
-                                                                        continue;
-                                                                    }
-                                                                    break;
-                                                                }
-                                                                v[g + 16 >> 2] = i;
-                                                                v[i + 24 >> 2] = d;
+                                                            v[e + 16 >> 2] = f;
+                                                        }
+                                                        v[f + 24 >> 2] = b;
+                                                        b = f;
+                                                        a = b;
+                                                        d = 12;
+                                                        c = 8;
+                                                        break B;
+                                                    }
+                                                    a = v[b + 8 >> 2];
+                                                    v[a + 12 >> 2] = f;
+                                                    v[b + 8 >> 2] = f;
+                                                    v[f + 8 >> 2] = a;
+                                                    a = 0;
+                                                    d = 12;
+                                                    c = 24;
+                                                }
+                                                v[d + f >> 2] = b;
+                                                v[c + f >> 2] = a;
+                                            }
+                                            a = v[1021];
+                                            if (a >>> 0 <= h >>> 0) {
+                                                break e;
+                                            }
+                                            b = a - h | 0;
+                                            v[1021] = b;
+                                            a = v[1024];
+                                            c = a + h | 0;
+                                            v[1024] = c;
+                                            v[c + 4 >> 2] = b | 1;
+                                            v[a + 4 >> 2] = h | 3;
+                                            a = a + 8 | 0;
+                                            break a;
+                                        }
+                                        v[1017] = 48;
+                                        a = 0;
+                                        break a;
+                                    }
+                                    v[a >> 2] = c;
+                                    v[a + 4 >> 2] = v[a + 4 >> 2] + e;
+                                    i = (-8 - c & 7) + c | 0;
+                                    v[i + 4 >> 2] = h | 3;
+                                    e = b + (-8 - b & 7) | 0;
+                                    f = h + i | 0;
+                                    g = e - f | 0;
+                                    F: {
+                                        if (v[1024] == (e | 0)) {
+                                            v[1024] = f;
+                                            a = v[1021] + g | 0;
+                                            v[1021] = a;
+                                            v[f + 4 >> 2] = a | 1;
+                                            break F;
+                                        }
+                                        if (v[1023] == (e | 0)) {
+                                            v[1023] = f;
+                                            a = v[1020] + g | 0;
+                                            v[1020] = a;
+                                            v[f + 4 >> 2] = a | 1;
+                                            v[a + f >> 2] = a;
+                                            break F;
+                                        }
+                                        a = v[e + 4 >> 2];
+                                        if ((a & 3) == 1) {
+                                            j = a & -8;
+                                            c = v[e + 12 >> 2];
+                                            G: {
+                                                if (a >>> 0 <= 255) {
+                                                    b = v[e + 8 >> 2];
+                                                    if ((b | 0) == (c | 0)) {
+                                                        v[1018] = v[1018] & Ya(a >>> 3 | 0);
+                                                        break G;
+                                                    }
+                                                    v[b + 12 >> 2] = c;
+                                                    v[c + 8 >> 2] = b;
+                                                    break G;
+                                                }
+                                                h = v[e + 24 >> 2];
+                                                H: {
+                                                    if ((c | 0) != (e | 0)) {
+                                                        a = v[e + 8 >> 2];
+                                                        v[a + 12 >> 2] = c;
+                                                        v[c + 8 >> 2] = a;
+                                                        break H;
+                                                    }
+                                                    I: {
+                                                        a = v[e + 20 >> 2];
+                                                        if (a) {
+                                                            b = e + 20 | 0;
+                                                        }
+                                                        else {
+                                                            a = v[e + 16 >> 2];
+                                                            if (!a) {
+                                                                break I;
                                                             }
-                                                            v[i + 12 >> 2] = i;
-                                                            v[i + 8 >> 2] = i;
-                                                            break B;
+                                                            b = e + 16 | 0;
                                                         }
-                                                        a = b + 8 & 7 ? -8 - b & 7 : 0;
-                                                        c = a + b | 0;
-                                                        v[1024] = c;
-                                                        a = (h - a | 0) - 40 | 0;
-                                                        v[1021] = a;
-                                                        v[c + 4 >> 2] = a | 1;
-                                                        v[e - 36 >> 2] = 40;
-                                                        v[1025] = v[1140];
-                                                        a = (d + (d - 39 & 7 ? 39 - d & 7 : 0) | 0) - 47 | 0;
-                                                        c = a >>> 0 < f + 16 >>> 0 ? f : a;
-                                                        v[c + 4 >> 2] = 27;
-                                                        a = v[1133];
-                                                        v[c + 16 >> 2] = v[1132];
-                                                        v[c + 20 >> 2] = a;
-                                                        a = v[1131];
-                                                        v[c + 8 >> 2] = v[1130];
-                                                        v[c + 12 >> 2] = a;
-                                                        v[1132] = c + 8;
-                                                        v[1131] = h;
-                                                        v[1130] = b;
-                                                        v[1133] = 0;
-                                                        a = c + 24 | 0;
                                                         while (1) {
-                                                            v[a + 4 >> 2] = 7;
-                                                            b = a + 8 | 0;
-                                                            a = a + 4 | 0;
-                                                            if (b >>> 0 < d >>> 0) {
+                                                            d = b;
+                                                            c = a;
+                                                            b = a + 20 | 0;
+                                                            a = v[a + 20 >> 2];
+                                                            if (a) {
                                                                 continue;
                                                             }
-                                                            break;
-                                                        }
-                                                        if ((c | 0) == (f | 0)) {
-                                                            break x;
-                                                        }
-                                                        v[c + 4 >> 2] = v[c + 4 >> 2] & -2;
-                                                        e = c - f | 0;
-                                                        v[f + 4 >> 2] = e | 1;
-                                                        v[c >> 2] = e;
-                                                        if (e >>> 0 <= 255) {
-                                                            a = e >>> 3 | 0;
-                                                            b = (a << 3) + 4112 | 0;
-                                                            c = 1 << a;
-                                                            a = v[1018];
-                                                            M: {
-                                                                if (!(c & a)) {
-                                                                    v[1018] = a | c;
-                                                                    a = b;
-                                                                    break M;
-                                                                }
-                                                                a = v[b + 8 >> 2];
+                                                            b = c + 16 | 0;
+                                                            a = v[c + 16 >> 2];
+                                                            if (a) {
+                                                                continue;
                                                             }
-                                                            v[b + 8 >> 2] = f;
-                                                            v[a + 12 >> 2] = f;
-                                                            v[f + 12 >> 2] = b;
-                                                            v[f + 8 >> 2] = a;
-                                                            break x;
-                                                        }
-                                                        a = 31;
-                                                        v[f + 16 >> 2] = 0;
-                                                        v[f + 20 >> 2] = 0;
-                                                        if (e >>> 0 <= 16777215) {
-                                                            a = e >>> 8 | 0;
-                                                            d = a + 1048320 >>> 16 & 8;
-                                                            a = a << d;
-                                                            c = a + 520192 >>> 16 & 4;
-                                                            a = a << c;
-                                                            b = a + 245760 >>> 16 & 2;
-                                                            a = (a << b >>> 15 | 0) - (b | (c | d)) | 0;
-                                                            a = (e >>> a + 21 & 1 | a << 1) + 28 | 0;
+                                                            break;
                                                         }
-                                                        v[f + 28 >> 2] = a;
-                                                        d = (a << 2) + 4376 | 0;
-                                                        c = v[1019];
-                                                        b = 1 << a;
-                                                        N: {
-                                                            if (!(c & b)) {
-                                                                v[1019] = b | c;
-                                                                v[d >> 2] = f;
-                                                                v[f + 24 >> 2] = d;
-                                                                break N;
-                                                            }
-                                                            a = e << ((a | 0) == 31 ? 0 : 25 - (a >>> 1 | 0) | 0);
-                                                            b = v[d >> 2];
-                                                            while (1) {
-                                                                c = b;
-                                                                if ((e | 0) == (v[b + 4 >> 2] & -8)) {
-                                                                    break A;
-                                                                }
-                                                                b = a >>> 29 | 0;
-                                                                a = a << 1;
-                                                                d = c + (b & 4) | 0;
-                                                                b = v[d + 16 >> 2];
-                                                                if (b) {
-                                                                    continue;
-                                                                }
-                                                                break;
-                                                            }
-                                                            v[d + 16 >> 2] = f;
-                                                            v[f + 24 >> 2] = c;
+                                                        v[d >> 2] = 0;
+                                                        break H;
+                                                    }
+                                                    c = 0;
+                                                }
+                                                if (!h) {
+                                                    break G;
+                                                }
+                                                a = v[e + 28 >> 2];
+                                                b = (a << 2) + 4376 | 0;
+                                                J: {
+                                                    if (v[b >> 2] == (e | 0)) {
+                                                        v[b >> 2] = c;
+                                                        if (c) {
+                                                            break J;
                                                         }
-                                                        v[f + 12 >> 2] = f;
-                                                        v[f + 8 >> 2] = f;
-                                                        break x;
+                                                        v[1019] = v[1019] & Ya(a);
+                                                        break G;
+                                                    }
+                                                    v[h + (v[h + 16 >> 2] == (e | 0) ? 16 : 20) >> 2] = c;
+                                                    if (!c) {
+                                                        break G;
                                                     }
-                                                    a = v[d + 8 >> 2];
-                                                    v[a + 12 >> 2] = i;
-                                                    v[d + 8 >> 2] = i;
-                                                    v[i + 24 >> 2] = 0;
-                                                    v[i + 12 >> 2] = d;
-                                                    v[i + 8 >> 2] = a;
                                                 }
-                                                a = h + 8 | 0;
-                                                break a;
+                                                v[c + 24 >> 2] = h;
+                                                a = v[e + 16 >> 2];
+                                                if (a) {
+                                                    v[c + 16 >> 2] = a;
+                                                    v[a + 24 >> 2] = c;
+                                                }
+                                                a = v[e + 20 >> 2];
+                                                if (!a) {
+                                                    break G;
+                                                }
+                                                v[c + 20 >> 2] = a;
+                                                v[a + 24 >> 2] = c;
+                                            }
+                                            g = g + j | 0;
+                                            e = e + j | 0;
+                                            a = v[e + 4 >> 2];
+                                        }
+                                        v[e + 4 >> 2] = a & -2;
+                                        v[f + 4 >> 2] = g | 1;
+                                        v[f + g >> 2] = g;
+                                        if (g >>> 0 <= 255) {
+                                            a = (g & -8) + 4112 | 0;
+                                            b = v[1018];
+                                            c = 1 << (g >>> 3);
+                                            K: {
+                                                if (!(b & c)) {
+                                                    v[1018] = b | c;
+                                                    b = a;
+                                                    break K;
+                                                }
+                                                b = v[a + 8 >> 2];
                                             }
-                                            a = v[c + 8 >> 2];
-                                            v[a + 12 >> 2] = f;
-                                            v[c + 8 >> 2] = f;
-                                            v[f + 24 >> 2] = 0;
-                                            v[f + 12 >> 2] = c;
-                                            v[f + 8 >> 2] = a;
+                                            v[a + 8 >> 2] = f;
+                                            v[b + 12 >> 2] = f;
+                                            v[f + 12 >> 2] = a;
+                                            v[f + 8 >> 2] = b;
+                                            break F;
                                         }
-                                        a = v[1021];
-                                        if (a >>> 0 <= g >>> 0) {
-                                            break d;
+                                        c = 31;
+                                        if (g >>> 0 <= 16777215) {
+                                            a = E(g >>> 8 | 0);
+                                            c = ((g >>> 38 - a & 1) - (a << 1) | 0) + 62 | 0;
                                         }
-                                        b = a - g | 0;
-                                        v[1021] = b;
-                                        c = v[1024];
-                                        a = c + g | 0;
-                                        v[1024] = a;
-                                        v[a + 4 >> 2] = b | 1;
-                                        v[c + 4 >> 2] = g | 3;
-                                        a = c + 8 | 0;
-                                        break a;
+                                        v[f + 28 >> 2] = c;
+                                        v[f + 16 >> 2] = 0;
+                                        v[f + 20 >> 2] = 0;
+                                        a = (c << 2) + 4376 | 0;
+                                        L: {
+                                            b = v[1019];
+                                            d = 1 << c;
+                                            M: {
+                                                if (!(b & d)) {
+                                                    v[1019] = b | d;
+                                                    v[a >> 2] = f;
+                                                    break M;
+                                                }
+                                                c = g << ((c | 0) != 31 ? 25 - (c >>> 1 | 0) | 0 : 0);
+                                                b = v[a >> 2];
+                                                while (1) {
+                                                    a = b;
+                                                    if ((v[a + 4 >> 2] & -8) == (g | 0)) {
+                                                        break L;
+                                                    }
+                                                    b = c >>> 29 | 0;
+                                                    c = c << 1;
+                                                    d = (b & 4) + a | 0;
+                                                    b = v[d + 16 >> 2];
+                                                    if (b) {
+                                                        continue;
+                                                    }
+                                                    break;
+                                                }
+                                                v[d + 16 >> 2] = f;
+                                            }
+                                            v[f + 24 >> 2] = a;
+                                            v[f + 12 >> 2] = f;
+                                            v[f + 8 >> 2] = f;
+                                            break F;
+                                        }
+                                        b = v[a + 8 >> 2];
+                                        v[b + 12 >> 2] = f;
+                                        v[a + 8 >> 2] = f;
+                                        v[f + 24 >> 2] = 0;
+                                        v[f + 12 >> 2] = a;
+                                        v[f + 8 >> 2] = b;
                                     }
-                                    v[1017] = 48;
-                                    a = 0;
+                                    a = i + 8 | 0;
                                     break a;
                                 }
-                                O: {
-                                    if (!h) {
-                                        break O;
+                                N: {
+                                    if (!i) {
+                                        break N;
                                     }
-                                    c = v[e + 28 >> 2];
-                                    a = (c << 2) + 4376 | 0;
-                                    P: {
-                                        if (v[a >> 2] == (e | 0)) {
-                                            v[a >> 2] = b;
-                                            if (b) {
-                                                break P;
+                                    b = v[d + 28 >> 2];
+                                    c = (b << 2) + 4376 | 0;
+                                    O: {
+                                        if (v[c >> 2] == (d | 0)) {
+                                            v[c >> 2] = a;
+                                            if (a) {
+                                                break O;
                                             }
-                                            i = Va(c) & i;
-                                            v[1019] = i;
-                                            break O;
+                                            g = Ya(b) & g;
+                                            v[1019] = g;
+                                            break N;
                                         }
-                                        v[h + (v[h + 16 >> 2] == (e | 0) ? 16 : 20) >> 2] = b;
-                                        if (!b) {
-                                            break O;
+                                        v[i + (v[i + 16 >> 2] == (d | 0) ? 16 : 20) >> 2] = a;
+                                        if (!a) {
+                                            break N;
                                         }
                                     }
-                                    v[b + 24 >> 2] = h;
-                                    a = v[e + 16 >> 2];
-                                    if (a) {
-                                        v[b + 16 >> 2] = a;
-                                        v[a + 24 >> 2] = b;
+                                    v[a + 24 >> 2] = i;
+                                    b = v[d + 16 >> 2];
+                                    if (b) {
+                                        v[a + 16 >> 2] = b;
+                                        v[b + 24 >> 2] = a;
                                     }
-                                    a = v[e + 20 >> 2];
-                                    if (!a) {
-                                        break O;
+                                    b = v[d + 20 >> 2];
+                                    if (!b) {
+                                        break N;
                                     }
-                                    v[b + 20 >> 2] = a;
-                                    v[a + 24 >> 2] = b;
+                                    v[a + 20 >> 2] = b;
+                                    v[b + 24 >> 2] = a;
                                 }
-                                Q: {
-                                    if (d >>> 0 <= 15) {
-                                        a = d + g | 0;
-                                        v[e + 4 >> 2] = a | 3;
-                                        a = a + e | 0;
+                                P: {
+                                    if (f >>> 0 <= 15) {
+                                        a = f + h | 0;
+                                        v[d + 4 >> 2] = a | 3;
+                                        a = a + d | 0;
                                         v[a + 4 >> 2] = v[a + 4 >> 2] | 1;
-                                        break Q;
+                                        break P;
                                     }
-                                    v[e + 4 >> 2] = g | 3;
-                                    f = e + g | 0;
-                                    v[f + 4 >> 2] = d | 1;
-                                    v[d + f >> 2] = d;
-                                    if (d >>> 0 <= 255) {
-                                        a = d >>> 3 | 0;
-                                        b = (a << 3) + 4112 | 0;
-                                        c = 1 << a;
-                                        a = v[1018];
-                                        R: {
-                                            if (!(c & a)) {
-                                                v[1018] = a | c;
-                                                a = b;
-                                                break R;
+                                    v[d + 4 >> 2] = h | 3;
+                                    e = d + h | 0;
+                                    v[e + 4 >> 2] = f | 1;
+                                    v[f + e >> 2] = f;
+                                    if (f >>> 0 <= 255) {
+                                        a = (f & -8) + 4112 | 0;
+                                        b = v[1018];
+                                        c = 1 << (f >>> 3);
+                                        Q: {
+                                            if (!(b & c)) {
+                                                v[1018] = b | c;
+                                                b = a;
+                                                break Q;
                                             }
-                                            a = v[b + 8 >> 2];
+                                            b = v[a + 8 >> 2];
                                         }
-                                        v[b + 8 >> 2] = f;
-                                        v[a + 12 >> 2] = f;
-                                        v[f + 12 >> 2] = b;
-                                        v[f + 8 >> 2] = a;
-                                        break Q;
+                                        v[a + 8 >> 2] = e;
+                                        v[b + 12 >> 2] = e;
+                                        v[e + 12 >> 2] = a;
+                                        v[e + 8 >> 2] = b;
+                                        break P;
                                     }
                                     a = 31;
-                                    if (d >>> 0 <= 16777215) {
-                                        a = d >>> 8 | 0;
-                                        g = a + 1048320 >>> 16 & 8;
-                                        a = a << g;
-                                        c = a + 520192 >>> 16 & 4;
-                                        a = a << c;
-                                        b = a + 245760 >>> 16 & 2;
-                                        a = (a << b >>> 15 | 0) - (b | (c | g)) | 0;
-                                        a = (d >>> a + 21 & 1 | a << 1) + 28 | 0;
+                                    if (f >>> 0 <= 16777215) {
+                                        a = E(f >>> 8 | 0);
+                                        a = ((f >>> 38 - a & 1) - (a << 1) | 0) + 62 | 0;
                                     }
-                                    v[f + 28 >> 2] = a;
-                                    v[f + 16 >> 2] = 0;
-                                    v[f + 20 >> 2] = 0;
+                                    v[e + 28 >> 2] = a;
+                                    v[e + 16 >> 2] = 0;
+                                    v[e + 20 >> 2] = 0;
                                     b = (a << 2) + 4376 | 0;
-                                    S: {
+                                    R: {
                                         c = 1 << a;
-                                        T: {
-                                            if (!(c & i)) {
-                                                v[1019] = c | i;
-                                                v[b >> 2] = f;
-                                                break T;
+                                        S: {
+                                            if (!(c & g)) {
+                                                v[1019] = c | g;
+                                                v[b >> 2] = e;
+                                                v[e + 24 >> 2] = b;
+                                                break S;
                                             }
-                                            a = d << ((a | 0) == 31 ? 0 : 25 - (a >>> 1 | 0) | 0);
-                                            g = v[b >> 2];
+                                            a = f << ((a | 0) != 31 ? 25 - (a >>> 1 | 0) | 0 : 0);
+                                            b = v[b >> 2];
                                             while (1) {
-                                                b = g;
-                                                if ((v[b + 4 >> 2] & -8) == (d | 0)) {
-                                                    break S;
+                                                c = b;
+                                                if ((v[b + 4 >> 2] & -8) == (f | 0)) {
+                                                    break R;
                                                 }
-                                                c = a >>> 29 | 0;
+                                                g = a >>> 29 | 0;
                                                 a = a << 1;
-                                                c = (c & 4) + b | 0;
-                                                g = v[c + 16 >> 2];
-                                                if (g) {
+                                                g = b + (g & 4) | 0;
+                                                b = v[g + 16 >> 2];
+                                                if (b) {
                                                     continue;
                                                 }
                                                 break;
                                             }
-                                            v[c + 16 >> 2] = f;
+                                            v[g + 16 >> 2] = e;
+                                            v[e + 24 >> 2] = c;
                                         }
-                                        v[f + 24 >> 2] = b;
-                                        v[f + 12 >> 2] = f;
-                                        v[f + 8 >> 2] = f;
-                                        break Q;
+                                        v[e + 12 >> 2] = e;
+                                        v[e + 8 >> 2] = e;
+                                        break P;
                                     }
-                                    a = v[b + 8 >> 2];
-                                    v[a + 12 >> 2] = f;
-                                    v[b + 8 >> 2] = f;
-                                    v[f + 24 >> 2] = 0;
-                                    v[f + 12 >> 2] = b;
-                                    v[f + 8 >> 2] = a;
+                                    a = v[c + 8 >> 2];
+                                    v[a + 12 >> 2] = e;
+                                    v[c + 8 >> 2] = e;
+                                    v[e + 24 >> 2] = 0;
+                                    v[e + 12 >> 2] = c;
+                                    v[e + 8 >> 2] = a;
                                 }
-                                a = e + 8 | 0;
+                                a = d + 8 | 0;
                                 break a;
                             }
-                            U: {
-                                if (!i) {
-                                    break U;
+                            T: {
+                                if (!j) {
+                                    break T;
                                 }
-                                c = v[b + 28 >> 2];
-                                a = (c << 2) + 4376 | 0;
-                                V: {
-                                    if (v[a >> 2] == (b | 0)) {
-                                        v[a >> 2] = e;
-                                        if (e) {
-                                            break V;
+                                b = v[c + 28 >> 2];
+                                d = (b << 2) + 4376 | 0;
+                                U: {
+                                    if (v[d >> 2] == (c | 0)) {
+                                        v[d >> 2] = a;
+                                        if (a) {
+                                            break U;
                                         }
-                                        v[1019] = Va(c) & j;
-                                        break U;
+                                        v[1019] = Ya(b) & l;
+                                        break T;
                                     }
-                                    v[i + (v[i + 16 >> 2] == (b | 0) ? 16 : 20) >> 2] = e;
-                                    if (!e) {
-                                        break U;
+                                    v[j + (v[j + 16 >> 2] == (c | 0) ? 16 : 20) >> 2] = a;
+                                    if (!a) {
+                                        break T;
                                     }
                                 }
-                                v[e + 24 >> 2] = i;
-                                a = v[b + 16 >> 2];
-                                if (a) {
-                                    v[e + 16 >> 2] = a;
-                                    v[a + 24 >> 2] = e;
+                                v[a + 24 >> 2] = j;
+                                b = v[c + 16 >> 2];
+                                if (b) {
+                                    v[a + 16 >> 2] = b;
+                                    v[b + 24 >> 2] = a;
                                 }
-                                a = v[b + 20 >> 2];
-                                if (!a) {
-                                    break U;
+                                b = v[c + 20 >> 2];
+                                if (!b) {
+                                    break T;
                                 }
-                                v[e + 20 >> 2] = a;
-                                v[a + 24 >> 2] = e;
+                                v[a + 20 >> 2] = b;
+                                v[b + 24 >> 2] = a;
                             }
-                            W: {
-                                if (d >>> 0 <= 15) {
-                                    a = d + g | 0;
-                                    v[b + 4 >> 2] = a | 3;
-                                    a = a + b | 0;
+                            V: {
+                                if (f >>> 0 <= 15) {
+                                    a = f + h | 0;
+                                    v[c + 4 >> 2] = a | 3;
+                                    a = a + c | 0;
                                     v[a + 4 >> 2] = v[a + 4 >> 2] | 1;
-                                    break W;
+                                    break V;
                                 }
-                                v[b + 4 >> 2] = g | 3;
-                                g = b + g | 0;
-                                v[g + 4 >> 2] = d | 1;
-                                v[d + g >> 2] = d;
-                                if (k) {
-                                    a = k >>> 3 | 0;
-                                    c = (a << 3) + 4112 | 0;
-                                    e = v[1023];
-                                    a = 1 << a;
-                                    X: {
-                                        if (!(a & h)) {
-                                            v[1018] = a | h;
-                                            a = c;
-                                            break X;
+                                v[c + 4 >> 2] = h | 3;
+                                g = c + h | 0;
+                                v[g + 4 >> 2] = f | 1;
+                                v[f + g >> 2] = f;
+                                if (i) {
+                                    a = (i & -8) + 4112 | 0;
+                                    d = v[1023];
+                                    b = 1 << (i >>> 3);
+                                    W: {
+                                        if (!(b & e)) {
+                                            v[1018] = b | e;
+                                            b = a;
+                                            break W;
                                         }
-                                        a = v[c + 8 >> 2];
+                                        b = v[a + 8 >> 2];
                                     }
-                                    v[c + 8 >> 2] = e;
-                                    v[a + 12 >> 2] = e;
-                                    v[e + 12 >> 2] = c;
-                                    v[e + 8 >> 2] = a;
+                                    v[a + 8 >> 2] = d;
+                                    v[b + 12 >> 2] = d;
+                                    v[d + 12 >> 2] = a;
+                                    v[d + 8 >> 2] = b;
                                 }
                                 v[1023] = g;
-                                v[1020] = d;
+                                v[1020] = f;
                             }
-                            a = b + 8 | 0;
-                        } R = l + 16 | 0; return a | 0; }
-                        function Fa(a) { var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Ea = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0, Ka = 0, La = 0, Ma = 0, Na = 0, Oa = 0, Pa = 0, Qa = 0, Ra = 0; X = v[a + 192 >> 2]; K = v[a + 196 >> 2]; Y = v[a + 184 >> 2]; Z = v[a + 188 >> 2]; t = v[a + 176 >> 2]; O = v[a + 180 >> 2]; u = v[a + 168 >> 2]; w = v[a + 172 >> 2]; P = v[a + 160 >> 2]; Q = v[a + 164 >> 2]; x = v[a + 152 >> 2]; c = v[a + 156 >> 2]; y = v[a + 144 >> 2]; E = v[a + 148 >> 2]; f = v[a + 136 >> 2]; R = v[a + 140 >> 2]; _ = v[a + 128 >> 2]; $ = v[a + 132 >> 2]; z = v[a + 120 >> 2]; aa = v[a + 124 >> 2]; A = v[a + 112 >> 2]; L = v[a + 116 >> 2]; j = v[a + 104 >> 2]; k = v[a + 108 >> 2]; S = v[a + 96 >> 2]; B = v[a + 100 >> 2]; d = v[a + 88 >> 2]; e = v[a + 92 >> 2]; C = v[a + 80 >> 2]; U = v[a + 84 >> 2]; l = v[a + 72 >> 2]; n = v[a + 76 >> 2]; m = v[a + 64 >> 2]; o = v[a + 68 >> 2]; q = v[a + 56 >> 2]; g = v[a + 60 >> 2]; r = v[a + 48 >> 2]; s = v[a + 52 >> 2]; h = v[a + 40 >> 2]; D = v[a + 44 >> 2]; ia = v[a + 32 >> 2]; ba = v[a + 36 >> 2]; F = v[a + 24 >> 2]; G = v[a + 28 >> 2]; p = v[a + 16 >> 2]; H = v[a + 20 >> 2]; b = v[a + 8 >> 2]; i = v[a + 12 >> 2]; M = v[a >> 2]; I = v[a + 4 >> 2]; while (1) {
-                            if (oa >>> 0 <= 23) {
-                                V = Q ^ aa ^ U ^ D ^ I;
-                                ca = V;
-                                W = z ^ P ^ C ^ h ^ M;
-                                ga = y ^ Y ^ j ^ m ^ F;
-                                V = Wa(W, V, 1) ^ ga;
-                                ja = E ^ Z ^ k ^ o ^ G;
-                                ha = ja ^ T;
-                                J = Wa(V ^ ia, ha ^ ba, 27);
-                                da = T;
-                                N = R ^ O ^ B ^ g ^ H;
-                                ka = N;
-                                la = f ^ t ^ S ^ q ^ p;
-                                W = Wa(la, N, 1) ^ W;
-                                ca = T ^ ca;
-                                N = Wa(d ^ W, e ^ ca, 10);
-                                ea = T;
-                                e = w ^ $ ^ e ^ s ^ i;
-                                ma = e;
-                                na = u ^ _ ^ d ^ r ^ b;
-                                fa = x ^ X ^ A ^ l ^ ia;
-                                d = Wa(na, e, 1) ^ fa;
-                                ba = c ^ K ^ L ^ n ^ ba;
-                                e = ba ^ T;
-                                h = Wa(d ^ h, e ^ D, 36);
-                                pa = T;
-                                D = Wa(b ^ W, i ^ ca, 1);
-                                ia = T;
-                                i = j;
-                                j = Wa(fa, ba, 1) ^ la;
-                                fa = k;
-                                k = T ^ ka;
-                                ba = Wa(i ^ j, fa ^ k, 25);
-                                b = T;
-                                ka = q;
-                                q = Wa(ga, ja, 1) ^ na;
-                                i = g;
-                                g = T ^ ma;
-                                i = Wa(ka ^ q, i ^ g, 6);
-                                ja = T;
-                                F = Wa(j ^ F, k ^ G, 28);
-                                G = T;
-                                C = Wa(d ^ C, e ^ U, 3);
-                                U = T;
-                                ga = Wa(l ^ V, n ^ ha, 20);
-                                l = T;
-                                ka = l;
-                                n = Wa(p ^ q, g ^ H, 62);
-                                p = T;
-                                A = Wa(A ^ V, L ^ ha, 39);
-                                L = T;
-                                H = Wa(j ^ m, k ^ o, 55);
-                                m = T;
-                                la = m;
-                                qa = oa << 3;
-                                o = qa + 1024 | 0;
-                                fa = v[o >> 2];
-                                o = v[o + 4 >> 2];
-                                S = Wa(q ^ S, g ^ B, 43);
-                                B = T;
-                                r = Wa(r ^ W, s ^ ca, 44);
-                                ma = e ^ I;
-                                s = T;
-                                ra = ma ^ (s ^ -1) & B ^ o;
-                                sa = (m ^ -1) & L ^ p;
-                                ta = (l ^ -1) & U ^ G;
-                                ua = (pa ^ -1) & ea ^ da;
-                                va = (ja ^ -1) & b ^ ia;
-                                l = ra ^ (sa ^ (ta ^ (ua ^ va)));
-                                o = l;
-                                m = fa;
-                                fa = d ^ M;
-                                wa = m ^ (fa ^ (r ^ -1) & S);
-                                xa = (H ^ -1) & A ^ n;
-                                ya = (ga ^ -1) & C ^ F;
-                                za = (h ^ -1) & N ^ J;
-                                Aa = (i ^ -1) & ba ^ D;
-                                m = wa ^ (xa ^ (ya ^ (za ^ Aa)));
-                                l = Wa(m, l, 1);
-                                M = T;
-                                f = Wa(f ^ q, g ^ R, 15);
-                                R = T;
-                                Y = Wa(j ^ Y, k ^ Z, 56);
-                                I = T;
-                                na = I;
-                                Z = Wa(j ^ y, k ^ E, 21);
-                                y = T;
-                                X = Wa(X ^ V, K ^ ha, 14);
-                                j = T;
-                                K = Wa(x ^ V, c ^ ha, 8);
-                                x = T;
-                                P = Wa(d ^ P, e ^ Q, 18);
-                                k = T;
-                                Q = Wa(d ^ z, e ^ aa, 41);
-                                c = T;
-                                u = Wa(u ^ W, w ^ ca, 2);
-                                z = T;
-                                w = Wa(W ^ _, $ ^ ca, 45);
-                                E = T;
-                                Ba = J & (Y ^ -1) ^ f;
-                                Ca = (X ^ -1) & fa ^ Z;
-                                _ = (u ^ -1) & n ^ Q;
-                                Da = (P ^ -1) & D ^ K;
-                                t = Wa(q ^ t, g ^ O, 61);
-                                $ = (t ^ -1) & F ^ w;
-                                aa = Ba ^ (Ca ^ (_ ^ (Da ^ $)));
-                                l = l ^ aa;
-                                d = (n ^ -1) & H ^ u;
-                                Ea = da & (I ^ -1) ^ R;
-                                Fa = (j ^ -1) & ma ^ y;
-                                e = (z ^ -1) & p ^ c;
-                                Ga = (k ^ -1) & ia ^ x;
-                                O = T;
-                                Ha = (O ^ -1) & G ^ E;
-                                Ia = Ea ^ (Fa ^ (e ^ (Ga ^ Ha)));
-                                n = M ^ Ia;
-                                g = (p ^ -1) & la ^ z;
-                                M = Wa(l ^ d, n ^ g, 14);
-                                I = T;
-                                Ja = (K ^ -1) & P ^ ba;
-                                p = (Z ^ -1) & X ^ S;
-                                Ka = u & (Q ^ -1) ^ A;
-                                La = C ^ (w ^ -1) & t;
-                                Ma = (f ^ -1) & Y ^ N;
-                                u = Ja ^ (p ^ (Ka ^ (La ^ Ma)));
-                                Na = (x ^ -1) & k ^ b;
-                                Oa = (y ^ -1) & j ^ B;
-                                Pa = z & (c ^ -1) ^ L;
-                                Qa = U ^ (E ^ -1) & O;
-                                Ra = (R ^ -1) & na ^ ea;
-                                z = Na ^ (Oa ^ (Pa ^ (Qa ^ Ra)));
-                                m = Wa(u, z, 1) ^ m;
-                                w = (C ^ -1) & w ^ ga;
-                                o = o ^ T;
-                                E = (U ^ -1) & E ^ ka;
-                                V = Wa(m ^ w, o ^ E, 44);
-                                ha = T;
-                                c = (L ^ -1) & c ^ la;
-                                C = (b ^ -1) & x ^ ja;
-                                ea = (ea ^ -1) & R ^ pa;
-                                b = (B ^ -1) & y ^ s;
-                                x = c ^ (C ^ (ea ^ (b ^ E)));
-                                J = (J ^ -1) & h ^ Y;
-                                ga = (F ^ -1) & ga ^ t;
-                                y = (D ^ -1) & i ^ P;
-                                E = r & (fa ^ -1) ^ X;
-                                X = J ^ (ga ^ (y ^ (d ^ E)));
-                                Y = (A ^ -1) & Q ^ H;
-                                B = (ba ^ -1) & K ^ i;
-                                N = (N ^ -1) & f ^ h;
-                                d = (S ^ -1) & Z ^ r;
-                                K = Y ^ (B ^ (N ^ (d ^ w)));
-                                q = X ^ Wa(K, x, 1);
-                                W = wa ^ q;
-                                h = (da ^ -1) & pa ^ na;
-                                D = (G ^ -1) & ka ^ O;
-                                f = (ia ^ -1) & ja ^ k;
-                                A = s & (ma ^ -1) ^ j;
-                                Z = h ^ (D ^ (f ^ (g ^ A)));
-                                g = Z ^ T;
-                                t = ra ^ g;
-                                ca = t;
-                                ia = (W ^ -1) & V ^ M;
-                                ba = (t ^ -1) & ha ^ I;
-                                t = Wa(m ^ Y, c ^ o, 2);
-                                O = T;
-                                F = Wa(X, Z, 1) ^ u;
-                                G = T ^ z;
-                                P = Wa($ ^ F, Ha ^ G, 55);
-                                Q = T;
-                                c = p;
-                                p = Wa(aa, Ia, 1) ^ K;
-                                H = T ^ x;
-                                x = Wa(c ^ p, H ^ Oa, 62);
-                                K = T;
-                                c = K;
-                                X = (x ^ -1) & P ^ t;
-                                K = (c ^ -1) & Q ^ O;
-                                u = Wa(q ^ za, g ^ ua, 41);
-                                Y = u ^ (t ^ -1) & x;
-                                w = T;
-                                Z = w ^ (O ^ -1) & c;
-                                y = Wa(l ^ y, f ^ n, 39);
-                                t = y ^ (u ^ -1) & t;
-                                f = T;
-                                O = f ^ (w ^ -1) & O;
-                                u = (y ^ -1) & u ^ P;
-                                w = (f ^ -1) & w ^ Q;
-                                P = (P ^ -1) & y ^ x;
-                                Q = (Q ^ -1) & f ^ c;
-                                f = Wa(F ^ _, e ^ G, 56);
-                                R = T;
-                                z = Wa(q ^ ya, g ^ ta, 36);
-                                aa = T;
-                                A = Wa(l ^ E, n ^ A, 27);
-                                c = T;
-                                L = c;
-                                x = (A ^ -1) & z ^ f;
-                                c = (c ^ -1) & aa ^ R;
-                                _ = Wa(p ^ Ma, H ^ Ra, 15);
-                                y = _ ^ (f ^ -1) & A;
-                                $ = T;
-                                E = $ ^ (R ^ -1) & L;
-                                j = Wa(B ^ m, o ^ C, 10);
-                                f = j ^ (_ ^ -1) & f;
-                                k = T;
-                                R = k ^ ($ ^ -1) & R;
-                                _ = (j ^ -1) & _ ^ z;
-                                $ = (k ^ -1) & $ ^ aa;
-                                z = (z ^ -1) & j ^ A;
-                                aa = (aa ^ -1) & k ^ L;
-                                S = Wa(q ^ xa, g ^ sa, 18);
-                                B = T;
-                                C = Wa(p ^ La, H ^ Qa, 6);
-                                U = T;
-                                r = Wa(d ^ m, b ^ o, 1);
-                                L = T;
-                                s = L;
-                                A = (r ^ -1) & C ^ S;
-                                L = (s ^ -1) & U ^ B;
-                                d = Wa(l ^ J, h ^ n, 8);
-                                j = d ^ (S ^ -1) & r;
-                                e = T;
-                                k = e ^ (B ^ -1) & s;
-                                h = Wa(F ^ Da, G ^ Ga, 25);
-                                S = h ^ (d ^ -1) & S;
-                                b = T;
-                                B = b ^ (e ^ -1) & B;
-                                d = (h ^ -1) & d ^ C;
-                                e = (b ^ -1) & e ^ U;
-                                C = (C ^ -1) & h ^ r;
-                                U = (U ^ -1) & b ^ s;
-                                r = Wa(p ^ Ka, H ^ Pa, 61);
-                                s = T;
-                                h = Wa(l ^ ga, n ^ D, 20);
-                                D = T;
-                                b = Wa(F ^ Ca, G ^ Fa, 28);
-                                n = T;
-                                i = n;
-                                l = (b ^ -1) & h ^ r;
-                                n = (n ^ -1) & D ^ s;
-                                J = Wa(m ^ N, o ^ ea, 45);
-                                m = J ^ (r ^ -1) & b;
-                                da = T;
-                                o = da ^ (s ^ -1) & i;
-                                N = Wa(q ^ Aa, g ^ va, 3);
-                                q = N ^ (J ^ -1) & r;
-                                ea = T;
-                                g = ea ^ (da ^ -1) & s;
-                                r = (N ^ -1) & J ^ h;
-                                s = (ea ^ -1) & da ^ D;
-                                h = (h ^ -1) & N ^ b;
-                                D = (D ^ -1) & ea ^ i;
-                                b = Wa(F ^ Ba, G ^ Ea, 21);
-                                F = b ^ (M ^ -1) & W;
-                                i = T;
-                                G = i ^ (I ^ -1) & ca;
-                                J = Wa(p ^ Ja, H ^ Na, 43);
-                                p = J ^ (b ^ -1) & M;
-                                da = T;
-                                M = da;
-                                H = M ^ (i ^ -1) & I;
-                                b = (J ^ -1) & b ^ V;
-                                i = (M ^ -1) & i ^ ha;
-                                I = (qa | 8) + 1024 | 0;
-                                M = (V ^ -1) & J ^ (v[I >> 2] ^ W);
-                                I = (ha ^ -1) & da ^ (v[I + 4 >> 2] ^ ca);
-                                oa = oa + 2 | 0;
+                            a = c + 8 | 0;
+                        } P = k + 16 | 0; return a | 0; }
+                        function da(a) { var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Ea = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0, Ka = 0, La = 0, Ma = 0, Na = 0, Oa = 0, Pa = 0, Qa = 0, Ra = 0, Sa = 0; U = v[a + 192 >> 2]; V = v[a + 196 >> 2]; E = v[a + 184 >> 2]; W = v[a + 188 >> 2]; X = v[a + 176 >> 2]; Y = v[a + 180 >> 2]; F = v[a + 168 >> 2]; Z = v[a + 172 >> 2]; s = v[a + 160 >> 2]; ga = v[a + 164 >> 2]; _ = v[a + 152 >> 2]; ha = v[a + 156 >> 2]; $ = v[a + 144 >> 2]; aa = v[a + 148 >> 2]; G = v[a + 136 >> 2]; H = v[a + 140 >> 2]; I = v[a + 128 >> 2]; ia = v[a + 132 >> 2]; ba = v[a + 120 >> 2]; ja = v[a + 124 >> 2]; J = v[a + 112 >> 2]; K = v[a + 116 >> 2]; o = v[a + 104 >> 2]; A = v[a + 108 >> 2]; L = v[a + 96 >> 2]; M = v[a + 100 >> 2]; j = v[a + 88 >> 2]; B = v[a + 92 >> 2]; h = v[a + 80 >> 2]; N = v[a + 84 >> 2]; g = v[a + 72 >> 2]; O = v[a + 76 >> 2]; m = v[a + 64 >> 2]; r = v[a + 68 >> 2]; t = v[a + 56 >> 2]; n = v[a + 60 >> 2]; c = v[a + 48 >> 2]; ca = v[a + 52 >> 2]; e = v[a + 40 >> 2]; p = v[a + 44 >> 2]; u = v[a + 32 >> 2]; P = v[a + 36 >> 2]; l = v[a + 24 >> 2]; w = v[a + 28 >> 2]; k = v[a + 16 >> 2]; C = v[a + 20 >> 2]; d = v[a + 8 >> 2]; x = v[a + 12 >> 2]; i = v[a >> 2]; y = v[a + 4 >> 2]; while (1) {
+                            if (ra >>> 0 <= 23) {
+                                q = i ^ (e ^ (h ^ (s ^ ba)));
+                                z = y ^ (p ^ (N ^ (ga ^ ja)));
+                                b = l ^ (m ^ (o ^ (E ^ $)));
+                                Q = Za(q, z, 1) ^ b;
+                                ka = w ^ (r ^ (A ^ (W ^ aa)));
+                                S = ka ^ R;
+                                f = Za(u ^ Q, P ^ S, 27);
+                                la = R;
+                                D = C ^ (n ^ (M ^ (H ^ Y)));
+                                da = D;
+                                T = k ^ (t ^ (L ^ (G ^ X)));
+                                D = Za(T, D, 1) ^ q;
+                                ea = R ^ z;
+                                q = Za(j ^ D, B ^ ea, 10);
+                                ma = R;
+                                z = x ^ (ca ^ (B ^ (Z ^ ia)));
+                                fa = z;
+                                pa = d ^ (c ^ (j ^ (F ^ I)));
+                                na = u ^ (g ^ (J ^ (U ^ _)));
+                                u = Za(pa, z, 1) ^ na;
+                                z = e ^ u;
+                                e = P ^ (O ^ (K ^ (V ^ ha)));
+                                B = e ^ R;
+                                z = Za(z, p ^ B, 36);
+                                oa = R;
+                                j = Za(d ^ D, x ^ ea, 1);
+                                x = R;
+                                p = Za(na, e, 1) ^ T;
+                                T = A;
+                                A = R ^ da;
+                                o = Za(p ^ o, T ^ A, 25);
+                                da = R;
+                                P = Za(b, ka, 1) ^ pa;
+                                T = n;
+                                n = R ^ fa;
+                                d = Za(P ^ t, T ^ n, 6);
+                                ka = R;
+                                t = Za(l ^ p, w ^ A, 28);
+                                w = R;
+                                h = Za(h ^ u, B ^ N, 3);
+                                N = R;
+                                b = Za(g ^ Q, O ^ S, 20);
+                                l = R;
+                                T = l;
+                                g = Za(k ^ P, n ^ C, 62);
+                                O = R;
+                                J = Za(J ^ Q, K ^ S, 39);
+                                K = R;
+                                e = Za(m ^ p, r ^ A, 55);
+                                k = R;
+                                C = k;
+                                pa = ra << 3;
+                                m = pa + 1024 | 0;
+                                r = v[m >> 2];
+                                m = v[m + 4 >> 2];
+                                L = Za(L ^ P, n ^ M, 43);
+                                M = R;
+                                c = Za(c ^ D, ca ^ ea, 44);
+                                y = y ^ B;
+                                ca = R;
+                                sa = y ^ ((ca ^ -1) & M ^ m);
+                                ta = (k ^ -1) & K ^ O;
+                                ua = (l ^ -1) & N ^ w;
+                                va = (oa ^ -1) & ma ^ la;
+                                wa = (ka ^ -1) & da ^ x;
+                                k = sa ^ (ta ^ (ua ^ (va ^ wa)));
+                                qa = k;
+                                fa = i ^ u;
+                                xa = fa ^ ((c ^ -1) & L ^ r);
+                                ya = (e ^ -1) & J ^ g;
+                                za = (b ^ -1) & h ^ t;
+                                Aa = (z ^ -1) & q ^ f;
+                                Ba = (d ^ -1) & o ^ j;
+                                r = xa ^ (ya ^ (za ^ (Aa ^ Ba)));
+                                m = Za(r, k, 1);
+                                l = R;
+                                G = Za(G ^ P, n ^ H, 15);
+                                H = R;
+                                E = Za(p ^ E, A ^ W, 56);
+                                na = R;
+                                $ = Za(p ^ $, A ^ aa, 21);
+                                W = R;
+                                U = Za(U ^ Q, V ^ S, 14);
+                                aa = R;
+                                ba = Za(u ^ ba, B ^ ja, 41);
+                                V = R;
+                                k = Za(F ^ D, Z ^ ea, 2);
+                                i = R;
+                                _ = Za(_ ^ Q, S ^ ha, 8);
+                                Z = R;
+                                F = Za(s ^ u, B ^ ga, 18);
+                                u = R;
+                                s = Za(I ^ D, ea ^ ia, 45);
+                                I = R;
+                                Ca = (E ^ -1) & f ^ G;
+                                p = (U ^ -1) & fa ^ $;
+                                ha = (k ^ -1) & g ^ ba;
+                                B = (F ^ -1) & j ^ _;
+                                X = Za(P ^ X, n ^ Y, 61);
+                                ga = (X ^ -1) & t ^ s;
+                                ia = Ca ^ (p ^ (ha ^ (B ^ ga)));
+                                m = ia ^ m;
+                                ja = (g ^ -1) & e ^ k;
+                                Da = (na ^ -1) & la ^ H;
+                                Ea = (aa ^ -1) & y ^ W;
+                                A = (i ^ -1) & O ^ V;
+                                n = (u ^ -1) & x ^ Z;
+                                Y = R;
+                                Fa = (Y ^ -1) & w ^ I;
+                                Ga = Da ^ (Ea ^ (A ^ (n ^ Fa)));
+                                l = Ga ^ l;
+                                O = (O ^ -1) & C ^ i;
+                                g = Za(m ^ ja, l ^ O, 14);
+                                Q = R;
+                                Ha = da ^ (Z ^ -1) & u;
+                                Ia = M ^ (W ^ -1) & aa;
+                                Ja = (V ^ -1) & i ^ K;
+                                Ka = N ^ (I ^ -1) & Y;
+                                La = (H ^ -1) & na ^ ma;
+                                i = Ha ^ (Ia ^ (Ja ^ (Ka ^ La)));
+                                Sa = i;
+                                Ma = o ^ (_ ^ -1) & F;
+                                Na = L ^ ($ ^ -1) & U;
+                                Oa = (ba ^ -1) & k ^ J;
+                                Pa = h ^ (s ^ -1) & X;
+                                Qa = (G ^ -1) & E ^ q;
+                                Ra = Ma ^ (Na ^ (Oa ^ (Pa ^ Qa)));
+                                i = Za(Ra, i, 1) ^ r;
+                                k = (h ^ -1) & s ^ b;
+                                r = R ^ qa;
+                                s = (N ^ -1) & I ^ T;
+                                h = Za(i ^ k, r ^ s, 44);
+                                S = R;
+                                I = C ^ (K ^ -1) & V;
+                                K = ka ^ (da ^ -1) & Z;
+                                ma = oa ^ (ma ^ -1) & H;
+                                M = (M ^ -1) & W ^ ca;
+                                s = I ^ (K ^ (ma ^ (M ^ s)));
+                                da = E ^ (f ^ -1) & z;
+                                qa = X ^ (t ^ -1) & b;
+                                f = F ^ (j ^ -1) & d;
+                                H = (fa ^ -1) & c ^ U;
+                                E = da ^ (qa ^ (f ^ (ja ^ H)));
+                                b = e ^ (J ^ -1) & ba;
+                                J = d ^ (o ^ -1) & _;
+                                fa = z ^ (q ^ -1) & G;
+                                L = (L ^ -1) & $ ^ c;
+                                d = b ^ (J ^ (fa ^ (L ^ k)));
+                                q = E ^ Za(d, s, 1);
+                                D = q ^ xa;
+                                la = na ^ (la ^ -1) & oa;
+                                oa = Y ^ (w ^ -1) & T;
+                                F = u ^ (x ^ -1) & ka;
+                                G = (y ^ -1) & ca ^ aa;
+                                e = la ^ (oa ^ (F ^ (O ^ G)));
+                                t = e ^ R;
+                                c = t ^ sa;
+                                ea = c;
+                                k = g;
+                                z = h;
+                                u = g ^ h & (D ^ -1);
+                                P = (c ^ -1) & S ^ Q;
+                                b = Za(b ^ i, r ^ I, 2);
+                                j = R;
+                                w = Za(E, e, 1) ^ Ra;
+                                C = Sa ^ R;
+                                e = Za(ga ^ w, Fa ^ C, 55);
+                                o = R;
+                                x = Za(ia, Ga, 1) ^ d;
+                                y = s ^ R;
+                                d = Za(x ^ Na, y ^ Ia, 62);
+                                c = R;
+                                h = c;
+                                U = (d ^ -1) & e ^ b;
+                                V = (c ^ -1) & o ^ j;
+                                c = Za(q ^ Aa, t ^ va, 41);
+                                E = c ^ (b ^ -1) & d;
+                                g = R;
+                                W = g ^ (j ^ -1) & h;
+                                f = Za(f ^ m, l ^ F, 39);
+                                X = f ^ (c ^ -1) & b;
+                                b = R;
+                                Y = b ^ (g ^ -1) & j;
+                                F = e ^ (f ^ -1) & c;
+                                Z = o ^ (b ^ -1) & g;
+                                s = d ^ (e ^ -1) & f;
+                                ga = h ^ (o ^ -1) & b;
+                                b = Za(w ^ ha, C ^ A, 56);
+                                j = R;
+                                e = Za(q ^ za, t ^ ua, 36);
+                                o = R;
+                                d = Za(m ^ H, l ^ G, 27);
+                                c = R;
+                                h = c;
+                                _ = (d ^ -1) & e ^ b;
+                                ha = (c ^ -1) & o ^ j;
+                                c = Za(x ^ Qa, y ^ La, 15);
+                                $ = c ^ (b ^ -1) & d;
+                                g = R;
+                                aa = g ^ (j ^ -1) & h;
+                                f = Za(i ^ J, r ^ K, 10);
+                                G = f ^ (c ^ -1) & b;
+                                b = R;
+                                H = b ^ (g ^ -1) & j;
+                                I = e ^ (f ^ -1) & c;
+                                ia = o ^ (b ^ -1) & g;
+                                ba = (e ^ -1) & f ^ d;
+                                ja = (o ^ -1) & b ^ h;
+                                b = Za(q ^ ya, t ^ ta, 18);
+                                j = R;
+                                e = Za(x ^ Pa, y ^ Ka, 6);
+                                g = R;
+                                d = Za(i ^ L, r ^ M, 1);
+                                c = R;
+                                N = c;
+                                J = (d ^ -1) & e ^ b;
+                                K = (c ^ -1) & g ^ j;
+                                c = Za(m ^ da, l ^ la, 8);
+                                o = c ^ (b ^ -1) & d;
+                                h = R;
+                                A = h ^ (j ^ -1) & N;
+                                f = Za(w ^ B, n ^ C, 25);
+                                L = f ^ (c ^ -1) & b;
+                                b = R;
+                                M = b ^ (h ^ -1) & j;
+                                j = e ^ (f ^ -1) & c;
+                                B = g ^ (b ^ -1) & h;
+                                h = (e ^ -1) & f ^ d;
+                                N = (g ^ -1) & b ^ N;
+                                b = Za(x ^ Oa, y ^ Ja, 61);
+                                n = R;
+                                e = Za(m ^ qa, l ^ oa, 20);
+                                l = R;
+                                d = Za(p ^ w, C ^ Ea, 28);
+                                c = R;
+                                p = c;
+                                g = (d ^ -1) & e ^ b;
+                                O = (c ^ -1) & l ^ n;
+                                c = Za(i ^ fa, r ^ ma, 45);
+                                m = c ^ (b ^ -1) & d;
+                                i = R;
+                                r = i ^ (n ^ -1) & p;
+                                f = Za(q ^ Ba, t ^ wa, 3);
+                                t = f ^ (c ^ -1) & b;
+                                b = R;
+                                n = b ^ (i ^ -1) & n;
+                                c = (f ^ -1) & c ^ e;
+                                ca = (b ^ -1) & i ^ l;
+                                e = d ^ (e ^ -1) & f;
+                                p = p ^ (l ^ -1) & b;
+                                d = Za(w ^ Ca, C ^ Da, 21);
+                                l = d ^ (k ^ -1) & D;
+                                f = R;
+                                w = f ^ (Q ^ -1) & ea;
+                                b = Za(x ^ Ma, y ^ Ha, 43);
+                                k = b ^ (d ^ -1) & k;
+                                q = R;
+                                C = q ^ (f ^ -1) & Q;
+                                d = (b ^ -1) & d ^ z;
+                                x = (q ^ -1) & f ^ S;
+                                f = pa + 1032 | 0;
+                                i = D ^ (v[f >> 2] ^ (z ^ -1) & b);
+                                y = ea ^ (v[f + 4 >> 2] ^ (S ^ -1) & q);
+                                ra = ra + 2 | 0;
                                 continue;
                             }
                             break;
-                        } v[a + 192 >> 2] = X; v[a + 196 >> 2] = K; v[a + 184 >> 2] = Y; v[a + 188 >> 2] = Z; v[a + 176 >> 2] = t; v[a + 180 >> 2] = O; v[a + 168 >> 2] = u; v[a + 172 >> 2] = w; v[a + 160 >> 2] = P; v[a + 164 >> 2] = Q; v[a + 152 >> 2] = x; v[a + 156 >> 2] = c; v[a + 144 >> 2] = y; v[a + 148 >> 2] = E; v[a + 136 >> 2] = f; v[a + 140 >> 2] = R; v[a + 128 >> 2] = _; v[a + 132 >> 2] = $; v[a + 120 >> 2] = z; v[a + 124 >> 2] = aa; v[a + 112 >> 2] = A; v[a + 116 >> 2] = L; v[a + 104 >> 2] = j; v[a + 108 >> 2] = k; v[a + 96 >> 2] = S; v[a + 100 >> 2] = B; v[a + 88 >> 2] = d; v[a + 92 >> 2] = e; v[a + 80 >> 2] = C; v[a + 84 >> 2] = U; v[a + 72 >> 2] = l; v[a + 76 >> 2] = n; v[a + 64 >> 2] = m; v[a + 68 >> 2] = o; v[a + 56 >> 2] = q; v[a + 60 >> 2] = g; v[a + 48 >> 2] = r; v[a + 52 >> 2] = s; v[a + 40 >> 2] = h; v[a + 44 >> 2] = D; v[a + 32 >> 2] = ia; v[a + 36 >> 2] = ba; v[a + 24 >> 2] = F; v[a + 28 >> 2] = G; v[a + 16 >> 2] = p; v[a + 20 >> 2] = H; v[a + 8 >> 2] = b; v[a + 12 >> 2] = i; v[a >> 2] = M; v[a + 4 >> 2] = I; }
-                        function oa(a) { a = a | 0; var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0; a: {
+                        } v[a + 192 >> 2] = U; v[a + 196 >> 2] = V; v[a + 184 >> 2] = E; v[a + 188 >> 2] = W; v[a + 176 >> 2] = X; v[a + 180 >> 2] = Y; v[a + 168 >> 2] = F; v[a + 172 >> 2] = Z; v[a + 160 >> 2] = s; v[a + 164 >> 2] = ga; v[a + 152 >> 2] = _; v[a + 156 >> 2] = ha; v[a + 144 >> 2] = $; v[a + 148 >> 2] = aa; v[a + 136 >> 2] = G; v[a + 140 >> 2] = H; v[a + 128 >> 2] = I; v[a + 132 >> 2] = ia; v[a + 120 >> 2] = ba; v[a + 124 >> 2] = ja; v[a + 112 >> 2] = J; v[a + 116 >> 2] = K; v[a + 104 >> 2] = o; v[a + 108 >> 2] = A; v[a + 96 >> 2] = L; v[a + 100 >> 2] = M; v[a + 88 >> 2] = j; v[a + 92 >> 2] = B; v[a + 80 >> 2] = h; v[a + 84 >> 2] = N; v[a + 72 >> 2] = g; v[a + 76 >> 2] = O; v[a + 64 >> 2] = m; v[a + 68 >> 2] = r; v[a + 56 >> 2] = t; v[a + 60 >> 2] = n; v[a + 48 >> 2] = c; v[a + 52 >> 2] = ca; v[a + 40 >> 2] = e; v[a + 44 >> 2] = p; v[a + 32 >> 2] = u; v[a + 36 >> 2] = P; v[a + 24 >> 2] = l; v[a + 28 >> 2] = w; v[a + 16 >> 2] = k; v[a + 20 >> 2] = C; v[a + 8 >> 2] = d; v[a + 12 >> 2] = x; v[a >> 2] = i; v[a + 4 >> 2] = y; }
+                        function ea(a) { a = a | 0; var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0; a: {
                             if (!a) {
                                 break a;
                             }
@@ -1561,7 +1432,7 @@ var createKEMNativeCaller = (() => {
                                 if (b & 1) {
                                     break b;
                                 }
-                                if (!(b & 3)) {
+                                if (!(b & 2)) {
                                     break a;
                                 }
                                 b = v[d >> 2];
@@ -1570,101 +1441,102 @@ var createKEMNativeCaller = (() => {
                                     break a;
                                 }
                                 a = a + b | 0;
-                                if (v[1023] != (d | 0)) {
-                                    if (b >>> 0 <= 255) {
-                                        e = v[d + 8 >> 2];
-                                        b = b >>> 3 | 0;
-                                        c = v[d + 12 >> 2];
-                                        if ((c | 0) == (e | 0)) {
-                                            v[1018] = v[1018] & Va(b);
-                                            break b;
+                                c: {
+                                    d: {
+                                        e: {
+                                            if (v[1023] != (d | 0)) {
+                                                c = v[d + 12 >> 2];
+                                                if (b >>> 0 <= 255) {
+                                                    e = v[d + 8 >> 2];
+                                                    if ((e | 0) != (c | 0)) {
+                                                        break e;
+                                                    }
+                                                    v[1018] = v[1018] & Ya(b >>> 3 | 0);
+                                                    break b;
+                                                }
+                                                h = v[d + 24 >> 2];
+                                                if ((c | 0) != (d | 0)) {
+                                                    b = v[d + 8 >> 2];
+                                                    v[b + 12 >> 2] = c;
+                                                    v[c + 8 >> 2] = b;
+                                                    break c;
+                                                }
+                                                e = v[d + 20 >> 2];
+                                                if (e) {
+                                                    b = d + 20 | 0;
+                                                }
+                                                else {
+                                                    e = v[d + 16 >> 2];
+                                                    if (!e) {
+                                                        break d;
+                                                    }
+                                                    b = d + 16 | 0;
+                                                }
+                                                while (1) {
+                                                    g = b;
+                                                    c = e;
+                                                    b = c + 20 | 0;
+                                                    e = v[c + 20 >> 2];
+                                                    if (e) {
+                                                        continue;
+                                                    }
+                                                    b = c + 16 | 0;
+                                                    e = v[c + 16 >> 2];
+                                                    if (e) {
+                                                        continue;
+                                                    }
+                                                    break;
+                                                }
+                                                v[g >> 2] = 0;
+                                                break c;
+                                            }
+                                            b = v[f + 4 >> 2];
+                                            if ((b & 3) != 3) {
+                                                break b;
+                                            }
+                                            v[1020] = a;
+                                            v[f + 4 >> 2] = b & -2;
+                                            v[d + 4 >> 2] = a | 1;
+                                            v[f >> 2] = a;
+                                            return;
                                         }
                                         v[e + 12 >> 2] = c;
                                         v[c + 8 >> 2] = e;
                                         break b;
                                     }
-                                    h = v[d + 24 >> 2];
-                                    b = v[d + 12 >> 2];
-                                    c: {
-                                        if ((d | 0) != (b | 0)) {
-                                            c = v[d + 8 >> 2];
-                                            v[c + 12 >> 2] = b;
-                                            v[b + 8 >> 2] = c;
-                                            break c;
-                                        }
-                                        d: {
-                                            e = d + 20 | 0;
-                                            c = v[e >> 2];
-                                            if (c) {
-                                                break d;
-                                            }
-                                            e = d + 16 | 0;
-                                            c = v[e >> 2];
-                                            if (c) {
-                                                break d;
-                                            }
-                                            b = 0;
-                                            break c;
-                                        }
-                                        while (1) {
-                                            g = e;
-                                            b = c;
-                                            e = b + 20 | 0;
-                                            c = v[e >> 2];
-                                            if (c) {
-                                                continue;
-                                            }
-                                            e = b + 16 | 0;
-                                            c = v[b + 16 >> 2];
-                                            if (c) {
-                                                continue;
-                                            }
-                                            break;
+                                    c = 0;
+                                }
+                                if (!h) {
+                                    break b;
+                                }
+                                b = v[d + 28 >> 2];
+                                e = (b << 2) + 4376 | 0;
+                                f: {
+                                    if (v[e >> 2] == (d | 0)) {
+                                        v[e >> 2] = c;
+                                        if (c) {
+                                            break f;
                                         }
-                                        v[g >> 2] = 0;
-                                    }
-                                    if (!h) {
+                                        v[1019] = v[1019] & Ya(b);
                                         break b;
                                     }
-                                    e = v[d + 28 >> 2];
-                                    c = (e << 2) + 4376 | 0;
-                                    e: {
-                                        if (v[c >> 2] == (d | 0)) {
-                                            v[c >> 2] = b;
-                                            if (b) {
-                                                break e;
-                                            }
-                                            v[1019] = v[1019] & Va(e);
-                                            break b;
-                                        }
-                                        v[h + (v[h + 16 >> 2] == (d | 0) ? 16 : 20) >> 2] = b;
-                                        if (!b) {
-                                            break b;
-                                        }
-                                    }
-                                    v[b + 24 >> 2] = h;
-                                    c = v[d + 16 >> 2];
-                                    if (c) {
-                                        v[b + 16 >> 2] = c;
-                                        v[c + 24 >> 2] = b;
-                                    }
-                                    c = v[d + 20 >> 2];
+                                    v[h + (v[h + 16 >> 2] == (d | 0) ? 16 : 20) >> 2] = c;
                                     if (!c) {
                                         break b;
                                     }
-                                    v[b + 20 >> 2] = c;
-                                    v[c + 24 >> 2] = b;
-                                    break b;
                                 }
-                                b = v[f + 4 >> 2];
-                                if ((b & 3) != 3) {
+                                v[c + 24 >> 2] = h;
+                                b = v[d + 16 >> 2];
+                                if (b) {
+                                    v[c + 16 >> 2] = b;
+                                    v[b + 24 >> 2] = c;
+                                }
+                                b = v[d + 20 >> 2];
+                                if (!b) {
                                     break b;
                                 }
-                                v[1020] = a;
-                                v[f + 4 >> 2] = b & -2;
-                                v[d + 4 >> 2] = a | 1;
-                                v[a + d >> 2] = a;
-                                return;
+                                v[c + 20 >> 2] = b;
+                                v[b + 24 >> 2] = c;
                             }
                             if (d >>> 0 >= f >>> 0) {
                                 break a;
@@ -1673,136 +1545,135 @@ var createKEMNativeCaller = (() => {
                             if (!(b & 1)) {
                                 break a;
                             }
-                            f: {
-                                if (!(b & 2)) {
-                                    if (v[1024] == (f | 0)) {
-                                        v[1024] = d;
-                                        a = v[1021] + a | 0;
-                                        v[1021] = a;
-                                        v[d + 4 >> 2] = a | 1;
-                                        if (v[1023] != (d | 0)) {
-                                            break a;
-                                        }
-                                        v[1020] = 0;
-                                        v[1023] = 0;
-                                        return;
-                                    }
-                                    if (v[1023] == (f | 0)) {
-                                        v[1023] = d;
-                                        a = v[1020] + a | 0;
-                                        v[1020] = a;
-                                        v[d + 4 >> 2] = a | 1;
-                                        v[a + d >> 2] = a;
-                                        return;
-                                    }
-                                    a = (b & -8) + a | 0;
-                                    g: {
-                                        if (b >>> 0 <= 255) {
-                                            e = v[f + 8 >> 2];
-                                            b = b >>> 3 | 0;
-                                            c = v[f + 12 >> 2];
-                                            if ((c | 0) == (e | 0)) {
-                                                v[1018] = v[1018] & Va(b);
-                                                break g;
-                                            }
-                                            v[e + 12 >> 2] = c;
-                                            v[c + 8 >> 2] = e;
-                                            break g;
-                                        }
-                                        h = v[f + 24 >> 2];
-                                        b = v[f + 12 >> 2];
-                                        h: {
-                                            if ((f | 0) != (b | 0)) {
-                                                c = v[f + 8 >> 2];
-                                                v[c + 12 >> 2] = b;
-                                                v[b + 8 >> 2] = c;
-                                                break h;
-                                            }
-                                            i: {
-                                                e = f + 20 | 0;
-                                                c = v[e >> 2];
-                                                if (c) {
-                                                    break i;
+                            g: {
+                                h: {
+                                    i: {
+                                        j: {
+                                            if (!(b & 2)) {
+                                                if ((f | 0) == v[1024]) {
+                                                    v[1024] = d;
+                                                    a = v[1021] + a | 0;
+                                                    v[1021] = a;
+                                                    v[d + 4 >> 2] = a | 1;
+                                                    if (v[1023] != (d | 0)) {
+                                                        break a;
+                                                    }
+                                                    v[1020] = 0;
+                                                    v[1023] = 0;
+                                                    return;
+                                                }
+                                                if ((f | 0) == v[1023]) {
+                                                    v[1023] = d;
+                                                    a = v[1020] + a | 0;
+                                                    v[1020] = a;
+                                                    v[d + 4 >> 2] = a | 1;
+                                                    v[a + d >> 2] = a;
+                                                    return;
                                                 }
-                                                e = f + 16 | 0;
-                                                c = v[e >> 2];
-                                                if (c) {
+                                                a = (b & -8) + a | 0;
+                                                c = v[f + 12 >> 2];
+                                                if (b >>> 0 <= 255) {
+                                                    e = v[f + 8 >> 2];
+                                                    if ((e | 0) == (c | 0)) {
+                                                        v[1018] = v[1018] & Ya(b >>> 3 | 0);
+                                                        break h;
+                                                    }
+                                                    v[e + 12 >> 2] = c;
+                                                    v[c + 8 >> 2] = e;
+                                                    break h;
+                                                }
+                                                h = v[f + 24 >> 2];
+                                                if ((c | 0) != (f | 0)) {
+                                                    b = v[f + 8 >> 2];
+                                                    v[b + 12 >> 2] = c;
+                                                    v[c + 8 >> 2] = b;
                                                     break i;
                                                 }
-                                                b = 0;
-                                                break h;
-                                            }
-                                            while (1) {
-                                                g = e;
-                                                b = c;
-                                                e = b + 20 | 0;
-                                                c = v[e >> 2];
-                                                if (c) {
-                                                    continue;
+                                                e = v[f + 20 >> 2];
+                                                if (e) {
+                                                    b = f + 20 | 0;
                                                 }
-                                                e = b + 16 | 0;
-                                                c = v[b + 16 >> 2];
-                                                if (c) {
-                                                    continue;
+                                                else {
+                                                    e = v[f + 16 >> 2];
+                                                    if (!e) {
+                                                        break j;
+                                                    }
+                                                    b = f + 16 | 0;
                                                 }
-                                                break;
+                                                while (1) {
+                                                    g = b;
+                                                    c = e;
+                                                    b = c + 20 | 0;
+                                                    e = v[c + 20 >> 2];
+                                                    if (e) {
+                                                        continue;
+                                                    }
+                                                    b = c + 16 | 0;
+                                                    e = v[c + 16 >> 2];
+                                                    if (e) {
+                                                        continue;
+                                                    }
+                                                    break;
+                                                }
+                                                v[g >> 2] = 0;
+                                                break i;
                                             }
-                                            v[g >> 2] = 0;
-                                        }
-                                        if (!h) {
+                                            v[f + 4 >> 2] = b & -2;
+                                            v[d + 4 >> 2] = a | 1;
+                                            v[a + d >> 2] = a;
                                             break g;
                                         }
-                                        e = v[f + 28 >> 2];
-                                        c = (e << 2) + 4376 | 0;
-                                        j: {
-                                            if (v[c >> 2] == (f | 0)) {
-                                                v[c >> 2] = b;
-                                                if (b) {
-                                                    break j;
-                                                }
-                                                v[1019] = v[1019] & Va(e);
-                                                break g;
-                                            }
-                                            v[h + (v[h + 16 >> 2] == (f | 0) ? 16 : 20) >> 2] = b;
-                                            if (!b) {
-                                                break g;
+                                        c = 0;
+                                    }
+                                    if (!h) {
+                                        break h;
+                                    }
+                                    b = v[f + 28 >> 2];
+                                    e = (b << 2) + 4376 | 0;
+                                    k: {
+                                        if ((f | 0) == v[e >> 2]) {
+                                            v[e >> 2] = c;
+                                            if (c) {
+                                                break k;
                                             }
+                                            v[1019] = v[1019] & Ya(b);
+                                            break h;
                                         }
-                                        v[b + 24 >> 2] = h;
-                                        c = v[f + 16 >> 2];
-                                        if (c) {
-                                            v[b + 16 >> 2] = c;
-                                            v[c + 24 >> 2] = b;
-                                        }
-                                        c = v[f + 20 >> 2];
+                                        v[h + ((f | 0) == v[h + 16 >> 2] ? 16 : 20) >> 2] = c;
                                         if (!c) {
-                                            break g;
+                                            break h;
                                         }
-                                        v[b + 20 >> 2] = c;
-                                        v[c + 24 >> 2] = b;
                                     }
-                                    v[d + 4 >> 2] = a | 1;
-                                    v[a + d >> 2] = a;
-                                    if (v[1023] != (d | 0)) {
-                                        break f;
+                                    v[c + 24 >> 2] = h;
+                                    b = v[f + 16 >> 2];
+                                    if (b) {
+                                        v[c + 16 >> 2] = b;
+                                        v[b + 24 >> 2] = c;
+                                    }
+                                    b = v[f + 20 >> 2];
+                                    if (!b) {
+                                        break h;
                                     }
-                                    v[1020] = a;
-                                    return;
+                                    v[c + 20 >> 2] = b;
+                                    v[b + 24 >> 2] = c;
                                 }
-                                v[f + 4 >> 2] = b & -2;
                                 v[d + 4 >> 2] = a | 1;
                                 v[a + d >> 2] = a;
+                                if (v[1023] != (d | 0)) {
+                                    break g;
+                                }
+                                v[1020] = a;
+                                return;
                             }
                             if (a >>> 0 <= 255) {
-                                a = a >>> 3 | 0;
-                                b = (a << 3) + 4112 | 0;
-                                c = 1 << a;
-                                a = v[1018];
-                                k: {
-                                    if (!(c & a)) {
-                                        v[1018] = a | c;
+                                b = (a & -8) + 4112 | 0;
+                                e = v[1018];
+                                a = 1 << (a >>> 3);
+                                l: {
+                                    if (!(e & a)) {
+                                        v[1018] = a | e;
                                         a = b;
-                                        break k;
+                                        break l;
                                     }
                                     a = v[b + 8 >> 2];
                                 }
@@ -1812,80 +1683,76 @@ var createKEMNativeCaller = (() => {
                                 v[d + 8 >> 2] = a;
                                 return;
                             }
-                            e = 31;
-                            v[d + 16 >> 2] = 0;
-                            v[d + 20 >> 2] = 0;
+                            c = 31;
                             if (a >>> 0 <= 16777215) {
-                                b = a >>> 8 | 0;
-                                g = b + 1048320 >>> 16 & 8;
-                                b = b << g;
-                                e = b + 520192 >>> 16 & 4;
-                                b = b << e;
-                                c = b + 245760 >>> 16 & 2;
-                                b = (b << c >>> 15 | 0) - (c | (e | g)) | 0;
-                                e = (a >>> b + 21 & 1 | b << 1) + 28 | 0;
+                                b = E(a >>> 8 | 0);
+                                c = ((a >>> 38 - b & 1) - (b << 1) | 0) + 62 | 0;
                             }
-                            v[d + 28 >> 2] = e;
-                            g = (e << 2) + 4376 | 0;
-                            l: {
-                                m: {
-                                    c = v[1019];
-                                    b = 1 << e;
-                                    n: {
-                                        if (!(c & b)) {
-                                            v[1019] = b | c;
-                                            v[g >> 2] = d;
-                                            v[d + 24 >> 2] = g;
-                                            break n;
+                            v[d + 28 >> 2] = c;
+                            v[d + 16 >> 2] = 0;
+                            v[d + 20 >> 2] = 0;
+                            g = (c << 2) + 4376 | 0;
+                            m: {
+                                n: {
+                                    b = v[1019];
+                                    e = 1 << c;
+                                    o: {
+                                        if (!(b & e)) {
+                                            v[1019] = b | e;
+                                            c = 24;
+                                            b = g;
+                                            break o;
                                         }
-                                        e = a << ((e | 0) == 31 ? 0 : 25 - (e >>> 1 | 0) | 0);
+                                        c = a << ((c | 0) != 31 ? 25 - (c >>> 1 | 0) | 0 : 0);
                                         b = v[g >> 2];
                                         while (1) {
-                                            c = b;
+                                            e = b;
                                             if ((v[b + 4 >> 2] & -8) == (a | 0)) {
-                                                break m;
+                                                break n;
                                             }
-                                            b = e >>> 29 | 0;
-                                            e = e << 1;
-                                            g = c + (b & 4) | 0;
-                                            b = v[g + 16 >> 2];
+                                            b = c >>> 29 | 0;
+                                            c = c << 1;
+                                            g = ((b & 4) + e | 0) + 16 | 0;
+                                            b = v[g >> 2];
                                             if (b) {
                                                 continue;
                                             }
                                             break;
                                         }
-                                        v[g + 16 >> 2] = d;
-                                        v[d + 24 >> 2] = c;
+                                        c = 24;
+                                        b = e;
                                     }
-                                    v[d + 12 >> 2] = d;
-                                    v[d + 8 >> 2] = d;
-                                    break l;
+                                    e = d;
+                                    f = d;
+                                    a = 8;
+                                    break m;
                                 }
-                                a = v[c + 8 >> 2];
-                                v[a + 12 >> 2] = d;
-                                v[c + 8 >> 2] = d;
-                                v[d + 24 >> 2] = 0;
-                                v[d + 12 >> 2] = c;
-                                v[d + 8 >> 2] = a;
+                                b = v[e + 8 >> 2];
+                                v[b + 12 >> 2] = d;
+                                c = 8;
+                                g = e + 8 | 0;
+                                f = 0;
+                                a = 24;
                             }
+                            v[g >> 2] = d;
+                            v[c + d >> 2] = b;
+                            v[d + 12 >> 2] = e;
+                            v[a + d >> 2] = f;
                             a = v[1026] - 1 | 0;
                             v[1026] = a ? a : -1;
                         } }
-                        function Ca(a, b, c, d) { var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0; f = R - 7712 | 0; R = f; g = f + 7680 | 0; xa(f + 5632 | 0, c); while (1) {
-                            if ((e | 0) != 32) {
-                                t[e + g | 0] = w[(c + e | 0) + 768 | 0];
-                                e = e + 1 | 0;
-                                continue;
-                            }
-                            break;
-                        } h = f + 512 | 0; c = 0; while (1) {
+                        function ha(a, b, c, d) { var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0; f = P - 7712 | 0; P = f; wa(f + 5632 | 0, c); e = w[c + 796 | 0] | w[c + 797 | 0] << 8 | (w[c + 798 | 0] << 16 | w[c + 799 | 0] << 24); g = f + 7704 | 0; v[g >> 2] = w[c + 792 | 0] | w[c + 793 | 0] << 8 | (w[c + 794 | 0] << 16 | w[c + 795 | 0] << 24); v[g + 4 >> 2] = e; e = w[c + 788 | 0] | w[c + 789 | 0] << 8 | (w[c + 790 | 0] << 16 | w[c + 791 | 0] << 24); g = f + 7696 | 0; v[g >> 2] = w[c + 784 | 0] | w[c + 785 | 0] << 8 | (w[c + 786 | 0] << 16 | w[c + 787 | 0] << 24); v[g + 4 >> 2] = e; e = w[c + 772 | 0] | w[c + 773 | 0] << 8 | (w[c + 774 | 0] << 16 | w[c + 775 | 0] << 24); v[f + 7680 >> 2] = w[c + 768 | 0] | w[c + 769 | 0] << 8 | (w[c + 770 | 0] << 16 | w[c + 771 | 0] << 24); v[f + 7684 >> 2] = e; e = w[c + 780 | 0] | w[c + 781 | 0] << 8 | (w[c + 782 | 0] << 16 | w[c + 783 | 0] << 24); v[f + 7688 >> 2] = w[c + 776 | 0] | w[c + 777 | 0] << 8 | (w[c + 778 | 0] << 16 | w[c + 779 | 0] << 24); v[f + 7692 >> 2] = e; g = f + 512 | 0; c = 0; while (1) {
                             if ((c | 0) != 32) {
-                                i = c << 3;
-                                j = b + c | 0;
+                                h = b + c | 0;
+                                m = c << 3;
+                                n = g + (c << 4) | 0;
                                 e = 0;
                                 while (1) {
                                     if ((e | 0) != 8) {
-                                        u[h + (e + i << 1) >> 1] = 0 - (w[j | 0] >>> e & 1) & 1665;
+                                        u[g + ((e | m) << 1) >> 1] = 0;
+                                        i = n + (e << 1) | 0;
+                                        k = x[i >> 1];
+                                        u[i >> 1] = k ^ 0 - (w[h | 0] >>> e & 1) & (k ^ 1665);
                                         e = e + 1 | 0;
                                         continue;
                                     }
@@ -1895,62 +1762,73 @@ var createKEMNativeCaller = (() => {
                                 continue;
                             }
                             break;
-                        } Ea(f + 2560 | 0, g, 1); b = 0; c = 0; e = 0; while (1) {
-                            g = 2;
-                            if ((c | 0) == 2) {
+                        } Fa(f + 2560 | 0, f + 7680 | 0, 1); c = 0; b = 0; while (1) {
+                            e = 2;
+                            if ((b | 0) == 2) {
                                 while (1) {
-                                    if ((b | 0) != 2) {
-                                        Aa((f + 4608 | 0) + (b << 9) | 0, d, g & 255);
-                                        b = b + 1 | 0;
-                                        g = g + 1 | 0;
+                                    if ((c | 0) != 2) {
+                                        za((f + 4608 | 0) + (c << 9) | 0, d, e & 255);
+                                        c = c + 1 | 0;
+                                        e = e + 1 | 0;
                                         continue;
                                     }
                                     break;
                                 }
-                                Aa(f, d, 4);
-                                da(f + 6656 | 0);
-                                b = 0;
+                                za(f, d, 4);
+                                ba(f + 6656 | 0);
+                                c = 0;
                                 while (1) {
-                                    if ((b | 0) != 2) {
-                                        ca((f + 1536 | 0) + (b << 9) | 0, (f + 2560 | 0) + (b << 10) | 0, f + 6656 | 0);
-                                        b = b + 1 | 0;
+                                    if ((c | 0) != 2) {
+                                        aa((f + 1536 | 0) + (c << 9) | 0, (f + 2560 | 0) + (c << 10) | 0, f + 6656 | 0);
+                                        c = c + 1 | 0;
                                         continue;
                                     }
                                     break;
                                 }
-                                h = f + 1024 | 0;
-                                ca(h, f + 5632 | 0, f + 6656 | 0);
-                                e = f + 1536 | 0;
-                                d = 0;
+                                g = f + 1024 | 0;
+                                aa(g, f + 5632 | 0, f + 6656 | 0);
+                                d = f + 1536 | 0;
+                                c = 0;
                                 while (1) {
-                                    if ((d | 0) != 2) {
-                                        ja(e + (d << 9) | 0);
-                                        d = d + 1 | 0;
+                                    if ((c | 0) != 2) {
+                                        ga(d + (c << 9) | 0);
+                                        c = c + 1 | 0;
                                         continue;
                                     }
                                     break;
                                 }
-                                ja(h);
-                                va(e, e, f + 4608 | 0);
-                                ea(h, h, f);
-                                ea(h, h, f + 512 | 0);
-                                wa(e);
-                                aa(h);
+                                ga(g);
+                                ta(d, d, f + 4608 | 0);
+                                ca(g, g, f);
+                                ca(g, g, f + 512 | 0);
+                                va(d);
+                                Y(g);
                                 c = a;
-                                d = 0;
-                                b = R - 16 | 0;
+                                j = 0;
+                                b = P - 16 | 0;
                                 while (1) {
-                                    i = 0;
-                                    if ((d | 0) != 2) {
+                                    if ((j | 0) != 2) {
+                                        m = d + (j << 9) | 0;
+                                        k = 0;
                                         while (1) {
-                                            if ((i | 0) != 64) {
-                                                j = i << 2;
-                                                g = 0;
+                                            if ((k | 0) != 64) {
+                                                n = k << 2;
+                                                e = 0;
                                                 while (1) {
-                                                    if ((g | 0) != 4) {
-                                                        k = u[(e + (d << 9) | 0) + (g + j << 1) >> 1];
-                                                        u[(b + 8 | 0) + (g << 1) >> 1] = (((k + (k >>> 15 & 3329) & 65535) << 10) + 1664 >>> 0) / 3329 & 1023;
-                                                        g = g + 1 | 0;
+                                                    if ((e | 0) != 4) {
+                                                        h = u[m + ((e | n) << 1) >> 1];
+                                                        h = (h >>> 15 & 3329) + h & 65535;
+                                                        i = h >>> 16 | 0;
+                                                        o = B(i, 20158);
+                                                        l = B(i, 56320);
+                                                        i = B(h, 56320);
+                                                        l = l + (i >>> 16 | 0) | 0;
+                                                        h = B(h, 20158) + (l & 65535) | 0;
+                                                        R = o + (l >>> 16 | 0) + (h >>> 16) | 0;
+                                                        h = i & 65535 | h << 16;
+                                                        i = R;
+                                                        u[(b + 8 | 0) + (e << 1) >> 1] = (h - 2146839241 >>> 0 < 2148128055 ? i + 1 | 0 : i) & 1023;
+                                                        e = e + 1 | 0;
                                                         continue;
                                                     }
                                                     break;
@@ -1960,28 +1838,28 @@ var createKEMNativeCaller = (() => {
                                                 t[c + 2 | 0] = w[b + 12 | 0] << 4 | x[b + 10 >> 1] >>> 6;
                                                 t[c + 3 | 0] = w[b + 14 | 0] << 6 | x[b + 12 >> 1] >>> 4;
                                                 t[c + 4 | 0] = x[b + 14 >> 1] >>> 2;
-                                                i = i + 1 | 0;
+                                                k = k + 1 | 0;
                                                 c = c + 5 | 0;
                                                 continue;
                                             }
                                             break;
                                         }
-                                        d = d + 1 | 0;
+                                        j = j + 1 | 0;
                                         continue;
                                     }
                                     break;
                                 }
                                 c = a + 640 | 0;
                                 e = 0;
-                                a = R - 16 | 0;
+                                a = P - 16 | 0;
                                 while (1) {
                                     if ((e | 0) != 32) {
                                         b = e << 3;
                                         d = 0;
                                         while (1) {
                                             if ((d | 0) != 8) {
-                                                g = u[h + (b + d << 1) >> 1];
-                                                t[(a + 8 | 0) + d | 0] = (((g + (g >>> 15 & 3329) & 65535) << 4) + 1664 >>> 0) / 3329 & 15;
+                                                j = u[g + ((b | d) << 1) >> 1];
+                                                t[(a + 8 | 0) + d | 0] = B((j >>> 15 & 3329) + j | 0, 1290160) + 134257275 >>> 28;
                                                 d = d + 1 | 0;
                                                 continue;
                                             }
@@ -1997,176 +1875,396 @@ var createKEMNativeCaller = (() => {
                                     }
                                     break;
                                 }
-                                R = f + 7712 | 0;
+                                P = f + 7712 | 0;
                             }
                             else {
-                                ia((f + 6656 | 0) + (c << 9) | 0, d, e & 255);
-                                c = c + 1 | 0;
-                                e = e + 1 | 0;
+                                fa((f + 6656 | 0) + (b << 9) | 0, d, j & 255);
+                                b = b + 1 | 0;
+                                j = j + 1 | 0;
                                 continue;
                             }
                             break;
                         } }
-                        function Na(a, b, c) { a = a | 0; b = b | 0; c = c | 0; var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0; j = R - 896 | 0; R = j; n = j + 832 | 0; g = R - 3072 | 0; R = g; l = g + 2048 | 0; d = b; f = R - 16 | 0; while (1) {
-                            h = 0;
-                            if ((k | 0) != 2) {
+                        function Ca(a, b, c) { var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0; e = P - 5184 | 0; P = e; f = e + 5120 | 0; ja(f, c, 32); Fa(e + 3072 | 0, f, 0); i = e + 5152 | 0; while (1) {
+                            f = 2;
+                            if ((g | 0) == 2) {
                                 while (1) {
-                                    if ((h | 0) != 64) {
-                                        u[f + 8 >> 1] = w[d | 0] | w[d + 1 | 0] << 8;
-                                        u[f + 10 >> 1] = w[d + 2 | 0] << 6 | w[d + 1 | 0] >>> 2;
-                                        u[f + 12 >> 1] = w[d + 3 | 0] << 4 | w[d + 2 | 0] >>> 4;
-                                        u[f + 14 >> 1] = w[d + 4 | 0] << 2 | w[d + 3 | 0] >>> 6;
-                                        o = h << 2;
-                                        e = 0;
+                                    if ((d | 0) != 2) {
+                                        fa((e + 2048 | 0) + (d << 9) | 0, i, f & 255);
+                                        d = d + 1 | 0;
+                                        f = f + 1 | 0;
+                                        continue;
+                                    }
+                                    break;
+                                }
+                                ba(e);
+                                ba(e + 2048 | 0);
+                                d = 0;
+                                while (1) {
+                                    if ((d | 0) != 2) {
+                                        g = (e + 1024 | 0) + (d << 9) | 0;
+                                        aa(g, (e + 3072 | 0) + (d << 10) | 0, e);
+                                        f = 0;
                                         while (1) {
-                                            if ((e | 0) != 4) {
-                                                u[(l + (k << 9) | 0) + (e + o << 1) >> 1] = B(x[(f + 8 | 0) + (e << 1) >> 1] & 1023, 3329) + 512 >>> 10;
-                                                e = e + 1 | 0;
+                                            if ((f | 0) != 256) {
+                                                h = g + (f << 1) | 0;
+                                                u[h >> 1] = sa(B(u[h >> 1], 1353));
+                                                f = f + 1 | 0;
                                                 continue;
                                             }
                                             break;
                                         }
-                                        h = h + 1 | 0;
-                                        d = d + 5 | 0;
+                                        d = d + 1 | 0;
                                         continue;
                                     }
                                     break;
                                 }
-                                k = k + 1 | 0;
-                                continue;
+                                d = e + 1024 | 0;
+                                ta(d, d, e + 2048 | 0);
+                                va(d);
+                                xa(b, e);
+                                xa(a, d);
+                                f = e + 5144 | 0;
+                                d = v[f + 4 >> 2];
+                                f = v[f >> 2];
+                                t[a + 792 | 0] = f;
+                                t[a + 793 | 0] = f >>> 8;
+                                t[a + 794 | 0] = f >>> 16;
+                                t[a + 795 | 0] = f >>> 24;
+                                t[a + 796 | 0] = d;
+                                t[a + 797 | 0] = d >>> 8;
+                                t[a + 798 | 0] = d >>> 16;
+                                t[a + 799 | 0] = d >>> 24;
+                                f = e + 5136 | 0;
+                                d = v[f + 4 >> 2];
+                                f = v[f >> 2];
+                                t[a + 784 | 0] = f;
+                                t[a + 785 | 0] = f >>> 8;
+                                t[a + 786 | 0] = f >>> 16;
+                                t[a + 787 | 0] = f >>> 24;
+                                t[a + 788 | 0] = d;
+                                t[a + 789 | 0] = d >>> 8;
+                                t[a + 790 | 0] = d >>> 16;
+                                t[a + 791 | 0] = d >>> 24;
+                                d = v[e + 5132 >> 2];
+                                f = v[e + 5128 >> 2];
+                                t[a + 776 | 0] = f;
+                                t[a + 777 | 0] = f >>> 8;
+                                t[a + 778 | 0] = f >>> 16;
+                                t[a + 779 | 0] = f >>> 24;
+                                t[a + 780 | 0] = d;
+                                t[a + 781 | 0] = d >>> 8;
+                                t[a + 782 | 0] = d >>> 16;
+                                t[a + 783 | 0] = d >>> 24;
+                                d = v[e + 5124 >> 2];
+                                f = v[e + 5120 >> 2];
+                                t[a + 768 | 0] = f;
+                                t[a + 769 | 0] = f >>> 8;
+                                t[a + 770 | 0] = f >>> 16;
+                                t[a + 771 | 0] = f >>> 24;
+                                t[a + 772 | 0] = d;
+                                t[a + 773 | 0] = d >>> 8;
+                                t[a + 774 | 0] = d >>> 16;
+                                t[a + 775 | 0] = d >>> 24;
+                                P = e + 5184 | 0;
                             }
-                            break;
-                        } h = g + 512 | 0; f = b + 640 | 0; d = 0; while (1) {
-                            if ((d | 0) != 128) {
-                                e = h + (d << 2) | 0;
-                                u[e >> 1] = B(w[f | 0] & 15, 3329) + 8 >>> 4;
-                                u[e + 2 >> 1] = B(w[f | 0] >>> 4 | 0, 3329) + 8 >>> 4;
-                                d = d + 1 | 0;
-                                f = f + 1 | 0;
+                            else {
+                                fa((g << 9) + e | 0, i, h & 255);
+                                g = g + 1 | 0;
+                                h = h + 1 | 0;
                                 continue;
                             }
                             break;
-                        } d = g + 1024 | 0; xa(d, c); da(l); ca(g, d, l); ja(g); e = 0; while (1) {
-                            if ((e | 0) != 256) {
-                                d = e << 1;
-                                u[d + g >> 1] = x[d + h >> 1] - x[d + g >> 1];
-                                e = e + 1 | 0;
+                        } g = b + 768 | 0; e = a; h = 800; while (1) {
+                            t[g | 0] = w[e | 0];
+                            g = g + 1 | 0;
+                            e = e + 1 | 0;
+                            h = h - 1 | 0;
+                            if (h) {
                                 continue;
                             }
                             break;
-                        } aa(g); e = 0; while (1) {
-                            if ((e | 0) != 32) {
-                                d = 0;
-                                h = e + n | 0;
-                                t[h | 0] = 0;
-                                l = e << 3;
-                                f = 0;
-                                while (1) {
-                                    if ((f | 0) != 8) {
-                                        k = d;
-                                        d = u[g + (f + l << 1) >> 1];
-                                        d = k | ((((d + (d >>> 15 & 3329) & 65535) << 1) + 1664 >>> 0) / 3329 & 1) << f;
-                                        t[h | 0] = d;
-                                        f = f + 1 | 0;
-                                        continue;
-                                    }
-                                    break;
-                                }
-                                e = e + 1 | 0;
+                        } la(b + 1568 | 0, a); e = w[c + 60 | 0] | w[c + 61 | 0] << 8 | (w[c + 62 | 0] << 16 | w[c + 63 | 0] << 24); a = b + 1624 | 0; d = w[c + 56 | 0] | w[c + 57 | 0] << 8 | (w[c + 58 | 0] << 16 | w[c + 59 | 0] << 24); t[a | 0] = d; t[a + 1 | 0] = d >>> 8; t[a + 2 | 0] = d >>> 16; t[a + 3 | 0] = d >>> 24; t[a + 4 | 0] = e; t[a + 5 | 0] = e >>> 8; t[a + 6 | 0] = e >>> 16; t[a + 7 | 0] = e >>> 24; e = w[c + 52 | 0] | w[c + 53 | 0] << 8 | (w[c + 54 | 0] << 16 | w[c + 55 | 0] << 24); a = b + 1616 | 0; d = w[c + 48 | 0] | w[c + 49 | 0] << 8 | (w[c + 50 | 0] << 16 | w[c + 51 | 0] << 24); t[a | 0] = d; t[a + 1 | 0] = d >>> 8; t[a + 2 | 0] = d >>> 16; t[a + 3 | 0] = d >>> 24; t[a + 4 | 0] = e; t[a + 5 | 0] = e >>> 8; t[a + 6 | 0] = e >>> 16; t[a + 7 | 0] = e >>> 24; e = w[c + 44 | 0] | w[c + 45 | 0] << 8 | (w[c + 46 | 0] << 16 | w[c + 47 | 0] << 24); a = b + 1608 | 0; d = w[c + 40 | 0] | w[c + 41 | 0] << 8 | (w[c + 42 | 0] << 16 | w[c + 43 | 0] << 24); t[a | 0] = d; t[a + 1 | 0] = d >>> 8; t[a + 2 | 0] = d >>> 16; t[a + 3 | 0] = d >>> 24; t[a + 4 | 0] = e; t[a + 5 | 0] = e >>> 8; t[a + 6 | 0] = e >>> 16; t[a + 7 | 0] = e >>> 24; a = w[c + 36 | 0] | w[c + 37 | 0] << 8 | (w[c + 38 | 0] << 16 | w[c + 39 | 0] << 24); c = w[c + 32 | 0] | w[c + 33 | 0] << 8 | (w[c + 34 | 0] << 16 | w[c + 35 | 0] << 24); t[b + 1600 | 0] = c; t[b + 1601 | 0] = c >>> 8; t[b + 1602 | 0] = c >>> 16; t[b + 1603 | 0] = c >>> 24; t[b + 1604 | 0] = a; t[b + 1605 | 0] = a >>> 8; t[b + 1606 | 0] = a >>> 16; t[b + 1607 | 0] = a >>> 24; }
+                        function Pa(a, b, c) { a = a | 0; b = b | 0; c = c | 0; var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0; g = P - 928 | 0; P = g; f = g + 864 | 0; Da(f, b, c); d = c + 1592 | 0; h = w[d + 4 | 0] | w[d + 5 | 0] << 8 | (w[d + 6 | 0] << 16 | w[d + 7 | 0] << 24); v[g + 920 >> 2] = w[d | 0] | w[d + 1 | 0] << 8 | (w[d + 2 | 0] << 16 | w[d + 3 | 0] << 24); v[g + 924 >> 2] = h; d = c + 1584 | 0; h = w[d + 4 | 0] | w[d + 5 | 0] << 8 | (w[d + 6 | 0] << 16 | w[d + 7 | 0] << 24); v[g + 912 >> 2] = w[d | 0] | w[d + 1 | 0] << 8 | (w[d + 2 | 0] << 16 | w[d + 3 | 0] << 24); v[g + 916 >> 2] = h; d = c + 1576 | 0; h = w[d + 4 | 0] | w[d + 5 | 0] << 8 | (w[d + 6 | 0] << 16 | w[d + 7 | 0] << 24); v[g + 904 >> 2] = w[d | 0] | w[d + 1 | 0] << 8 | (w[d + 2 | 0] << 16 | w[d + 3 | 0] << 24); v[g + 908 >> 2] = h; d = w[c + 1572 | 0] | w[c + 1573 | 0] << 8 | (w[c + 1574 | 0] << 16 | w[c + 1575 | 0] << 24); v[g + 896 >> 2] = w[c + 1568 | 0] | w[c + 1569 | 0] << 8 | (w[c + 1570 | 0] << 16 | w[c + 1571 | 0] << 24); v[g + 900 >> 2] = d; o = g + 800 | 0; ja(o, f, 64); ha(g, f, c + 768 | 0, g + 832 | 0); d = 0; while (1) {
+                            if ((d | 0) != 768) {
+                                e = w[d + g | 0] ^ w[b + d | 0] | e;
+                                d = d + 1 | 0;
                                 continue;
                             }
                             break;
-                        } R = g + 3072 | 0; while (1) {
-                            if ((i | 0) != 32) {
-                                t[(i + j | 0) + 864 | 0] = w[(c + i | 0) + 1568 | 0];
-                                i = i + 1 | 0;
+                        } p = (e & 255) != 0; l = P - 16 | 0; P = l; e = 0; k = l + 12 | 0; d = _(208); v[k >> 2] = d; if (!d) {
+                            M(111);
+                            r();
+                        } while (1) {
+                            if ((e | 0) != 25) {
+                                f = d + (e << 3) | 0;
+                                v[f >> 2] = 0;
+                                v[f + 4 >> 2] = 0;
+                                e = e + 1 | 0;
                                 continue;
                             }
                             break;
-                        } d = j + 768 | 0; e = j + 832 | 0; la(d, e, 64); k = e; e = j + 800 | 0; Ca(j, k, c + 768 | 0, e); i = 0; while (1) {
-                            if ((i | 0) != 768) {
-                                m = w[b + i | 0] ^ w[i + j | 0] | m;
-                                i = i + 1 | 0;
+                        } v[d + 200 >> 2] = 0; v[d + 204 >> 2] = 0; Aa(k, c + 1600 | 0, 32); Aa(k, b, 768); b = v[k >> 2]; c = v[b + 200 >> 2]; d = (c & -8) + b | 0; e = v[d + 4 >> 2]; f = c << 3; c = f & 31; if ((f & 63) >>> 0 >= 32) {
+                            f = 31 << c;
+                            c = 0;
+                        }
+                        else {
+                            f = (1 << c) - 1 & 31 >>> 32 - c;
+                            c = 31 << c;
+                        } v[d >> 2] = c ^ v[d >> 2]; v[d + 4 >> 2] = e ^ f; d = v[b + 132 >> 2] ^ -2147483648; v[b + 128 >> 2] = v[b + 128 >> 2]; v[b + 132 >> 2] = d; v[b + 200 >> 2] = 0; v[b + 204 >> 2] = 0; c = 0; d = 0; f = v[k >> 2]; h = 32; while (1) {
+                            a: {
+                                e = v[f + 200 >> 2];
+                                i = v[f + 204 >> 2];
+                                b: {
+                                    c: {
+                                        if (!d & (c | 0) == 32) {
+                                            b = 32;
+                                            break c;
+                                        }
+                                        b = c;
+                                        if ((d | 0) == (i | 0) & e >>> 0 > c >>> 0 | d >>> 0 < i >>> 0) {
+                                            break b;
+                                        }
+                                        h = c;
+                                    }
+                                    c = e - h | 0;
+                                    d = i - ((e >>> 0 < h >>> 0) + m | 0) | 0;
+                                    e = 32 - b | 0;
+                                    h = a + b | 0;
+                                    while (1) {
+                                        v[f + 200 >> 2] = c;
+                                        v[f + 204 >> 2] = d;
+                                        if (e) {
+                                            da(f);
+                                            c = e >>> 0 >= 136 ? 136 : e;
+                                            b = 0;
+                                            while (1) {
+                                                if ((b | 0) != (c | 0)) {
+                                                    d = f + (b & -8) | 0;
+                                                    j = v[d >> 2];
+                                                    m = v[d + 4 >> 2];
+                                                    i = b << 3 & 56;
+                                                    d = i & 31;
+                                                    n = b + h | 0;
+                                                    if ((i & 63) >>> 0 >= 32) {
+                                                        j = m >>> d | 0;
+                                                    }
+                                                    else {
+                                                        j = ((1 << d) - 1 & m) << 32 - d | j >>> d;
+                                                    }
+                                                    t[n | 0] = j;
+                                                    b = b + 1 | 0;
+                                                    continue;
+                                                }
+                                                break;
+                                            }
+                                            e = e - c | 0;
+                                            h = c + h | 0;
+                                            c = 136 - c | 0;
+                                            d = 0;
+                                            continue;
+                                        }
+                                        break;
+                                    }
+                                    break a;
+                                }
+                                j = a + b | 0;
+                                e = c + (136 - e | 0) | 0;
+                                i = (e & -8) + f | 0;
+                                b = v[i >> 2];
+                                n = j;
+                                i = v[i + 4 >> 2];
+                                j = b;
+                                e = e << 3;
+                                b = e & 31;
+                                if ((e & 63) >>> 0 >= 32) {
+                                    b = i >>> b | 0;
+                                }
+                                else {
+                                    b = ((1 << b) - 1 & i) << 32 - b | j >>> b;
+                                }
+                                t[n | 0] = b;
+                                c = c + 1 | 0;
+                                d = c ? d : d + 1 | 0;
                                 continue;
                             }
                             break;
-                        } $(e, b, 768); e = c + 1600 | 0; b = 0; g = 0 - ((m & 255) != 0) | 0; while (1) {
+                        } ua(k); P = l + 16 | 0; b = 0; d = 0 - (1 - p & 255) | 0; while (1) {
                             if ((b | 0) != 32) {
-                                f = b + d | 0;
+                                f = a + b | 0;
                                 c = w[f | 0];
-                                t[f | 0] = g & (c ^ w[b + e | 0]) ^ c;
+                                t[f | 0] = c ^ d & (c ^ w[b + o | 0]);
                                 b = b + 1 | 0;
                                 continue;
                             }
                             break;
-                        } ga(a, 32, d, 64); R = j + 896 | 0; return 0; }
-                        function Pa(a, b) { a = a | 0; b = b | 0; var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0; d = R - 5184 | 0; R = d; e = d + 5120 | 0; ka(e); la(e, e, 32); Ea(d + 3072 | 0, e, 0); g = d + 5152 | 0; while (1) {
-                            e = 2;
-                            if ((f | 0) == 2) {
-                                while (1) {
-                                    if ((c | 0) != 2) {
-                                        ia((d + 2048 | 0) + (c << 9) | 0, g, e & 255);
-                                        c = c + 1 | 0;
-                                        e = e + 1 | 0;
-                                        continue;
-                                    }
-                                    break;
-                                }
-                                da(d);
-                                da(d + 2048 | 0);
-                                c = 0;
+                        } P = g + 928 | 0; return 0; }
+                        function Qa(a, b, c) { a = a | 0; b = b | 0; c = c | 0; var d = 0, e = 0, f = 0; d = P - 32 | 0; P = d; ia(d, 32); e = P - 128 | 0; P = e; f = w[d + 20 | 0] | w[d + 21 | 0] << 8 | (w[d + 22 | 0] << 16 | w[d + 23 | 0] << 24); v[e + 80 >> 2] = w[d + 16 | 0] | w[d + 17 | 0] << 8 | (w[d + 18 | 0] << 16 | w[d + 19 | 0] << 24); v[e + 84 >> 2] = f; f = w[d + 28 | 0] | w[d + 29 | 0] << 8 | (w[d + 30 | 0] << 16 | w[d + 31 | 0] << 24); v[e + 88 >> 2] = w[d + 24 | 0] | w[d + 25 | 0] << 8 | (w[d + 26 | 0] << 16 | w[d + 27 | 0] << 24); v[e + 92 >> 2] = f; f = w[d + 4 | 0] | w[d + 5 | 0] << 8 | (w[d + 6 | 0] << 16 | w[d + 7 | 0] << 24); v[e + 64 >> 2] = w[d | 0] | w[d + 1 | 0] << 8 | (w[d + 2 | 0] << 16 | w[d + 3 | 0] << 24); v[e + 68 >> 2] = f; f = w[d + 12 | 0] | w[d + 13 | 0] << 8 | (w[d + 14 | 0] << 16 | w[d + 15 | 0] << 24); v[e + 72 >> 2] = w[d + 8 | 0] | w[d + 9 | 0] << 8 | (w[d + 10 | 0] << 16 | w[d + 11 | 0] << 24); v[e + 76 >> 2] = f; la(e + 96 | 0, c); f = e - -64 | 0; ja(e, f, 64); ha(a, f, c, e + 32 | 0); c = v[e + 28 >> 2]; a = v[e + 24 >> 2]; t[b + 24 | 0] = a; t[b + 25 | 0] = a >>> 8; t[b + 26 | 0] = a >>> 16; t[b + 27 | 0] = a >>> 24; t[b + 28 | 0] = c; t[b + 29 | 0] = c >>> 8; t[b + 30 | 0] = c >>> 16; t[b + 31 | 0] = c >>> 24; c = v[e + 20 >> 2]; a = v[e + 16 >> 2]; t[b + 16 | 0] = a; t[b + 17 | 0] = a >>> 8; t[b + 18 | 0] = a >>> 16; t[b + 19 | 0] = a >>> 24; t[b + 20 | 0] = c; t[b + 21 | 0] = c >>> 8; t[b + 22 | 0] = c >>> 16; t[b + 23 | 0] = c >>> 24; c = v[e + 12 >> 2]; a = v[e + 8 >> 2]; t[b + 8 | 0] = a; t[b + 9 | 0] = a >>> 8; t[b + 10 | 0] = a >>> 16; t[b + 11 | 0] = a >>> 24; t[b + 12 | 0] = c; t[b + 13 | 0] = c >>> 8; t[b + 14 | 0] = c >>> 16; t[b + 15 | 0] = c >>> 24; c = v[e + 4 >> 2]; a = v[e >> 2]; t[b | 0] = a; t[b + 1 | 0] = a >>> 8; t[b + 2 | 0] = a >>> 16; t[b + 3 | 0] = a >>> 24; t[b + 4 | 0] = c; t[b + 5 | 0] = c >>> 8; t[b + 6 | 0] = c >>> 16; t[b + 7 | 0] = c >>> 24; P = e + 128 | 0; P = d + 32 | 0; return 0; }
+                        function Da(a, b, c) { var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0; e = P - 3072 | 0; P = e; i = e + 2048 | 0; d = b; f = P - 16 | 0; while (1) {
+                            if ((j | 0) != 2) {
+                                k = (j << 9) + i | 0;
+                                h = 0;
                                 while (1) {
-                                    if ((c | 0) != 2) {
-                                        f = (d + 1024 | 0) + (c << 9) | 0;
-                                        ca(f, (d + 3072 | 0) + (c << 10) | 0, d);
-                                        e = 0;
+                                    if ((h | 0) != 64) {
+                                        u[f + 8 >> 1] = w[d | 0] | w[d + 1 | 0] << 8;
+                                        u[f + 10 >> 1] = w[d + 2 | 0] << 6 | w[d + 1 | 0] >>> 2;
+                                        u[f + 12 >> 1] = w[d + 3 | 0] << 4 | w[d + 2 | 0] >>> 4;
+                                        u[f + 14 >> 1] = w[d + 4 | 0] << 2 | w[d + 3 | 0] >>> 6;
+                                        l = h << 2;
+                                        g = 0;
                                         while (1) {
-                                            if ((e | 0) != 256) {
-                                                g = f + (e << 1) | 0;
-                                                u[g >> 1] = ua(B(u[g >> 1], 1353));
-                                                e = e + 1 | 0;
+                                            if ((g | 0) != 4) {
+                                                u[((g | l) << 1) + k >> 1] = B(x[(f + 8 | 0) + (g << 1) >> 1] & 1023, 3329) + 512 >>> 10;
+                                                g = g + 1 | 0;
                                                 continue;
                                             }
                                             break;
                                         }
-                                        c = c + 1 | 0;
+                                        h = h + 1 | 0;
+                                        d = d + 5 | 0;
                                         continue;
                                     }
                                     break;
                                 }
-                                c = d + 1024 | 0;
-                                va(c, c, d + 2048 | 0);
-                                wa(c);
-                                ya(b, d);
-                                e = d + 5120 | 0;
-                                ya(a, c);
-                                c = 0;
+                                j = j + 1 | 0;
+                                continue;
+                            }
+                            break;
+                        } f = e + 512 | 0; b = b + 640 | 0; d = 0; while (1) {
+                            if ((d | 0) != 128) {
+                                g = f + (d << 2) | 0;
+                                u[g >> 1] = B(w[b | 0] & 15, 3329) + 8 >>> 4;
+                                u[g + 2 >> 1] = B(w[b | 0] >>> 4 | 0, 3329) + 8 >>> 4;
+                                d = d + 1 | 0;
+                                b = b + 1 | 0;
+                                continue;
+                            }
+                            break;
+                        } b = e + 1024 | 0; wa(b, c); ba(i); aa(e, b, i); ga(e); c = 0; while (1) {
+                            if ((c | 0) != 256) {
+                                b = c << 1;
+                                u[b + e >> 1] = x[b + f >> 1] - x[b + e >> 1];
+                                c = c + 1 | 0;
+                                continue;
+                            }
+                            break;
+                        } Y(e); c = 0; while (1) {
+                            if ((c | 0) != 32) {
+                                d = 0;
+                                f = a + c | 0;
+                                t[f | 0] = 0;
+                                g = c << 3;
+                                b = 0;
                                 while (1) {
-                                    if ((c | 0) != 32) {
-                                        t[(a + c | 0) + 768 | 0] = w[c + e | 0];
-                                        c = c + 1 | 0;
+                                    if ((b | 0) != 8) {
+                                        d = (B(u[e + ((b | g) << 1) >> 1], 161270) + 134257275 >>> 28 & 1) << b | d;
+                                        t[f | 0] = d;
+                                        b = b + 1 | 0;
                                         continue;
                                     }
                                     break;
                                 }
-                                R = d + 5184 | 0;
-                            }
-                            else {
-                                ia((f << 9) + d | 0, g, i & 255);
-                                f = f + 1 | 0;
-                                i = i + 1 | 0;
+                                c = c + 1 | 0;
                                 continue;
                             }
                             break;
-                        } while (1) {
-                            if ((h | 0) != 800) {
-                                t[(b + h | 0) + 768 | 0] = w[a + h | 0];
-                                h = h + 1 | 0;
+                        } P = e + 3072 | 0; }
+                        function pa(a, b, c, d) { var e = 0, f = 0; f = P - 48 | 0; P = f; e = w[c + 28 | 0] | w[c + 29 | 0] << 8 | (w[c + 30 | 0] << 16 | w[c + 31 | 0] << 24); v[f + 24 >> 2] = w[c + 24 | 0] | w[c + 25 | 0] << 8 | (w[c + 26 | 0] << 16 | w[c + 27 | 0] << 24); v[f + 28 >> 2] = e; e = w[c + 20 | 0] | w[c + 21 | 0] << 8 | (w[c + 22 | 0] << 16 | w[c + 23 | 0] << 24); v[f + 16 >> 2] = w[c + 16 | 0] | w[c + 17 | 0] << 8 | (w[c + 18 | 0] << 16 | w[c + 19 | 0] << 24); v[f + 20 >> 2] = e; e = w[c + 4 | 0] | w[c + 5 | 0] << 8 | (w[c + 6 | 0] << 16 | w[c + 7 | 0] << 24); v[f >> 2] = w[c | 0] | w[c + 1 | 0] << 8 | (w[c + 2 | 0] << 16 | w[c + 3 | 0] << 24); v[f + 4 >> 2] = e; e = w[c + 12 | 0] | w[c + 13 | 0] << 8 | (w[c + 14 | 0] << 16 | w[c + 15 | 0] << 24); v[f + 8 >> 2] = w[c + 8 | 0] | w[c + 9 | 0] << 8 | (w[c + 10 | 0] << 16 | w[c + 11 | 0] << 24); v[f + 12 >> 2] = e; t[f + 32 | 0] = d; c = P - 160 | 0; P = c; d = c + 12 | 0; e = _(200); v[d >> 2] = e; if (!e) {
+                            M(111);
+                            r();
+                        } $(e, 136, f, 33, 31); e = (b >>> 0) / 136 | 0; ma(a, e, d); a: {
+                            e = B(e, 136);
+                            if ((e | 0) == (b | 0)) {
+                                break a;
+                            }
+                            b = b - e | 0;
+                            e = a + e | 0;
+                            ma(c + 16 | 0, 1, d);
+                            a = 0;
+                            while (1) {
+                                if ((a | 0) == (b | 0)) {
+                                    break a;
+                                }
+                                t[a + e | 0] = w[(c + 16 | 0) + a | 0];
+                                a = a + 1 | 0;
                                 continue;
                             }
+                        } ea(v[c + 12 >> 2]); P = c + 160 | 0; P = f + 48 | 0; }
+                        function Aa(a, b, c) { var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0; a = v[a >> 2]; while (1) {
+                            a: {
+                                g = 0;
+                                f = 0;
+                                d = v[a + 200 >> 2];
+                                e = c;
+                                j = d + e | 0;
+                                i = v[a + 204 >> 2];
+                                h = i;
+                                if (!(e >>> 0 > j >>> 0 ? h + 1 | 0 : h) & j >>> 0 < 136) {
+                                    while (1) {
+                                        if (!l & (e | 0) == (k | 0)) {
+                                            break a;
+                                        }
+                                        f = k + v[a + 200 >> 2] | 0;
+                                        c = (f & -8) + a | 0;
+                                        h = v[c + 4 >> 2];
+                                        g = w[b + k | 0];
+                                        d = f << 3;
+                                        f = d & 31;
+                                        if ((d & 63) >>> 0 >= 32) {
+                                            d = g << f;
+                                            i = 0;
+                                        }
+                                        else {
+                                            d = (1 << f) - 1 & g >>> 32 - f;
+                                            i = g << f;
+                                        }
+                                        v[c >> 2] = i ^ v[c >> 2];
+                                        v[c + 4 >> 2] = d ^ h;
+                                        c = l;
+                                        k = k + 1 | 0;
+                                        l = k ? c : c + 1 | 0;
+                                        continue;
+                                    }
+                                }
+                                else {
+                                    while (1) {
+                                        e = 136 - d | 0;
+                                        if (!f & g >>> 0 < e >>> 0) {
+                                            d = d + g | 0;
+                                            h = (d & -8) + a | 0;
+                                            i = v[h + 4 >> 2];
+                                            j = w[b + g | 0];
+                                            d = d << 3;
+                                            e = d & 31;
+                                            if ((d & 63) >>> 0 >= 32) {
+                                                d = j << e;
+                                                e = 0;
+                                            }
+                                            else {
+                                                d = (1 << e) - 1 & j >>> 32 - e;
+                                                e = j << e;
+                                            }
+                                            v[h >> 2] = e ^ v[h >> 2];
+                                            v[h + 4 >> 2] = d ^ i;
+                                            g = g + 1 | 0;
+                                            f = g ? f : f + 1 | 0;
+                                            d = v[a + 200 >> 2];
+                                            i = v[a + 204 >> 2];
+                                            continue;
+                                        }
+                                        break;
+                                    }
+                                    v[a + 200 >> 2] = 0;
+                                    v[a + 204 >> 2] = 0;
+                                    da(a);
+                                    b = b + e | 0;
+                                    c = c - e | 0;
+                                    continue;
+                                }
+                            }
                             break;
-                        } $(b + 1568 | 0, a, 800); ka(b + 1600 | 0); return 0; }
-                        function fa(a, b, c, d, e) { var f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0; h = R - 208 | 0; R = h; while (1) {
+                        } c = v[a + 204 >> 2]; b = e + v[a + 200 >> 2] | 0; c = b >>> 0 < e >>> 0 ? c + 1 | 0 : c; v[a + 200 >> 2] = b; v[a + 204 >> 2] = c; }
+                        function $(a, b, c, d, e) { var f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0; h = P - 208 | 0; P = h; while (1) {
                             if ((f | 0) == 25) {
                                 i = b >>> 3 | 0;
                                 while (1) {
@@ -2201,14 +2299,14 @@ var createKEMNativeCaller = (() => {
                                                 b = c + a | 0;
                                                 d = v[b >> 2];
                                                 e = v[b + 4 >> 2];
-                                                v[b >> 2] = ta(c + h | 0) ^ d;
-                                                v[b + 4 >> 2] = e ^ T;
+                                                v[b >> 2] = oa(c + h | 0) ^ d;
+                                                v[b + 4 >> 2] = R ^ e;
                                                 f = f + 1 | 0;
                                                 continue;
                                             }
                                             break;
                                         }
-                                        R = h + 208 | 0;
+                                        P = h + 208 | 0;
                                     }
                                     else {
                                         while (1) {
@@ -2217,14 +2315,14 @@ var createKEMNativeCaller = (() => {
                                                 g = j + a | 0;
                                                 k = v[g >> 2];
                                                 l = v[g + 4 >> 2];
-                                                v[g >> 2] = ta(c + j | 0) ^ k;
-                                                v[g + 4 >> 2] = l ^ T;
+                                                v[g >> 2] = oa(c + j | 0) ^ k;
+                                                v[g + 4 >> 2] = R ^ l;
                                                 f = f + 1 | 0;
                                                 continue;
                                             }
                                             break;
                                         }
-                                        Fa(a);
+                                        da(a);
                                         c = b + c | 0;
                                         d = d - b | 0;
                                         continue;
@@ -2241,28 +2339,28 @@ var createKEMNativeCaller = (() => {
                             }
                             break;
                         } }
-                        function ra(a, b, c, d) { var e = 0, f = 0; e = R - 48 | 0; R = e; f = w[b + 28 | 0] | w[b + 29 | 0] << 8 | (w[b + 30 | 0] << 16 | w[b + 31 | 0] << 24); v[e + 24 >> 2] = w[b + 24 | 0] | w[b + 25 | 0] << 8 | (w[b + 26 | 0] << 16 | w[b + 27 | 0] << 24); v[e + 28 >> 2] = f; f = w[b + 20 | 0] | w[b + 21 | 0] << 8 | (w[b + 22 | 0] << 16 | w[b + 23 | 0] << 24); v[e + 16 >> 2] = w[b + 16 | 0] | w[b + 17 | 0] << 8 | (w[b + 18 | 0] << 16 | w[b + 19 | 0] << 24); v[e + 20 >> 2] = f; f = w[b + 4 | 0] | w[b + 5 | 0] << 8 | (w[b + 6 | 0] << 16 | w[b + 7 | 0] << 24); v[e >> 2] = w[b | 0] | w[b + 1 | 0] << 8 | (w[b + 2 | 0] << 16 | w[b + 3 | 0] << 24); v[e + 4 >> 2] = f; f = w[b + 12 | 0] | w[b + 13 | 0] << 8 | (w[b + 14 | 0] << 16 | w[b + 15 | 0] << 24); v[e + 8 >> 2] = w[b + 8 | 0] | w[b + 9 | 0] << 8 | (w[b + 10 | 0] << 16 | w[b + 11 | 0] << 24); v[e + 12 >> 2] = f; t[e + 33 | 0] = d; t[e + 32 | 0] = c; b = a; a = ha(200); v[b >> 2] = a; if (!a) {
-                            P(111);
-                            L();
-                        } fa(a, 168, e, 34, 31); R = e + 48 | 0; }
-                        function qa(a, b, c, d) { var e = 0, f = 0; e = R - 48 | 0; R = e; f = w[c + 28 | 0] | w[c + 29 | 0] << 8 | (w[c + 30 | 0] << 16 | w[c + 31 | 0] << 24); v[e + 24 >> 2] = w[c + 24 | 0] | w[c + 25 | 0] << 8 | (w[c + 26 | 0] << 16 | w[c + 27 | 0] << 24); v[e + 28 >> 2] = f; f = w[c + 20 | 0] | w[c + 21 | 0] << 8 | (w[c + 22 | 0] << 16 | w[c + 23 | 0] << 24); v[e + 16 >> 2] = w[c + 16 | 0] | w[c + 17 | 0] << 8 | (w[c + 18 | 0] << 16 | w[c + 19 | 0] << 24); v[e + 20 >> 2] = f; f = w[c + 4 | 0] | w[c + 5 | 0] << 8 | (w[c + 6 | 0] << 16 | w[c + 7 | 0] << 24); v[e >> 2] = w[c | 0] | w[c + 1 | 0] << 8 | (w[c + 2 | 0] << 16 | w[c + 3 | 0] << 24); v[e + 4 >> 2] = f; f = w[c + 12 | 0] | w[c + 13 | 0] << 8 | (w[c + 14 | 0] << 16 | w[c + 15 | 0] << 24); v[e + 8 >> 2] = w[c + 8 | 0] | w[c + 9 | 0] << 8 | (w[c + 10 | 0] << 16 | w[c + 11 | 0] << 24); v[e + 12 >> 2] = f; t[e + 32 | 0] = d; ga(a, b, e, 33); R = e + 48 | 0; }
-                        function Ea(a, b, c) { var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0; e = R - 528 | 0; R = e; while (1) {
+                        function qa(a, b, c, d) { var e = 0, f = 0; e = P - 48 | 0; P = e; f = w[b + 28 | 0] | w[b + 29 | 0] << 8 | (w[b + 30 | 0] << 16 | w[b + 31 | 0] << 24); v[e + 24 >> 2] = w[b + 24 | 0] | w[b + 25 | 0] << 8 | (w[b + 26 | 0] << 16 | w[b + 27 | 0] << 24); v[e + 28 >> 2] = f; f = w[b + 20 | 0] | w[b + 21 | 0] << 8 | (w[b + 22 | 0] << 16 | w[b + 23 | 0] << 24); v[e + 16 >> 2] = w[b + 16 | 0] | w[b + 17 | 0] << 8 | (w[b + 18 | 0] << 16 | w[b + 19 | 0] << 24); v[e + 20 >> 2] = f; f = w[b + 4 | 0] | w[b + 5 | 0] << 8 | (w[b + 6 | 0] << 16 | w[b + 7 | 0] << 24); v[e >> 2] = w[b | 0] | w[b + 1 | 0] << 8 | (w[b + 2 | 0] << 16 | w[b + 3 | 0] << 24); v[e + 4 >> 2] = f; f = w[b + 12 | 0] | w[b + 13 | 0] << 8 | (w[b + 14 | 0] << 16 | w[b + 15 | 0] << 24); v[e + 8 >> 2] = w[b + 8 | 0] | w[b + 9 | 0] << 8 | (w[b + 10 | 0] << 16 | w[b + 11 | 0] << 24); v[e + 12 >> 2] = f; t[e + 33 | 0] = d; t[e + 32 | 0] = c; b = a; a = _(200); v[b >> 2] = a; if (!a) {
+                            M(111);
+                            r();
+                        } $(a, 168, e, 34, 31); P = e + 48 | 0; }
+                        function Fa(a, b, c) { var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0; e = P - 528 | 0; P = e; while (1) {
                             if ((h | 0) != 2) {
+                                m = (h << 10) + a | 0;
                                 g = 0;
                                 while (1) {
                                     if ((g | 0) != 2) {
                                         a: {
                                             if (c) {
-                                                ra(e + 8 | 0, b, h & 255, g & 255);
+                                                qa(e + 12 | 0, b, h & 255, g & 255);
                                                 break a;
                                             }
-                                            ra(e + 8 | 0, b, g & 255, h & 255);
+                                            qa(e + 12 | 0, b, g & 255, h & 255);
                                         }
                                         f = e + 16 | 0;
-                                        pa(f, 3, e + 8 | 0);
+                                        na(f, 3, e + 12 | 0);
                                         d = 504;
-                                        k = ((h << 10) + a | 0) + (g << 9) | 0;
-                                        f = Da(k, 256, f, 504);
+                                        k = (g << 9) + m | 0;
+                                        f = Ea(k, 256, f, 504);
                                         while (1) {
                                             if (f >>> 0 <= 255) {
                                                 i = (d >>> 0) % 3 | 0;
@@ -2278,16 +2376,16 @@ var createKEMNativeCaller = (() => {
                                                     break;
                                                 }
                                                 d = e + 16 | 0;
-                                                pa(d | i, 1, e + 8 | 0);
+                                                na(d | i, 1, e + 12 | 0);
                                                 j = d;
                                                 d = i | 168;
-                                                f = Da((f << 1) + k | 0, 256 - f | 0, j, d) + f | 0;
+                                                f = Ea((f << 1) + k | 0, 256 - f | 0, j, d) + f | 0;
                                                 continue;
                                             }
                                             break;
                                         }
                                         g = g + 1 | 0;
-                                        na(e + 8 | 0);
+                                        ua(e + 12 | 0);
                                         continue;
                                     }
                                     break;
@@ -2296,17 +2394,17 @@ var createKEMNativeCaller = (() => {
                                 continue;
                             }
                             break;
-                        } R = e + 528 | 0; }
-                        function ja(a) { var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0; d = 2; f = 127; a: while (1) {
+                        } P = e + 528 | 0; }
+                        function ga(a) { var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0; c = 2; f = 127; a: while (1) {
                             b: {
                                 b = 0;
-                                if (d >>> 0 > 128) {
+                                if (c >>> 0 > 128) {
                                     while (1) {
                                         if ((b | 0) == 256) {
                                             break b;
                                         }
-                                        d = (b << 1) + a | 0;
-                                        u[d >> 1] = Z(u[d >> 1], 1441);
+                                        c = (b << 1) + a | 0;
+                                        u[c >> 1] = W(u[c >> 1], 1441);
                                         b = b + 1 | 0;
                                         continue;
                                     }
@@ -2314,64 +2412,60 @@ var createKEMNativeCaller = (() => {
                                 while (1) {
                                     c: {
                                         if (b >>> 0 <= 255) {
-                                            c = b + d | 0;
-                                            g = b >>> 0 > c >>> 0 ? b : c;
+                                            g = b + c | 0;
                                             h = u[(f << 1) + 1312 >> 1];
                                             while (1) {
                                                 if ((b | 0) == (g | 0)) {
                                                     break c;
                                                 }
-                                                c = (b << 1) + a | 0;
-                                                e = x[c >> 1];
-                                                i = c;
-                                                c = (b + d << 1) + a | 0;
-                                                u[i >> 1] = sa(e + x[c >> 1] << 16 >> 16);
-                                                e = x[c >> 1] - e | 0;
-                                                u[c >> 1] = e;
-                                                u[c >> 1] = Z(h, e << 16 >> 16);
+                                                d = (b << 1) + a | 0;
+                                                e = x[d >> 1];
+                                                i = d;
+                                                d = d + (c << 1) | 0;
+                                                u[i >> 1] = ra(e + x[d >> 1] << 16 >> 16);
+                                                e = x[d >> 1] - e | 0;
+                                                u[d >> 1] = e;
+                                                u[d >> 1] = W(h, e << 16 >> 16);
                                                 b = b + 1 | 0;
                                                 continue;
                                             }
                                         }
-                                        d = d << 1;
+                                        c = c << 1;
                                         continue a;
                                     }
-                                    b = d + g | 0;
+                                    b = c + g | 0;
                                     f = f - 1 | 0;
                                     continue;
                                 }
                             }
                             break;
                         } }
-                        function da(a) { var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0; while (1) {
-                            if ((f | 0) != 2) {
-                                g = (f << 9) + a | 0;
+                        function ba(a) { var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0; while (1) {
+                            if ((e | 0) != 2) {
+                                g = (e << 9) + a | 0;
                                 c = 128;
-                                h = 1;
+                                f = 1;
                                 while (1) {
                                     b = 0;
                                     if (c >>> 0 >= 2) {
                                         while (1) {
                                             if (b >>> 0 <= 255) {
-                                                d = b + c | 0;
-                                                d = b >>> 0 > d >>> 0 ? b : d;
-                                                k = u[(h << 1) + 1312 >> 1];
+                                                h = b + c | 0;
+                                                k = u[(f << 1) + 1312 >> 1];
                                                 while (1) {
-                                                    if ((b | 0) != (d | 0)) {
-                                                        e = (b + c << 1) + g | 0;
-                                                        i = Z(k, u[e >> 1]);
-                                                        l = e;
-                                                        e = (b << 1) + g | 0;
-                                                        j = x[e >> 1];
-                                                        u[l >> 1] = j - i;
-                                                        u[e >> 1] = i + j;
+                                                    if ((b | 0) != (h | 0)) {
+                                                        d = (b << 1) + g | 0;
+                                                        i = d + (c << 1) | 0;
+                                                        j = W(k, u[i >> 1]);
+                                                        u[i >> 1] = x[d >> 1] - j;
+                                                        u[d >> 1] = x[d >> 1] + j;
                                                         b = b + 1 | 0;
                                                         continue;
                                                     }
                                                     break;
                                                 }
-                                                b = c + d | 0;
-                                                h = h + 1 | 0;
+                                                b = c + h | 0;
+                                                f = f + 1 | 0;
                                                 continue;
                                             }
                                             break;
@@ -2381,13 +2475,13 @@ var createKEMNativeCaller = (() => {
                                     }
                                     break;
                                 }
-                                aa(g);
-                                f = f + 1 | 0;
+                                Y(g);
+                                e = e + 1 | 0;
                                 continue;
                             }
                             break;
                         } }
-                        function Wa(a, b, c) { var d = 0, e = 0, f = 0, g = 0; g = c & 63; f = g; e = f & 31; if (f >>> 0 >= 32) {
+                        function Za(a, b, c) { var d = 0, e = 0, f = 0, g = 0; g = c & 63; f = g; e = f & 31; if (f >>> 0 >= 32) {
                             f = -1 >>> e | 0;
                         }
                         else {
@@ -2414,53 +2508,60 @@ var createKEMNativeCaller = (() => {
                         else {
                             c = b >>> d | 0;
                             a = ((1 << d) - 1 & b) << 32 - d | a >>> d;
-                        } a = a | g; T = c | f; return a; }
-                        function ba(a, b, c, d) { var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0; k = d >>> 3 | 0; a: while (1) {
+                        } a = a | g; R = c | f; return a; }
+                        function Z(a, b, c, d) { var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0; k = d >>> 3 | 0; a: while (1) {
                             if (b) {
-                                Fa(c);
-                                g = 0;
+                                da(c);
+                                h = 0;
                                 while (1)
-                                    if ((g | 0) == (k | 0)) {
+                                    if ((h | 0) == (k | 0)) {
                                         b = b - 1 | 0;
                                         a = a + d | 0;
                                         continue a;
                                     }
                                     else {
-                                        e = g << 3;
+                                        e = h << 3;
                                         l = e + a | 0;
                                         e = c + e | 0;
                                         m = v[e >> 2];
                                         i = v[e + 4 >> 2];
-                                        f = 0;
+                                        g = 0;
                                         e = 0;
                                         while (1) {
-                                            if ((f | 0) != 8 | e) {
-                                                j = f << 3;
-                                                h = j & 31;
-                                                t[f + l | 0] = (j & 63) >>> 0 >= 32 ? i >>> h | 0 : ((1 << h) - 1 & i) << 32 - h | m >>> h;
-                                                f = f + 1 | 0;
-                                                e = f ? e : e + 1 | 0;
+                                            if (!(!e & (g | 0) == 8)) {
+                                                j = g << 3;
+                                                f = j & 31;
+                                                n = g + l | 0;
+                                                if ((j & 63) >>> 0 >= 32) {
+                                                    f = i >>> f | 0;
+                                                }
+                                                else {
+                                                    f = ((1 << f) - 1 & i) << 32 - f | m >>> f;
+                                                }
+                                                t[n | 0] = f;
+                                                g = g + 1 | 0;
+                                                e = g ? e : e + 1 | 0;
                                                 continue;
                                             }
                                             break;
                                         }
-                                        g = g + 1 | 0;
+                                        h = h + 1 | 0;
                                         continue;
                                     }
                             }
                             break;
                         } }
-                        function ia(a, b, c) { var d = 0, e = 0, f = 0, g = 0; d = R - 192 | 0; R = d; qa(d, 192, b, c); b = 0; while (1) {
-                            if ((b | 0) != 64) {
-                                c = B(b, 3) + d | 0;
-                                c = w[c + 2 | 0] << 16 | (w[c | 0] | w[c + 1 | 0] << 8);
-                                e = ((c & 2396745) + (c >>> 1 & 2396745) | 0) + (c >>> 2 & 2396745) | 0;
-                                g = b << 2;
+                        function za(a, b, c) { var d = 0, e = 0, f = 0, g = 0; d = P - 128 | 0; P = d; pa(d, 128, b, c); b = 0; while (1) {
+                            if ((b | 0) != 32) {
+                                c = (b << 2) + d | 0;
+                                c = w[c | 0] | w[c + 1 | 0] << 8 | (w[c + 2 | 0] << 16 | w[c + 3 | 0] << 24);
+                                e = (c >>> 1 & 1431655765) + (c & 1431655765) | 0;
+                                g = b << 3;
                                 c = 0;
                                 while (1) {
-                                    if ((c | 0) != 4) {
-                                        f = B(c, 6);
-                                        u[(c + g << 1) + a >> 1] = (e >>> f & 7) - (e >>> f + 3 & 7);
+                                    if ((c | 0) != 8) {
+                                        f = c << 2;
+                                        u[(c + g << 1) + a >> 1] = (e >>> f & 3) - (e >>> (f | 2) & 3);
                                         c = c + 1 | 0;
                                         continue;
                                     }
@@ -2470,18 +2571,18 @@ var createKEMNativeCaller = (() => {
                                 continue;
                             }
                             break;
-                        } R = d + 192 | 0; }
-                        function Aa(a, b, c) { var d = 0, e = 0, f = 0, g = 0; d = R - 128 | 0; R = d; qa(d, 128, b, c); b = 0; while (1) {
-                            if ((b | 0) != 32) {
-                                c = (b << 2) + d | 0;
-                                c = w[c | 0] | w[c + 1 | 0] << 8 | (w[c + 2 | 0] << 16 | w[c + 3 | 0] << 24);
-                                e = (c & 1431655765) + (c >>> 1 & 1431655765) | 0;
-                                g = b << 3;
+                        } P = d + 128 | 0; }
+                        function fa(a, b, c) { var d = 0, e = 0, f = 0, g = 0; d = P - 192 | 0; P = d; pa(d, 192, b, c); b = 0; while (1) {
+                            if ((b | 0) != 64) {
+                                c = B(b, 3) + d | 0;
+                                c = w[c | 0] | w[c + 1 | 0] << 8 | w[c + 2 | 0] << 16;
+                                e = ((c >>> 1 & 2396745) + (c & 2396745) | 0) + (c >>> 2 & 2396745) | 0;
+                                g = b << 2;
                                 c = 0;
                                 while (1) {
-                                    if ((c | 0) != 8) {
-                                        f = c << 2;
-                                        u[(c + g << 1) + a >> 1] = (e >>> f & 3) - (e >>> (f | 2) & 3);
+                                    if ((c | 0) != 4) {
+                                        f = B(c, 6);
+                                        u[(c + g << 1) + a >> 1] = (e >>> f & 7) - (e >>> f + 3 & 7);
                                         c = c + 1 | 0;
                                         continue;
                                     }
@@ -2491,8 +2592,8 @@ var createKEMNativeCaller = (() => {
                                 continue;
                             }
                             break;
-                        } R = d + 128 | 0; }
-                        function Da(a, b, c, d) { var e = 0, f = 0, g = 0, h = 0, i = 0; while (1) {
+                        } P = d + 192 | 0; }
+                        function Ea(a, b, c, d) { var e = 0, f = 0, g = 0, h = 0, i = 0; while (1) {
                             a: {
                                 if (b >>> 0 <= f >>> 0) {
                                     break a;
@@ -2523,7 +2624,7 @@ var createKEMNativeCaller = (() => {
                             }
                             break;
                         } return f; }
-                        function ya(a, b) { var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0; while (1) {
+                        function xa(a, b) { var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0; while (1) {
                             if ((f | 0) != 2) {
                                 h = B(f, 384) + a | 0;
                                 i = (f << 9) + b | 0;
@@ -2549,27 +2650,7 @@ var createKEMNativeCaller = (() => {
                             }
                             break;
                         } }
-                        function ga(a, b, c, d) { var e = 0, f = 0, g = 0; e = R - 160 | 0; R = e; g = e + 8 | 0; f = ha(200); v[g >> 2] = f; if (!f) {
-                            P(111);
-                            L();
-                        } fa(f, 136, c, d, 31); c = (b >>> 0) / 136 | 0; ma(a, c, g); a: {
-                            c = B(c, 136);
-                            d = b - c | 0;
-                            if (!d) {
-                                break a;
-                            }
-                            ma(e + 16 | 0, 1, e + 8 | 0);
-                            b = 0;
-                            while (1) {
-                                if ((b | 0) == (d | 0)) {
-                                    break a;
-                                }
-                                t[(b + c | 0) + a | 0] = w[(e + 16 | 0) + b | 0];
-                                b = b + 1 | 0;
-                                continue;
-                            }
-                        } na(e + 8 | 0); R = e + 160 | 0; }
-                        function xa(a, b) { var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0; while (1) {
+                        function wa(a, b) { var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0; while (1) {
                             if ((d | 0) != 2) {
                                 g = (d << 9) + a | 0;
                                 h = B(d, 384) + b | 0;
@@ -2590,9 +2671,8 @@ var createKEMNativeCaller = (() => {
                             }
                             break;
                         } }
-                        function ta(a) { var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0; while (1) {
-                            if ((c | 0) != 8 | e) {
-                                h = b;
+                        function oa(a) { var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0; while (1) {
+                            if (!(!e & (c | 0) == 8)) {
                                 f = w[a + c | 0];
                                 d = c << 3;
                                 b = d & 31;
@@ -2604,17 +2684,16 @@ var createKEMNativeCaller = (() => {
                                     d = (1 << b) - 1 & f >>> 32 - b;
                                     b = f << b;
                                 }
-                                b = h | b;
-                                g = d | g;
+                                g = b | g;
+                                h = d | h;
                                 c = c + 1 | 0;
                                 e = c ? e : e + 1 | 0;
                                 continue;
                             }
                             break;
-                        } T = g; return b; }
-                        function Oa(a, b, c) { a = a | 0; b = b | 0; c = c | 0; var d = 0, e = 0, f = 0; d = R - 128 | 0; R = d; e = d - -64 | 0; ka(e); $(e, e, 32); $(d + 96 | 0, c, 800); la(d, e, 64); f = c; c = d + 32 | 0; Ca(a, e, f, c); $(c, a, 768); ga(b, 32, d, 64); R = d + 128 | 0; return 0; }
-                        function Ba(a, b, c, d) { var e = 0; e = Z(u[b + 2 >> 1], u[c + 2 >> 1]); u[a >> 1] = e; u[a >> 1] = Z(e, d); u[a >> 1] = Z(u[b >> 1], u[c >> 1]) + x[a >> 1]; u[a + 2 >> 1] = Z(u[b >> 1], u[c + 2 >> 1]); u[a + 2 >> 1] = Z(u[b + 2 >> 1], u[c >> 1]) + x[a + 2 >> 1]; }
-                        function za(a, b, c) { var d = 0, e = 0, f = 0; while (1) {
+                        } R = h; return g; }
+                        function Ba(a, b, c, d) { var e = 0; e = W(u[b + 2 >> 1], u[c + 2 >> 1]); u[a >> 1] = e; u[a >> 1] = W(e, d); u[a >> 1] = W(u[b >> 1], u[c >> 1]) + x[a >> 1]; u[a + 2 >> 1] = W(u[b >> 1], u[c + 2 >> 1]); u[a + 2 >> 1] = W(u[b + 2 >> 1], u[c >> 1]) + x[a + 2 >> 1]; }
+                        function ya(a, b, c) { var d = 0, e = 0, f = 0; while (1) {
                             if ((e | 0) != 64) {
                                 d = e << 3;
                                 f = u[(e << 1) + 1440 >> 1];
@@ -2626,253 +2705,145 @@ var createKEMNativeCaller = (() => {
                             }
                             break;
                         } }
-                        function _(a) { var b = 0, c = 0; b = v[392]; c = a + 3 & -4; a = b + c | 0; a: {
-                            if (a >>> 0 <= b >>> 0 ? c : 0) {
-                                break a;
-                            }
-                            if (a >>> 0 > V() << 16 >>> 0) {
-                                if (!(Q(a | 0) | 0)) {
+                        function X(a) { var b = 0, c = 0; b = v[392]; c = a + 7 & -8; a = b + c | 0; a: {
+                            if (!(a >>> 0 <= b >>> 0 ? c : 0)) {
+                                if (a >>> 0 <= T() << 16 >>> 0) {
+                                    break a;
+                                }
+                                if (O(a | 0) | 0) {
                                     break a;
                                 }
                             }
-                            v[392] = a;
-                            return b;
-                        } v[1017] = 48; return -1; }
-                        function $(a, b, c) { var d = 0, e = 0; d = R - 352 | 0; R = d; e = d + 144 | 0; fa(e, 136, b, c, 6); ba(d, 1, e, 136); b = 0; while (1) {
+                            v[1017] = 48;
+                            return -1;
+                        } v[392] = a; return b; }
+                        function la(a, b) { var c = 0, d = 0; c = P - 352 | 0; P = c; d = c + 144 | 0; $(d, 136, b, 800, 6); Z(c, 1, d, 136); b = 0; while (1) {
                             if ((b | 0) == 32) {
-                                R = d + 352 | 0;
+                                P = c + 352 | 0;
                             }
                             else {
-                                t[a + b | 0] = w[b + d | 0];
+                                t[a + b | 0] = w[b + c | 0];
                                 b = b + 1 | 0;
                                 continue;
                             }
                             break;
                         } }
-                        function la(a, b, c) { var d = 0, e = 0; d = R - 288 | 0; R = d; e = d + 80 | 0; fa(e, 72, b, c, 6); ba(d, 1, e, 72); b = 0; while (1) {
-                            if ((b | 0) == 64) {
-                                R = d + 288 | 0;
+                        function ja(a, b, c) { var d = 0, e = 0; d = P - 288 | 0; P = d; e = d + 80 | 0; $(e, 72, b, c, 6); Z(d, 1, e, 72); c = 0; while (1) {
+                            if ((c | 0) == 64) {
+                                P = d + 288 | 0;
                             }
                             else {
-                                t[a + b | 0] = w[b + d | 0];
-                                b = b + 1 | 0;
+                                t[a + c | 0] = w[c + d | 0];
+                                c = c + 1 | 0;
                                 continue;
                             }
                             break;
                         } }
-                        function ka(a) { var b = 0, c = 0, d = 0; while (1) {
-                            if ((c | 0) != 32) {
-                                b = R - 16 | 0;
-                                R = b;
-                                t[b + 15 | 0] = 0;
-                                d = O(1572, b + 15 | 0, 0) | 0;
-                                R = b + 16 | 0;
-                                t[a + c | 0] = d;
-                                c = c + 1 | 0;
+                        function ia(a, b) { var c = 0, d = 0, e = 0; while (1) {
+                            if ((b | 0) != (d | 0)) {
+                                c = P - 16 | 0;
+                                P = c;
+                                t[c + 15 | 0] = 0;
+                                e = N(1572, c + 15 | 0, 0) | 0;
+                                P = c + 16 | 0;
+                                t[a + d | 0] = e;
+                                d = d + 1 | 0;
                                 continue;
                             }
                             break;
                         } }
-                        function ea(a, b, c) { var d = 0, e = 0; while (1) {
+                        function ca(a, b, c) { var d = 0, e = 0; while (1) {
                             if ((d | 0) != 256) {
                                 e = d << 1;
-                                u[e + a >> 1] = x[b + e >> 1] + x[c + e >> 1];
+                                u[e + a >> 1] = x[c + e >> 1] + x[b + e >> 1];
                                 d = d + 1 | 0;
                                 continue;
                             }
                             break;
                         } }
-                        function aa(a) { var b = 0, c = 0; while (1) {
+                        function Y(a) { var b = 0, c = 0; while (1) {
                             if ((b | 0) != 256) {
                                 c = (b << 1) + a | 0;
-                                u[c >> 1] = sa(u[c >> 1]);
+                                u[c >> 1] = ra(u[c >> 1]);
                                 b = b + 1 | 0;
                                 continue;
                             }
                             break;
                         } }
-                        function va(a, b, c) { var d = 0, e = 0; while (1) {
+                        function ta(a, b, c) { var d = 0, e = 0; while (1) {
                             if ((d | 0) != 2) {
                                 e = d << 9;
-                                ea(e + a | 0, b + e | 0, c + e | 0);
+                                ca(e + a | 0, b + e | 0, c + e | 0);
                                 d = d + 1 | 0;
                                 continue;
                             }
                             break;
                         } }
-                        function ca(a, b, c) { var d = 0; d = R - 512 | 0; R = d; za(a, b, c); za(d, b + 512 | 0, c + 512 | 0); ea(a, a, d); aa(a); R = d + 512 | 0; }
-                        function wa(a) { var b = 0; while (1) {
+                        function aa(a, b, c) { var d = 0; d = P - 512 | 0; P = d; ya(a, b, c); ya(d, b + 512 | 0, c + 512 | 0); ca(a, a, d); Y(a); P = d + 512 | 0; }
+                        function Oa(a, b, c) { a = a | 0; b = b | 0; c = c | 0; var d = 0; d = P - 32 | 0; P = d; ia(d, 32); ha(a, b, c, d); P = d + 32 | 0; return 0; }
+                        function Ra(a, b) { a = a | 0; b = b | 0; var c = 0; c = P + -64 | 0; P = c; ia(c, 64); Ca(a, b, c); P = c - -64 | 0; return 0; }
+                        function va(a) { var b = 0; while (1) {
                             if ((b | 0) != 2) {
-                                aa((b << 9) + a | 0);
+                                Y((b << 9) + a | 0);
                                 b = b + 1 | 0;
                                 continue;
                             }
                             break;
                         } }
-                        function sa(a) { return a - (B(B(a, 20159) + 33554432 >> 26, 218169344) >>> 16 | 0) << 16 >> 16; }
-                        function Va(a) { var b = 0; b = a & 31; a = 0 - a & 31; return (-1 >>> b & -2) << b | (-1 << a & -2) >>> a; }
-                        function Ua() { var a = 0; a = R - 16 | 0; R = a; t[a + 15 | 0] = 0; O(1608, a + 15 | 0, 0) | 0; R = a + 16 | 0; }
-                        function ua(a) { return B(B(a, -218038272) >> 16, -3329) + a >> 16; }
-                        function Ja(a) { a = a | 0; S = a; if (y[S >> 2] > y[S + 4 >> 2]) {
-                            L();
+                        function ra(a) { return a - (B(B(a, 20159) + 33554432 >> 26, 218169344) >>> 16 | 0) << 16 >> 16; }
+                        function Ya(a) { var b = 0; b = a & 31; a = 0 - a & 31; return (-1 >>> b & -2) << b | (-1 << a & -2) >>> a; }
+                        function Wa() { var a = 0; a = P - 16 | 0; P = a; t[a + 15 | 0] = 0; N(1608, a + 15 | 0, 0) | 0; P = a + 16 | 0; }
+                        function sa(a) { return B(B(a, -218038272) >> 16, -3329) + a >> 16; }
+                        function Na(a, b, c) { a = a | 0; b = b | 0; c = c | 0; Da(a, b, c); return 0; }
+                        function Ma(a, b, c) { a = a | 0; b = b | 0; c = c | 0; Ca(a, b, c); return 0; }
+                        function Xa(a) { if (a) {
+                            return 31 - E(a - 1 ^ a) | 0;
+                        } return 32; }
+                        function Ia(a) { a = a | 0; Q = a; if (y[Q >> 2] > y[Q + 4 >> 2]) {
+                            r();
                         } }
-                        function Ia(a) { a = a | 0; S = a; if (y[S >> 2] > y[S + 4 >> 2]) {
-                            L();
+                        function Ha(a) { a = a | 0; Q = a; if (y[Q >> 2] > y[Q + 4 >> 2]) {
+                            r();
                         } }
-                        function Ka(a) { a = a | 0; a = R - a & -16; R = a; return a | 0; }
-                        function Ha() { if (y[S >> 2] > y[S + 4 >> 2]) {
-                            L();
+                        function Ka(a) { a = a | 0; a = P - a & -16; P = a; return a | 0; }
+                        function Ga() { if (y[Q >> 2] > y[Q + 4 >> 2]) {
+                            r();
                         } }
-                        function pa(a, b, c) { ba(a, b, v[c >> 2], 168); }
-                        function ma(a, b, c) { ba(a, b, v[c >> 2], 136); }
-                        function Z(a, b) { return ua(B(a, b)); }
-                        function na(a) { oa(v[a >> 2]); }
-                        function Sa() { return 1632; }
-                        function Ta() { return 800; }
-                        function Ra() { return 768; }
-                        function Ma() { return R | 0; }
-                        function La(a) { a = a | 0; R = a; }
-                        function Qa() { return 32; }
-                        function Ga() { }
+                        function na(a, b, c) { Z(a, b, v[c >> 2], 168); }
+                        function ma(a, b, c) { Z(a, b, v[c >> 2], 136); }
+                        function W(a, b) { return sa(B(a, b)); }
+                        function ua(a) { ea(v[a >> 2]); }
+                        function Ua() { return 1632; }
+                        function Va() { return 800; }
+                        function Ta() { return 768; }
+                        function La(a) { a = a | 0; P = a; }
+                        function Ja() { return P | 0; }
+                        function Sa() { return 32; }
+                        function ka() { }
                         // EMSCRIPTEN_END_FUNCS
                         e = w;
-                        p(X);
-                        var U = c([]);
-                        function V() { return s.byteLength / 65536 | 0; }
-                        return { "e": Ga, "f": ha, "g": oa, "h": U, "i": Ua, "j": Ta, "k": Sa, "l": Ra, "m": Qa, "n": Pa, "o": Oa, "p": Na, "q": Ma, "r": La, "s": Ka, "t": Ja, "u": Ha, "v": Ia, "w": Ha };
+                        p(q);
+                        var S = c([]);
+                        function T() { return s.byteLength / 65536 | 0; }
+                        return { e: Object.create(Object.prototype, { grow: {}, buffer: { get: function () { return s; } } }), f: ka, g: _, h: ea, i: S, j: Wa, k: Va, l: Ua, m: Ta, n: Sa, o: Ra, p: Qa, q: Pa, r: Oa, s: Na, t: Ma, u: La, v: Ka, w: Ja, x: Ia, y: Ga, z: Ha, A: Ga };
                     }
-                    return W(Y);
+                    return U(V);
                 }
                 // EMSCRIPTEN_END_ASM
-                )(asmLibraryArg);
-            }, instantiate: function (binary, info) { return { then: function (ok) { var module = new WebAssembly.Module(binary); ok({ "instance": new WebAssembly.Instance(module) }); } }; }, RuntimeError: Error };
+                )(info);
+            }, instantiate: function (binary, info) { return { then: function (ok) { var module = new WebAssembly.Module(binary); ok({ instance: new WebAssembly.Instance(module, info) }); } }; }, RuntimeError: Error };
         wasmBinary = [];
-        if (typeof WebAssembly != "object") {
-            abort("no native wasm support detected");
-        }
         var wasmMemory;
         var ABORT = false;
         var EXITSTATUS;
-        function assert(condition, text) { if (!condition) {
-            abort(text);
-        } }
-        function getCFunc(ident) { var func = Module["_" + ident]; return func; }
-        function ccall(ident, returnType, argTypes, args, opts) { var toC = { "string": function (str) { var ret = 0; if (str !== null && str !== undefined && str !== 0) {
-                var len = (str.length << 2) + 1;
-                ret = stackAlloc(len);
-                stringToUTF8(str, ret, len);
-            } return ret; }, "array": function (arr) { var ret = stackAlloc(arr.length); writeArrayToMemory(arr, ret); return ret; } }; function convertReturnValue(ret) { if (returnType === "string")
-            return UTF8ToString(ret); if (returnType === "boolean")
-            return Boolean(ret); return ret; } var func = getCFunc(ident); var cArgs = []; var stack = 0; if (args) {
-            for (var i = 0; i < args.length; i++) {
-                var converter = toC[argTypes[i]];
-                if (converter) {
-                    if (stack === 0)
-                        stack = stackSave();
-                    cArgs[i] = converter(args[i]);
-                }
-                else {
-                    cArgs[i] = args[i];
-                }
-            }
-        } var ret = func.apply(null, cArgs); function onDone(ret) { runtimeKeepalivePop(); if (stack !== 0)
-            stackRestore(stack); return convertReturnValue(ret); } runtimeKeepalivePush(); var asyncMode = opts && opts.async; if (Asyncify.currData) {
-            return Asyncify.whenDone().then(onDone);
-        } ret = onDone(ret); if (asyncMode)
-            return Promise.resolve(ret); return ret; }
-        var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : undefined;
-        function UTF8ArrayToString(heap, idx, maxBytesToRead) { var endIdx = idx + maxBytesToRead; var endPtr = idx; while (heap[endPtr] && !(endPtr >= endIdx))
-            ++endPtr; if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
-            return UTF8Decoder.decode(heap.subarray(idx, endPtr));
-        }
-        else {
-            var str = "";
-            while (idx < endPtr) {
-                var u0 = heap[idx++];
-                if (!(u0 & 128)) {
-                    str += String.fromCharCode(u0);
-                    continue;
-                }
-                var u1 = heap[idx++] & 63;
-                if ((u0 & 224) == 192) {
-                    str += String.fromCharCode((u0 & 31) << 6 | u1);
-                    continue;
-                }
-                var u2 = heap[idx++] & 63;
-                if ((u0 & 240) == 224) {
-                    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
-                }
-                else {
-                    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
-                }
-                if (u0 < 65536) {
-                    str += String.fromCharCode(u0);
-                }
-                else {
-                    var ch = u0 - 65536;
-                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
-                }
-            }
-        } return str; }
-        function UTF8ToString(ptr, maxBytesToRead) { return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : ""; }
-        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) { if (!(maxBytesToWrite > 0))
-            return 0; var startIdx = outIdx; var endIdx = outIdx + maxBytesToWrite - 1; for (var i = 0; i < str.length; ++i) {
-            var u = str.charCodeAt(i);
-            if (u >= 55296 && u <= 57343) {
-                var u1 = str.charCodeAt(++i);
-                u = 65536 + ((u & 1023) << 10) | u1 & 1023;
-            }
-            if (u <= 127) {
-                if (outIdx >= endIdx)
-                    break;
-                heap[outIdx++] = u;
-            }
-            else if (u <= 2047) {
-                if (outIdx + 1 >= endIdx)
-                    break;
-                heap[outIdx++] = 192 | u >> 6;
-                heap[outIdx++] = 128 | u & 63;
-            }
-            else if (u <= 65535) {
-                if (outIdx + 2 >= endIdx)
-                    break;
-                heap[outIdx++] = 224 | u >> 12;
-                heap[outIdx++] = 128 | u >> 6 & 63;
-                heap[outIdx++] = 128 | u & 63;
-            }
-            else {
-                if (outIdx + 3 >= endIdx)
-                    break;
-                heap[outIdx++] = 240 | u >> 18;
-                heap[outIdx++] = 128 | u >> 12 & 63;
-                heap[outIdx++] = 128 | u >> 6 & 63;
-                heap[outIdx++] = 128 | u & 63;
-            }
-        } heap[outIdx] = 0; return outIdx - startIdx; }
-        function stringToUTF8(str, outPtr, maxBytesToWrite) { return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite); }
-        function writeArrayToMemory(array, buffer) { HEAP8.set(array, buffer); }
-        var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
-        function updateGlobalBufferAndViews(buf) { buffer = buf; Module["HEAP8"] = HEAP8 = new Int8Array(buf); Module["HEAP16"] = HEAP16 = new Int16Array(buf); Module["HEAP32"] = HEAP32 = new Int32Array(buf); Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf); Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf); Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf); Module["HEAPF32"] = HEAPF32 = new Float32Array(buf); Module["HEAPF64"] = HEAPF64 = new Float64Array(buf); }
-        var INITIAL_MEMORY = 16777216;
-        {
-            wasmMemory = new WebAssembly.Memory({ "initial": INITIAL_MEMORY / 65536, "maximum": INITIAL_MEMORY / 65536 });
-        }
-        if (wasmMemory) {
-            buffer = wasmMemory.buffer;
-        }
-        INITIAL_MEMORY = buffer.byteLength;
-        updateGlobalBufferAndViews(buffer);
-        var wasmTable;
+        var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
+        function updateMemoryViews() { var b = wasmMemory.buffer; Module["HEAP8"] = HEAP8 = new Int8Array(b); Module["HEAP16"] = HEAP16 = new Int16Array(b); Module["HEAPU8"] = HEAPU8 = new Uint8Array(b); Module["HEAPU16"] = HEAPU16 = new Uint16Array(b); Module["HEAP32"] = HEAP32 = new Int32Array(b); Module["HEAPU32"] = HEAPU32 = new Uint32Array(b); Module["HEAPF32"] = HEAPF32 = new Float32Array(b); Module["HEAPF64"] = HEAPF64 = new Float64Array(b); }
         var __ATPRERUN__ = [];
         var __ATINIT__ = [];
         var __ATPOSTRUN__ = [];
         var runtimeInitialized = false;
-        var runtimeExited = false;
-        var runtimeKeepaliveCounter = 0;
-        function keepRuntimeAlive() { return noExitRuntime || runtimeKeepaliveCounter > 0; }
         function preRun() { callRuntimeCallbacks(__ATPRERUN__); }
         function initRuntime() { runtimeInitialized = true; callRuntimeCallbacks(__ATINIT__); }
-        function exitRuntime() { runtimeExited = true; }
         function postRun() { callRuntimeCallbacks(__ATPOSTRUN__); }
         function addOnInit(cb) { __ATINIT__.unshift(cb); }
         var runDependencies = 0;
@@ -2890,64 +2861,22 @@ var createKEMNativeCaller = (() => {
                 callback();
             }
         } }
-        Module["preloadedImages"] = {};
-        Module["preloadedAudios"] = {};
-        function abort(what) { what = "Aborted(" + what + ")"; err(what); ABORT = true; EXITSTATUS = 1; what += ". Build with -s ASSERTIONS=1 for more info."; var e = new WebAssembly.RuntimeError(what); readyPromiseReject(e); throw e; }
-        var dataURIPrefix = "data:application/octet-stream;base64,";
-        function isDataURI(filename) { return filename.startsWith(dataURIPrefix); }
-        function isFileURI(filename) { return filename.startsWith("file://"); }
+        function abort(what) { what = "Aborted(" + what + ")"; err(what); ABORT = true; EXITSTATUS = 1; what += ". Build with -sASSERTIONS for more info."; var e = new WebAssembly.RuntimeError(what); readyPromiseReject(e); throw e; }
+        var isFileURI = filename => filename.startsWith("file://");
+        function findWasmBinary() { var f = "<<< WASM_BINARY_FILE >>>"; return f; }
         var wasmBinaryFile;
-        wasmBinaryFile = "<<< WASM_BINARY_FILE >>>";
-        if (!isDataURI(wasmBinaryFile)) {
-            wasmBinaryFile = locateFile(wasmBinaryFile);
-        }
-        function getBinary(file) { try {
-            if (file == wasmBinaryFile && wasmBinary) {
-                return new Uint8Array(wasmBinary);
-            }
-            var binary = tryParseAsDataURI(file);
-            if (binary) {
-                return binary;
-            }
-            if (readBinary) {
-                return readBinary(file);
-            }
-            else {
-                throw "both async and sync fetching of the wasm failed";
-            }
-        }
-        catch (err) {
-            abort(err);
-        } }
-        function getBinaryPromise() { if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
-            if (typeof fetch == "function" && !isFileURI(wasmBinaryFile)) {
-                return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function (response) { if (!response["ok"]) {
-                    throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
-                } return response["arrayBuffer"](); }).catch(function () { return getBinary(wasmBinaryFile); });
-            }
-            else {
-                if (readAsync) {
-                    return new Promise(function (resolve, reject) { readAsync(wasmBinaryFile, function (response) { resolve(new Uint8Array(response)); }, reject); });
-                }
-            }
-        } return Promise.resolve().then(function () { return getBinary(wasmBinaryFile); }); }
-        function createWasm() { var info = { "a": asmLibraryArg }; function receiveInstance(instance, module) { var exports = instance.exports; exports = Asyncify.instrumentWasmExports(exports); Module["asm"] = exports; wasmTable = Module["asm"]["h"]; addOnInit(Module["asm"]["e"]); removeRunDependency("wasm-instantiate"); } addRunDependency("wasm-instantiate"); function receiveInstantiationResult(result) { receiveInstance(result["instance"]); } function instantiateArrayBuffer(receiver) { return getBinaryPromise().then(function (binary) { return WebAssembly.instantiate(binary, info); }).then(function (instance) { return instance; }).then(receiver, function (reason) { err("failed to asynchronously prepare wasm: " + reason); abort(reason); }); } function instantiateAsync() { if (!wasmBinary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch == "function") {
-            return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function (response) { var result = WebAssembly.instantiateStreaming(response, info); return result.then(receiveInstantiationResult, function (reason) { err("wasm streaming compile failed: " + reason); err("falling back to ArrayBuffer instantiation"); return instantiateArrayBuffer(receiveInstantiationResult); }); });
-        }
-        else {
-            return instantiateArrayBuffer(receiveInstantiationResult);
-        } } if (Module["instantiateWasm"]) {
-            try {
-                var exports = Module["instantiateWasm"](info, receiveInstance);
-                exports = Asyncify.instrumentWasmExports(exports);
-                return exports;
-            }
-            catch (e) {
-                err("Module.instantiateWasm callback failed with error: " + e);
-                return false;
-            }
-        } instantiateAsync().catch(readyPromiseReject); return {}; }
-        var ASM_CONSTS = { 1572: function () { return Module.getRandomValue(); }, 1608: function () { if (Module.getRandomValue === undefined) {
+        function getBinarySync(file) { if (file == wasmBinaryFile && wasmBinary) {
+            return new Uint8Array(wasmBinary);
+        } if (readBinary) {
+            return readBinary(file);
+        } throw "both async and sync fetching of the wasm failed"; }
+        function getBinaryPromise(binaryFile) { return Promise.resolve().then(() => getBinarySync(binaryFile)); }
+        function instantiateArrayBuffer(binaryFile, imports, receiver) { return getBinaryPromise(binaryFile).then(binary => WebAssembly.instantiate(binary, imports)).then(receiver, reason => { err(`failed to asynchronously prepare wasm: ${reason}`); abort(reason); }); }
+        function instantiateAsync(binary, binaryFile, imports, callback) { return instantiateArrayBuffer(binaryFile, imports, callback); }
+        function getWasmImports() { return { a: wasmImports }; }
+        function createWasm() { var info = getWasmImports(); function receiveInstance(instance, module) { wasmExports = instance.exports; wasmExports = Asyncify.instrumentWasmExports(wasmExports); wasmMemory = wasmExports["e"]; updateMemoryViews(); addOnInit(wasmExports["f"]); removeRunDependency("wasm-instantiate"); return wasmExports; } addRunDependency("wasm-instantiate"); function receiveInstantiationResult(result) { receiveInstance(result["instance"]); } if (!wasmBinaryFile)
+            wasmBinaryFile = findWasmBinary(); instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject); return {}; }
+        var ASM_CONSTS = { 1572: () => Module.getRandomValue(), 1608: () => { if (Module.getRandomValue === undefined) {
                 try {
                     var window_ = "object" === typeof window ? window : self;
                     var crypto_ = typeof window_.crypto !== "undefined" ? window_.crypto : window_.msCrypto;
@@ -2967,97 +2896,128 @@ var createKEMNativeCaller = (() => {
                     }
                 }
             } } };
-        function __asyncjs__aes_ctr_subtle_crypto(output, output_len, input, nblocks, iv, sk, sk_len) { return Asyncify.handleAsync(async () => { const inputJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, input, nblocks << 4)); const skJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, sk, sk_len)); const ivJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, iv, 16)); const key = await Module.subtleCrypto.importKey("raw", skJs.buffer, "AES-CTR", false, ["encrypt"]); const outputJs = await Module.subtleCrypto.encrypt({ name: "AES-CTR", counter: ivJs.buffer, length: 32 }, key, inputJs.buffer); writeArrayToMemory(new Uint8Array(outputJs).slice(0, output_len), output); }); }
-        function __asyncjs__sha256_subtle_crypto(output, input, inlen) { return Asyncify.handleAsync(async () => { const inputJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, input, inlen)).buffer; const outputJs = await Module.subtleCrypto.digest("SHA-256", inputJs); writeArrayToMemory(new Uint8Array(outputJs), output); }); }
-        function __asyncjs__sha384_subtle_crypto(output, input, inlen) { return Asyncify.handleAsync(async () => { const inputJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, input, inlen)).buffer; const outputJs = await Module.subtleCrypto.digest("SHA-384", inputJs); writeArrayToMemory(new Uint8Array(outputJs), output); }); }
-        function __asyncjs__sha512_subtle_crypto(output, input, inlen) { return Asyncify.handleAsync(async () => { const inputJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, input, inlen)).buffer; const outputJs = await Module.subtleCrypto.digest("SHA-512", inputJs); writeArrayToMemory(new Uint8Array(outputJs), output); }); }
-        function callRuntimeCallbacks(callbacks) { while (callbacks.length > 0) {
-            var callback = callbacks.shift();
-            if (typeof callback == "function") {
-                callback(Module);
+        function ExitStatus(status) { this.name = "ExitStatus"; this.message = `Program terminated with exit(${status})`; this.status = status; }
+        var callRuntimeCallbacks = callbacks => { while (callbacks.length > 0) {
+            callbacks.shift()(Module);
+        } };
+        var stackRestore = val => __emscripten_stack_restore(val);
+        var stackSave = () => _emscripten_stack_get_current();
+        var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder : undefined;
+        var UTF8ArrayToString = (heapOrArray, idx, maxBytesToRead) => { var endIdx = idx + maxBytesToRead; var endPtr = idx; while (heapOrArray[endPtr] && !(endPtr >= endIdx))
+            ++endPtr; if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
+            return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
+        } var str = ""; while (idx < endPtr) {
+            var u0 = heapOrArray[idx++];
+            if (!(u0 & 128)) {
+                str += String.fromCharCode(u0);
                 continue;
             }
-            var func = callback.func;
-            if (typeof func == "number") {
-                if (callback.arg === undefined) {
-                    (function () { dynCall_v.call(null, func); })();
-                }
-                else {
-                    (function (a1) { dynCall_vi.apply(null, [func, a1]); })(callback.arg);
-                }
+            var u1 = heapOrArray[idx++] & 63;
+            if ((u0 & 224) == 192) {
+                str += String.fromCharCode((u0 & 31) << 6 | u1);
+                continue;
+            }
+            var u2 = heapOrArray[idx++] & 63;
+            if ((u0 & 240) == 224) {
+                u0 = (u0 & 15) << 12 | u1 << 6 | u2;
             }
             else {
-                func(callback.arg === undefined ? null : callback.arg);
+                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
             }
-        } }
-        function handleException(e) { if (e instanceof ExitStatus || e == "unwind") {
-            return EXITSTATUS;
-        } quit_(1, e); }
-        var readAsmConstArgsArray = [];
-        function readAsmConstArgs(sigPtr, buf) { readAsmConstArgsArray.length = 0; var ch; buf >>= 2; while (ch = HEAPU8[sigPtr++]) {
-            var readAsmConstArgsDouble = ch < 105;
-            if (readAsmConstArgsDouble && buf & 1)
-                buf++;
-            readAsmConstArgsArray.push(readAsmConstArgsDouble ? HEAPF64[buf++ >> 1] : HEAP32[buf]);
-            ++buf;
-        } return readAsmConstArgsArray; }
-        function _emscripten_asm_const_int(code, sigPtr, argbuf) { var args = readAsmConstArgs(sigPtr, argbuf); return ASM_CONSTS[code].apply(null, args); }
-        function abortOnCannotGrowMemory(requestedSize) { abort("OOM"); }
-        function _emscripten_resize_heap(requestedSize) { var oldSize = HEAPU8.length; requestedSize = requestedSize >>> 0; abortOnCannotGrowMemory(requestedSize); }
-        function _exit(status) { exit(status); }
-        function runAndAbortIfError(func) { try {
+            if (u0 < 65536) {
+                str += String.fromCharCode(u0);
+            }
+            else {
+                var ch = u0 - 65536;
+                str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
+            }
+        } return str; };
+        var UTF8ToString = (ptr, maxBytesToRead) => ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
+        var ___assert_fail = (condition, filename, line, func) => { abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]); };
+        var readEmAsmArgsArray = [];
+        var readEmAsmArgs = (sigPtr, buf) => { readEmAsmArgsArray.length = 0; var ch; while (ch = HEAPU8[sigPtr++]) {
+            var wide = ch != 105;
+            wide &= ch != 112;
+            buf += wide && buf % 8 ? 4 : 0;
+            readEmAsmArgsArray.push(ch == 112 ? HEAPU32[buf >> 2] : ch == 105 ? HEAP32[buf >> 2] : HEAPF64[buf >> 3]);
+            buf += wide ? 8 : 4;
+        } return readEmAsmArgsArray; };
+        var runEmAsmFunction = (code, sigPtr, argbuf) => { var args = readEmAsmArgs(sigPtr, argbuf); return ASM_CONSTS[code](...args); };
+        var _emscripten_asm_const_int = (code, sigPtr, argbuf) => runEmAsmFunction(code, sigPtr, argbuf);
+        var abortOnCannotGrowMemory = requestedSize => { abort("OOM"); };
+        var _emscripten_resize_heap = requestedSize => { var oldSize = HEAPU8.length; requestedSize >>>= 0; abortOnCannotGrowMemory(requestedSize); };
+        var runtimeKeepaliveCounter = 0;
+        var keepRuntimeAlive = () => runtimeKeepaliveCounter > 0;
+        var _proc_exit = code => { EXITSTATUS = code; if (!keepRuntimeAlive()) {
+            ABORT = true;
+        } quit_(code, new ExitStatus(code)); };
+        var exitJS = (status, implicit) => { EXITSTATUS = status; _proc_exit(status); };
+        var _exit = exitJS;
+        var runAndAbortIfError = func => { try {
             return func();
         }
         catch (e) {
             abort(e);
-        } }
-        function callUserCallback(func, synchronous) { if (runtimeExited || ABORT) {
-            return;
-        } if (synchronous) {
-            func();
+        } };
+        var handleException = e => { if (e instanceof ExitStatus || e == "unwind") {
+            return EXITSTATUS;
+        } quit_(1, e); };
+        var maybeExit = () => { if (!keepRuntimeAlive()) {
+            try {
+                _exit(EXITSTATUS);
+            }
+            catch (e) {
+                handleException(e);
+            }
+        } };
+        var callUserCallback = func => { if (ABORT) {
             return;
         } try {
             func();
+            maybeExit();
         }
         catch (e) {
             handleException(e);
-        } }
-        function runtimeKeepalivePush() { runtimeKeepaliveCounter += 1; }
-        function runtimeKeepalivePop() { runtimeKeepaliveCounter -= 1; }
-        var Asyncify = { State: { Normal: 0, Unwinding: 1, Rewinding: 2, Disabled: 3 }, state: 0, StackSize: 4096, currData: null, handleSleepReturnValue: 0, exportCallStack: [], callStackNameToId: {}, callStackIdToName: {}, callStackId: 0, asyncPromiseHandlers: null, sleepCallbacks: [], getCallStackId: function (funcName) { var id = Asyncify.callStackNameToId[funcName]; if (id === undefined) {
-                id = Asyncify.callStackId++;
-                Asyncify.callStackNameToId[funcName] = id;
-                Asyncify.callStackIdToName[id] = funcName;
-            } return id; }, instrumentWasmExports: function (exports) { var ret = {}; for (var x in exports) {
-                (function (x) { var original = exports[x]; if (typeof original == "function") {
-                    ret[x] = function () { Asyncify.exportCallStack.push(x); try {
-                        return original.apply(null, arguments);
+        } };
+        var runtimeKeepalivePush = () => { runtimeKeepaliveCounter += 1; };
+        var runtimeKeepalivePop = () => { runtimeKeepaliveCounter -= 1; };
+        var Asyncify = { instrumentWasmImports(imports) { var importPattern = /^(__asyncjs__.*)$/; for (let [x, original] of Object.entries(imports)) {
+                if (typeof original == "function") {
+                    let isAsyncifyImport = original.isAsync || importPattern.test(x);
+                }
+            } }, instrumentWasmExports(exports) { var ret = {}; for (let [x, original] of Object.entries(exports)) {
+                if (typeof original == "function") {
+                    ret[x] = (...args) => { Asyncify.exportCallStack.push(x); try {
+                        return original(...args);
                     }
                     finally {
                         if (!ABORT) {
                             var y = Asyncify.exportCallStack.pop();
-                            assert(y === x);
                             Asyncify.maybeStopUnwind();
                         }
                     } };
                 }
                 else {
                     ret[x] = original;
-                } })(x);
-            } return ret; }, maybeStopUnwind: function () { if (Asyncify.currData && Asyncify.state === Asyncify.State.Unwinding && Asyncify.exportCallStack.length === 0) {
+                }
+            } return ret; }, State: { Normal: 0, Unwinding: 1, Rewinding: 2, Disabled: 3 }, state: 0, StackSize: 4096, currData: null, handleSleepReturnValue: 0, exportCallStack: [], callStackNameToId: {}, callStackIdToName: {}, callStackId: 0, asyncPromiseHandlers: null, sleepCallbacks: [], getCallStackId(funcName) { var id = Asyncify.callStackNameToId[funcName]; if (id === undefined) {
+                id = Asyncify.callStackId++;
+                Asyncify.callStackNameToId[funcName] = id;
+                Asyncify.callStackIdToName[id] = funcName;
+            } return id; }, maybeStopUnwind() { if (Asyncify.currData && Asyncify.state === Asyncify.State.Unwinding && Asyncify.exportCallStack.length === 0) {
                 Asyncify.state = Asyncify.State.Normal;
-                runAndAbortIfError(Module["_asyncify_stop_unwind"]);
+                runAndAbortIfError(_asyncify_stop_unwind);
                 if (typeof Fibers != "undefined") {
                     Fibers.trampoline();
                 }
-            } }, whenDone: function () { return new Promise((resolve, reject) => { Asyncify.asyncPromiseHandlers = { resolve: resolve, reject: reject }; }); }, allocateData: function () { var ptr = _malloc(12 + Asyncify.StackSize); Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize); Asyncify.setDataRewindFunc(ptr); return ptr; }, setDataHeader: function (ptr, stack, stackSize) { HEAP32[ptr >> 2] = stack; HEAP32[ptr + 4 >> 2] = stack + stackSize; }, setDataRewindFunc: function (ptr) { var bottomOfCallStack = Asyncify.exportCallStack[0]; var rewindId = Asyncify.getCallStackId(bottomOfCallStack); HEAP32[ptr + 8 >> 2] = rewindId; }, getDataRewindFunc: function (ptr) { var id = HEAP32[ptr + 8 >> 2]; var name = Asyncify.callStackIdToName[id]; var func = Module["asm"][name]; return func; }, doRewind: function (ptr) { var start = Asyncify.getDataRewindFunc(ptr); return start(); }, handleSleep: function (startAsync) { if (ABORT)
+            } }, whenDone() { return new Promise((resolve, reject) => { Asyncify.asyncPromiseHandlers = { resolve: resolve, reject: reject }; }); }, allocateData() { var ptr = _malloc(12 + Asyncify.StackSize); Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize); Asyncify.setDataRewindFunc(ptr); return ptr; }, setDataHeader(ptr, stack, stackSize) { HEAPU32[ptr >> 2] = stack; HEAPU32[ptr + 4 >> 2] = stack + stackSize; }, setDataRewindFunc(ptr) { var bottomOfCallStack = Asyncify.exportCallStack[0]; var rewindId = Asyncify.getCallStackId(bottomOfCallStack); HEAP32[ptr + 8 >> 2] = rewindId; }, getDataRewindFuncName(ptr) { var id = HEAP32[ptr + 8 >> 2]; var name = Asyncify.callStackIdToName[id]; return name; }, getDataRewindFunc(name) { var func = wasmExports[name]; return func; }, doRewind(ptr) { var name = Asyncify.getDataRewindFuncName(ptr); var func = Asyncify.getDataRewindFunc(name); return func(); }, handleSleep(startAsync) { if (ABORT)
                 return; if (Asyncify.state === Asyncify.State.Normal) {
                 var reachedCallback = false;
                 var reachedAfterCallback = false;
-                startAsync(handleSleepReturnValue => { if (ABORT)
-                    return; Asyncify.handleSleepReturnValue = handleSleepReturnValue || 0; reachedCallback = true; if (!reachedAfterCallback) {
+                startAsync((handleSleepReturnValue = 0) => { if (ABORT)
+                    return; Asyncify.handleSleepReturnValue = handleSleepReturnValue; reachedCallback = true; if (!reachedAfterCallback) {
                     return;
-                } Asyncify.state = Asyncify.State.Rewinding; runAndAbortIfError(() => Module["_asyncify_start_rewind"](Asyncify.currData)); if (typeof Browser != "undefined" && Browser.mainLoop.func) {
+                } Asyncify.state = Asyncify.State.Rewinding; runAndAbortIfError(() => _asyncify_start_rewind(Asyncify.currData)); if (typeof Browser != "undefined" && Browser.mainLoop.func) {
                     Browser.mainLoop.resume();
                 } var asyncWasmReturnValue, isError = false; try {
                     asyncWasmReturnValue = Asyncify.doRewind(Asyncify.currData);
@@ -3079,94 +3039,129 @@ var createKEMNativeCaller = (() => {
                 if (!reachedCallback) {
                     Asyncify.state = Asyncify.State.Unwinding;
                     Asyncify.currData = Asyncify.allocateData();
-                    runAndAbortIfError(() => Module["_asyncify_start_unwind"](Asyncify.currData));
                     if (typeof Browser != "undefined" && Browser.mainLoop.func) {
                         Browser.mainLoop.pause();
                     }
+                    runAndAbortIfError(() => _asyncify_start_unwind(Asyncify.currData));
                 }
             }
             else if (Asyncify.state === Asyncify.State.Rewinding) {
                 Asyncify.state = Asyncify.State.Normal;
-                runAndAbortIfError(Module["_asyncify_stop_rewind"]);
+                runAndAbortIfError(_asyncify_stop_rewind);
                 _free(Asyncify.currData);
                 Asyncify.currData = null;
-                Asyncify.sleepCallbacks.forEach(func => callUserCallback(func));
+                Asyncify.sleepCallbacks.forEach(callUserCallback);
             }
             else {
-                abort("invalid state: " + Asyncify.state);
-            } return Asyncify.handleSleepReturnValue; }, handleAsync: function (startAsync) { return Asyncify.handleSleep(wakeUp => { startAsync().then(wakeUp); }); } };
-        var ASSERTIONS = false;
-        function intArrayToString(array) { var ret = []; for (var i = 0; i < array.length; i++) {
-            var chr = array[i];
-            if (chr > 255) {
-                if (ASSERTIONS) {
-                    assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
-                }
-                chr &= 255;
+                abort(`invalid state: ${Asyncify.state}`);
+            } return Asyncify.handleSleepReturnValue; }, handleAsync(startAsync) { return Asyncify.handleSleep(wakeUp => { startAsync().then(wakeUp); }); } };
+        var getCFunc = ident => { var func = Module["_" + ident]; return func; };
+        var writeArrayToMemory = (array, buffer) => { HEAP8.set(array, buffer); };
+        var lengthBytesUTF8 = str => { var len = 0; for (var i = 0; i < str.length; ++i) {
+            var c = str.charCodeAt(i);
+            if (c <= 127) {
+                len++;
             }
-            ret.push(String.fromCharCode(chr));
-        } return ret.join(""); }
-        var decodeBase64 = typeof atob == "function" ? atob : function (input) { var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="; var output = ""; var chr1, chr2, chr3; var enc1, enc2, enc3, enc4; var i = 0; input = input.replace(/[^A-Za-z0-9\+\/\=]/g, ""); do {
-            enc1 = keyStr.indexOf(input.charAt(i++));
-            enc2 = keyStr.indexOf(input.charAt(i++));
-            enc3 = keyStr.indexOf(input.charAt(i++));
-            enc4 = keyStr.indexOf(input.charAt(i++));
-            chr1 = enc1 << 2 | enc2 >> 4;
-            chr2 = (enc2 & 15) << 4 | enc3 >> 2;
-            chr3 = (enc3 & 3) << 6 | enc4;
-            output = output + String.fromCharCode(chr1);
-            if (enc3 !== 64) {
-                output = output + String.fromCharCode(chr2);
+            else if (c <= 2047) {
+                len += 2;
             }
-            if (enc4 !== 64) {
-                output = output + String.fromCharCode(chr3);
+            else if (c >= 55296 && c <= 57343) {
+                len += 4;
+                ++i;
             }
-        } while (i < input.length); return output; };
-        function intArrayFromBase64(s) { if (typeof ENVIRONMENT_IS_NODE == "boolean" && ENVIRONMENT_IS_NODE) {
-            var buf = Buffer.from(s, "base64");
-            return new Uint8Array(buf["buffer"], buf["byteOffset"], buf["byteLength"]);
-        } try {
-            var decoded = decodeBase64(s);
-            var bytes = new Uint8Array(decoded.length);
-            for (var i = 0; i < decoded.length; ++i) {
-                bytes[i] = decoded.charCodeAt(i);
+            else {
+                len += 3;
             }
-            return bytes;
-        }
-        catch (_) {
-            throw new Error("Converting base64 string to bytes failed.");
-        } }
-        function tryParseAsDataURI(filename) { if (!isDataURI(filename)) {
-            return;
-        } return intArrayFromBase64(filename.slice(dataURIPrefix.length)); }
-        var asmLibraryArg = { "__asyncjs__aes_ctr_subtle_crypto": __asyncjs__aes_ctr_subtle_crypto, "__asyncjs__sha256_subtle_crypto": __asyncjs__sha256_subtle_crypto, "__asyncjs__sha384_subtle_crypto": __asyncjs__sha384_subtle_crypto, "__asyncjs__sha512_subtle_crypto": __asyncjs__sha512_subtle_crypto, "b": _emscripten_asm_const_int, "d": _emscripten_resize_heap, "c": _exit, "a": wasmMemory };
-        var asm = createWasm();
-        var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function () { return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["e"]).apply(null, arguments); };
-        var _malloc = Module["_malloc"] = function () { return (_malloc = Module["_malloc"] = Module["asm"]["f"]).apply(null, arguments); };
-        var _free = Module["_free"] = function () { return (_free = Module["_free"] = Module["asm"]["g"]).apply(null, arguments); };
-        var _kem_init = Module["_kem_init"] = function () { return (_kem_init = Module["_kem_init"] = Module["asm"]["i"]).apply(null, arguments); };
-        var _kem_public_key_bytes = Module["_kem_public_key_bytes"] = function () { return (_kem_public_key_bytes = Module["_kem_public_key_bytes"] = Module["asm"]["j"]).apply(null, arguments); };
-        var _kem_private_key_bytes = Module["_kem_private_key_bytes"] = function () { return (_kem_private_key_bytes = Module["_kem_private_key_bytes"] = Module["asm"]["k"]).apply(null, arguments); };
-        var _kem_ciphertext_bytes = Module["_kem_ciphertext_bytes"] = function () { return (_kem_ciphertext_bytes = Module["_kem_ciphertext_bytes"] = Module["asm"]["l"]).apply(null, arguments); };
-        var _kem_shared_secret_bytes = Module["_kem_shared_secret_bytes"] = function () { return (_kem_shared_secret_bytes = Module["_kem_shared_secret_bytes"] = Module["asm"]["m"]).apply(null, arguments); };
-        var _kem_keypair = Module["_kem_keypair"] = function () { return (_kem_keypair = Module["_kem_keypair"] = Module["asm"]["n"]).apply(null, arguments); };
-        var _kem_encapsulate = Module["_kem_encapsulate"] = function () { return (_kem_encapsulate = Module["_kem_encapsulate"] = Module["asm"]["o"]).apply(null, arguments); };
-        var _kem_decapsulate = Module["_kem_decapsulate"] = function () { return (_kem_decapsulate = Module["_kem_decapsulate"] = Module["asm"]["p"]).apply(null, arguments); };
-        var stackSave = Module["stackSave"] = function () { return (stackSave = Module["stackSave"] = Module["asm"]["q"]).apply(null, arguments); };
-        var stackRestore = Module["stackRestore"] = function () { return (stackRestore = Module["stackRestore"] = Module["asm"]["r"]).apply(null, arguments); };
-        var stackAlloc = Module["stackAlloc"] = function () { return (stackAlloc = Module["stackAlloc"] = Module["asm"]["s"]).apply(null, arguments); };
-        var _asyncify_start_unwind = Module["_asyncify_start_unwind"] = function () { return (_asyncify_start_unwind = Module["_asyncify_start_unwind"] = Module["asm"]["t"]).apply(null, arguments); };
-        var _asyncify_stop_unwind = Module["_asyncify_stop_unwind"] = function () { return (_asyncify_stop_unwind = Module["_asyncify_stop_unwind"] = Module["asm"]["u"]).apply(null, arguments); };
-        var _asyncify_start_rewind = Module["_asyncify_start_rewind"] = function () { return (_asyncify_start_rewind = Module["_asyncify_start_rewind"] = Module["asm"]["v"]).apply(null, arguments); };
-        var _asyncify_stop_rewind = Module["_asyncify_stop_rewind"] = function () { return (_asyncify_stop_rewind = Module["_asyncify_stop_rewind"] = Module["asm"]["w"]).apply(null, arguments); };
+        } return len; };
+        var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => { if (!(maxBytesToWrite > 0))
+            return 0; var startIdx = outIdx; var endIdx = outIdx + maxBytesToWrite - 1; for (var i = 0; i < str.length; ++i) {
+            var u = str.charCodeAt(i);
+            if (u >= 55296 && u <= 57343) {
+                var u1 = str.charCodeAt(++i);
+                u = 65536 + ((u & 1023) << 10) | u1 & 1023;
+            }
+            if (u <= 127) {
+                if (outIdx >= endIdx)
+                    break;
+                heap[outIdx++] = u;
+            }
+            else if (u <= 2047) {
+                if (outIdx + 1 >= endIdx)
+                    break;
+                heap[outIdx++] = 192 | u >> 6;
+                heap[outIdx++] = 128 | u & 63;
+            }
+            else if (u <= 65535) {
+                if (outIdx + 2 >= endIdx)
+                    break;
+                heap[outIdx++] = 224 | u >> 12;
+                heap[outIdx++] = 128 | u >> 6 & 63;
+                heap[outIdx++] = 128 | u & 63;
+            }
+            else {
+                if (outIdx + 3 >= endIdx)
+                    break;
+                heap[outIdx++] = 240 | u >> 18;
+                heap[outIdx++] = 128 | u >> 12 & 63;
+                heap[outIdx++] = 128 | u >> 6 & 63;
+                heap[outIdx++] = 128 | u & 63;
+            }
+        } heap[outIdx] = 0; return outIdx - startIdx; };
+        var stringToUTF8 = (str, outPtr, maxBytesToWrite) => stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
+        var stackAlloc = sz => __emscripten_stack_alloc(sz);
+        var stringToUTF8OnStack = str => { var size = lengthBytesUTF8(str) + 1; var ret = stackAlloc(size); stringToUTF8(str, ret, size); return ret; };
+        var ccall = (ident, returnType, argTypes, args, opts) => { var toC = { string: str => { var ret = 0; if (str !== null && str !== undefined && str !== 0) {
+                ret = stringToUTF8OnStack(str);
+            } return ret; }, array: arr => { var ret = stackAlloc(arr.length); writeArrayToMemory(arr, ret); return ret; } }; function convertReturnValue(ret) { if (returnType === "string") {
+            return UTF8ToString(ret);
+        } if (returnType === "boolean")
+            return Boolean(ret); return ret; } var func = getCFunc(ident); var cArgs = []; var stack = 0; if (args) {
+            for (var i = 0; i < args.length; i++) {
+                var converter = toC[argTypes[i]];
+                if (converter) {
+                    if (stack === 0)
+                        stack = stackSave();
+                    cArgs[i] = converter(args[i]);
+                }
+                else {
+                    cArgs[i] = args[i];
+                }
+            }
+        } var previousAsync = Asyncify.currData; var ret = func(...cArgs); function onDone(ret) { runtimeKeepalivePop(); if (stack !== 0)
+            stackRestore(stack); return convertReturnValue(ret); } var asyncMode = opts?.async; runtimeKeepalivePush(); if (Asyncify.currData != previousAsync) {
+            return Asyncify.whenDone().then(onDone);
+        } ret = onDone(ret); if (asyncMode)
+            return Promise.resolve(ret); return ret; };
+        var wasmImports = { d: ___assert_fail, b: _emscripten_asm_const_int, c: _emscripten_resize_heap, a: _exit };
+        var wasmExports = createWasm();
+        var ___wasm_call_ctors = () => (___wasm_call_ctors = wasmExports["f"])();
+        var _malloc = Module["_malloc"] = a0 => (_malloc = Module["_malloc"] = wasmExports["g"])(a0);
+        var _free = Module["_free"] = a0 => (_free = Module["_free"] = wasmExports["h"])(a0);
+        var _kem_init = Module["_kem_init"] = () => (_kem_init = Module["_kem_init"] = wasmExports["j"])();
+        var _kem_public_key_bytes = Module["_kem_public_key_bytes"] = () => (_kem_public_key_bytes = Module["_kem_public_key_bytes"] = wasmExports["k"])();
+        var _kem_private_key_bytes = Module["_kem_private_key_bytes"] = () => (_kem_private_key_bytes = Module["_kem_private_key_bytes"] = wasmExports["l"])();
+        var _kem_ciphertext_bytes = Module["_kem_ciphertext_bytes"] = () => (_kem_ciphertext_bytes = Module["_kem_ciphertext_bytes"] = wasmExports["m"])();
+        var _kem_shared_secret_bytes = Module["_kem_shared_secret_bytes"] = () => (_kem_shared_secret_bytes = Module["_kem_shared_secret_bytes"] = wasmExports["n"])();
+        var _kem_keypair = Module["_kem_keypair"] = (a0, a1) => (_kem_keypair = Module["_kem_keypair"] = wasmExports["o"])(a0, a1);
+        var _kem_encapsulate = Module["_kem_encapsulate"] = (a0, a1, a2) => (_kem_encapsulate = Module["_kem_encapsulate"] = wasmExports["p"])(a0, a1, a2);
+        var _kem_decapsulate = Module["_kem_decapsulate"] = (a0, a1, a2) => (_kem_decapsulate = Module["_kem_decapsulate"] = wasmExports["q"])(a0, a1, a2);
+        var _kem_encapsulate_internal = Module["_kem_encapsulate_internal"] = (a0, a1, a2) => (_kem_encapsulate_internal = Module["_kem_encapsulate_internal"] = wasmExports["r"])(a0, a1, a2);
+        var _kem_decapsulate_internal = Module["_kem_decapsulate_internal"] = (a0, a1, a2) => (_kem_decapsulate_internal = Module["_kem_decapsulate_internal"] = wasmExports["s"])(a0, a1, a2);
+        var _kem_keypair_seeded = Module["_kem_keypair_seeded"] = (a0, a1, a2) => (_kem_keypair_seeded = Module["_kem_keypair_seeded"] = wasmExports["t"])(a0, a1, a2);
+        var __emscripten_stack_restore = a0 => (__emscripten_stack_restore = wasmExports["u"])(a0);
+        var __emscripten_stack_alloc = a0 => (__emscripten_stack_alloc = wasmExports["v"])(a0);
+        var _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports["w"])();
+        var _asyncify_start_unwind = a0 => (_asyncify_start_unwind = wasmExports["x"])(a0);
+        var _asyncify_stop_unwind = () => (_asyncify_stop_unwind = wasmExports["y"])();
+        var _asyncify_start_rewind = a0 => (_asyncify_start_rewind = wasmExports["z"])(a0);
+        var _asyncify_stop_rewind = () => (_asyncify_stop_rewind = wasmExports["A"])();
         Module["ccall"] = ccall;
         Module["writeArrayToMemory"] = writeArrayToMemory;
         var calledRun;
-        function ExitStatus(status) { this.name = "ExitStatus"; this.message = "Program terminated with exit(" + status + ")"; this.status = status; }
         dependenciesFulfilled = function runCaller() { if (!calledRun)
             run(); if (!calledRun)
             dependenciesFulfilled = runCaller; };
-        function run(args) { args = args || arguments_; if (runDependencies > 0) {
+        function run() { if (runDependencies > 0) {
             return;
         } preRun(); if (runDependencies > 0) {
             return;
@@ -3175,16 +3170,9 @@ var createKEMNativeCaller = (() => {
             return; initRuntime(); readyPromiseResolve(Module); postRun(); } {
             doRun();
         } }
-        Module["run"] = run;
-        function exit(status, implicit) { EXITSTATUS = status; if (keepRuntimeAlive()) { }
-        else {
-            exitRuntime();
-        } procExit(status); }
-        function procExit(code) { EXITSTATUS = code; if (!keepRuntimeAlive()) {
-            ABORT = true;
-        } quit_(code, new ExitStatus(code)); }
         run();
-        return createKEMNativeCaller.ready;
+        moduleRtn = readyPromise;
+        return moduleRtn;
     });
 })();
 export default createKEMNativeCaller;
diff --git a/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.d.ts b/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.d.ts
index b7110ff..9f089b1 100644
--- a/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.d.ts
+++ b/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.d.ts
@@ -1,8 +1,12 @@
 export interface KEM {
-    publicKeyBytes: Promise<number>;
-    privateKeyBytes: Promise<number>;
-    ciphertextBytes: Promise<number>;
-    sharedSecretBytes: Promise<number>;
+    publicKeyBytes: number;
+    privateKeyBytes: number;
+    ciphertextBytes: number;
+    sharedSecretBytes: number;
+    keypair_seeded: (sharedSecret: Uint8Array) => Promise<{
+        publicKey: Uint8Array;
+        privateKey: Uint8Array;
+    }>;
     keypair: () => Promise<{
         publicKey: Uint8Array;
         privateKey: Uint8Array;
@@ -11,9 +15,15 @@ export interface KEM {
         ciphertext: Uint8Array;
         sharedSecret: Uint8Array;
     }>;
+    encapsulate_internal: (publicKey: Uint8Array, sharedSecret: Uint8Array) => Promise<{
+        ciphertext: Uint8Array;
+    }>;
     decapsulate: (ciphertext: Uint8Array, privateKey: Uint8Array) => Promise<{
         sharedSecret: Uint8Array;
     }>;
+    decapsulate_internal: (ciphertext: Uint8Array, privateKey: Uint8Array) => Promise<{
+        sharedSecret: Uint8Array;
+    }>;
 }
 declare function kemBuilder(useFallback?: boolean, wasmFilePath?: string | undefined): Promise<KEM>;
 export default kemBuilder;
diff --git a/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.js b/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.js
index 94d992c..6a52d61 100644
--- a/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.js
+++ b/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.js
@@ -1,5 +1,5 @@
-import * as createWASMKEMNativeCaller from './kem.wasm.js';
-import * as createJSKEMNativeCaller from './kem.asm.js';
+import createWASMKEMNativeCaller from './kem.wasm.js';
+import createJSKEMNativeCaller from './kem.asm.js';
 // https://github.com/emscripten-core/emscripten/issues/11792#issuecomment-877120580
 /* nodeblock:start */
 import { dirname } from 'path';
@@ -7,7 +7,9 @@ import { createRequire } from 'module';
 globalThis.__dirname = dirname(import.meta.url);
 globalThis.require = createRequire(import.meta.url);
 /* nodeblock:end */
-{ } // So the comment above is not dropped during transpilation
+// eslint-disable-next-line no-empty
+{
+} // So the comment above is not dropped during transpilation
 async function kemBuilder(useFallback = false, wasmFilePath = undefined) {
     let Module = {};
     if (wasmFilePath) {
@@ -16,15 +18,18 @@ async function kemBuilder(useFallback = false, wasmFilePath = undefined) {
         };
     }
     if (useFallback) {
-        Module = (await createJSKEMNativeCaller.default(Module));
+        // eslint-disable-next-line @typescript-eslint/no-unsafe-call
+        Module = (await createJSKEMNativeCaller(Module));
     }
     else {
         try {
-            Module = (await createWASMKEMNativeCaller.default(Module));
+            // eslint-disable-next-line @typescript-eslint/no-unsafe-call
+            Module = (await createWASMKEMNativeCaller(Module));
         }
         catch (err) {
             console.error('Failed to initialize KEM WASM, using fallback instead', err);
-            Module = (await createJSKEMNativeCaller.default(Module));
+            // eslint-disable-next-line @typescript-eslint/no-unsafe-call
+            Module = (await createJSKEMNativeCaller(Module));
         }
     }
     // This block is only needed when running on Node.js to avoid usage of `require` in libsodium
@@ -38,8 +43,8 @@ async function kemBuilder(useFallback = false, wasmFilePath = undefined) {
         };
         randomValueNodeJS();
         Module.getRandomValue = randomValueNodeJS;
-        // @ts-ignore
         const { subtle } = crypto.webcrypto;
+        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
         Module.subtleCrypto = subtle;
     }
     /* nodeblock:end */
@@ -67,89 +72,131 @@ async function kemBuilder(useFallback = false, wasmFilePath = undefined) {
             }, 0);
         }
     }
-    let publicKeyBytes, privateKeyBytes, ciphertextBytes, sharedSecretBytes;
-    const initiated = Module.ready.then(() => {
-        Module._kem_init();
-        publicKeyBytes = Module._kem_public_key_bytes();
-        privateKeyBytes = Module._kem_private_key_bytes();
-        ciphertextBytes = Module._kem_ciphertext_bytes();
-        sharedSecretBytes = Module._kem_shared_secret_bytes();
-    });
+    Module._kem_init();
+    const publicKeyBytes = Module._kem_public_key_bytes();
+    const privateKeyBytes = Module._kem_private_key_bytes();
+    const ciphertextBytes = Module._kem_ciphertext_bytes();
+    const sharedSecretBytes = Module._kem_shared_secret_bytes();
     return {
-        publicKeyBytes: initiated.then(() => {
-            return publicKeyBytes;
-        }),
-        privateKeyBytes: initiated.then(() => {
-            return privateKeyBytes;
-        }),
-        ciphertextBytes: initiated.then(() => {
-            return ciphertextBytes;
-        }),
-        sharedSecretBytes: initiated.then(() => {
-            return sharedSecretBytes;
-        }),
+        publicKeyBytes,
+        privateKeyBytes,
+        ciphertextBytes,
+        sharedSecretBytes,
+        keypair_seeded: async (sharedSecret) => {
+            const release = await bindingCallerMutex.lock();
+            const publicKeyBuffer = Module._malloc(publicKeyBytes);
+            const privateKeyBuffer = Module._malloc(privateKeyBytes);
+            const sharedSecretBuffer = Module._malloc(sharedSecretBytes);
+            Module.writeArrayToMemory(sharedSecret, sharedSecretBuffer);
+            try {
+                const returnValue = await Module.ccall('kem_keypair_seeded', 'number', ['number', 'number', 'number'], [publicKeyBuffer, privateKeyBuffer, sharedSecretBuffer], { async: true });
+                return dataReturn(returnValue, {
+                    publicKey: dataResult(publicKeyBuffer, publicKeyBytes),
+                    privateKey: dataResult(privateKeyBuffer, privateKeyBytes),
+                });
+            }
+            finally {
+                release();
+                dataFree(publicKeyBuffer);
+                dataFree(privateKeyBuffer);
+            }
+        },
         keypair: async () => {
             const release = await bindingCallerMutex.lock();
-            return initiated.then(async () => {
-                const publicKeyBuffer = Module._malloc(publicKeyBytes);
-                const privateKeyBuffer = Module._malloc(privateKeyBytes);
-                try {
-                    const returnValue = await Module.ccall('kem_keypair', 'number', ['number', 'number'], [publicKeyBuffer, privateKeyBuffer], { async: true });
-                    return dataReturn(returnValue, {
-                        publicKey: dataResult(publicKeyBuffer, publicKeyBytes),
-                        privateKey: dataResult(privateKeyBuffer, privateKeyBytes),
-                    });
-                }
-                finally {
-                    release();
-                    dataFree(publicKeyBuffer);
-                    dataFree(privateKeyBuffer);
-                }
-            });
+            const publicKeyBuffer = Module._malloc(publicKeyBytes);
+            const privateKeyBuffer = Module._malloc(privateKeyBytes);
+            try {
+                const returnValue = await Module.ccall('kem_keypair', 'number', ['number', 'number'], [publicKeyBuffer, privateKeyBuffer], { async: true });
+                return dataReturn(returnValue, {
+                    publicKey: dataResult(publicKeyBuffer, publicKeyBytes),
+                    privateKey: dataResult(privateKeyBuffer, privateKeyBytes),
+                });
+            }
+            finally {
+                release();
+                dataFree(publicKeyBuffer);
+                dataFree(privateKeyBuffer);
+            }
         },
         encapsulate: async (publicKey) => {
             const release = await bindingCallerMutex.lock();
-            return initiated.then(async () => {
-                const ciphertextBuffer = Module._malloc(ciphertextBytes);
-                const sharedSecretBuffer = Module._malloc(sharedSecretBytes);
-                const publicKeyBuffer = Module._malloc(publicKeyBytes);
-                Module.writeArrayToMemory(publicKey, publicKeyBuffer);
-                try {
-                    const returnValue = await Module.ccall('kem_encapsulate', 'number', ['number', 'number', 'number'], [ciphertextBuffer, sharedSecretBuffer, publicKeyBuffer], { async: true });
-                    return dataReturn(returnValue, {
-                        ciphertext: dataResult(ciphertextBuffer, ciphertextBytes),
-                        sharedSecret: dataResult(sharedSecretBuffer, sharedSecretBytes),
-                    });
-                }
-                finally {
-                    release();
-                    dataFree(ciphertextBuffer);
-                    dataFree(sharedSecretBuffer);
-                    dataFree(publicKeyBuffer);
-                }
-            });
+            const ciphertextBuffer = Module._malloc(ciphertextBytes);
+            const sharedSecretBuffer = Module._malloc(sharedSecretBytes);
+            const publicKeyBuffer = Module._malloc(publicKeyBytes);
+            Module.writeArrayToMemory(publicKey, publicKeyBuffer);
+            try {
+                const returnValue = await Module.ccall('kem_encapsulate', 'number', ['number', 'number', 'number'], [ciphertextBuffer, sharedSecretBuffer, publicKeyBuffer], { async: true });
+                return dataReturn(returnValue, {
+                    ciphertext: dataResult(ciphertextBuffer, ciphertextBytes),
+                    sharedSecret: dataResult(sharedSecretBuffer, sharedSecretBytes),
+                });
+            }
+            finally {
+                release();
+                dataFree(ciphertextBuffer);
+                dataFree(sharedSecretBuffer);
+                dataFree(publicKeyBuffer);
+            }
+        },
+        encapsulate_internal: async (publicKey, sharedSecret) => {
+            const release = await bindingCallerMutex.lock();
+            const ciphertextBuffer = Module._malloc(ciphertextBytes);
+            const sharedSecretBuffer = Module._malloc(sharedSecretBytes);
+            const publicKeyBuffer = Module._malloc(publicKeyBytes);
+            Module.writeArrayToMemory(publicKey, publicKeyBuffer);
+            Module.writeArrayToMemory(sharedSecret, sharedSecretBuffer);
+            try {
+                const returnValue = await Module.ccall('kem_encapsulate_internal', 'number', ['number', 'number', 'number'], [ciphertextBuffer, sharedSecretBuffer, publicKeyBuffer], { async: true });
+                return dataReturn(returnValue, {
+                    ciphertext: dataResult(ciphertextBuffer, ciphertextBytes),
+                });
+            }
+            finally {
+                release();
+                dataFree(ciphertextBuffer);
+                dataFree(sharedSecretBuffer);
+                dataFree(publicKeyBuffer);
+            }
         },
         decapsulate: async (ciphertext, privateKey) => {
             const release = await bindingCallerMutex.lock();
-            return initiated.then(async () => {
-                const sharedSecretBuffer = Module._malloc(sharedSecretBytes);
-                const ciphertextBuffer = Module._malloc(ciphertextBytes);
-                const privateKeyBuffer = Module._malloc(privateKeyBytes);
-                Module.writeArrayToMemory(ciphertext, ciphertextBuffer);
-                Module.writeArrayToMemory(privateKey, privateKeyBuffer);
-                try {
-                    const returnValue = await Module.ccall('kem_decapsulate', 'number', ['number', 'number', 'number'], [sharedSecretBuffer, ciphertextBuffer, privateKeyBuffer], { async: true });
-                    return dataReturn(returnValue, {
-                        sharedSecret: dataResult(sharedSecretBuffer, sharedSecretBytes),
-                    });
-                }
-                finally {
-                    release();
-                    dataFree(sharedSecretBuffer);
-                    dataFree(ciphertextBuffer);
-                    dataFree(privateKeyBuffer);
-                }
-            });
+            const sharedSecretBuffer = Module._malloc(sharedSecretBytes);
+            const ciphertextBuffer = Module._malloc(ciphertextBytes);
+            const privateKeyBuffer = Module._malloc(privateKeyBytes);
+            Module.writeArrayToMemory(ciphertext, ciphertextBuffer);
+            Module.writeArrayToMemory(privateKey, privateKeyBuffer);
+            try {
+                const returnValue = await Module.ccall('kem_decapsulate', 'number', ['number', 'number', 'number'], [sharedSecretBuffer, ciphertextBuffer, privateKeyBuffer], { async: true });
+                return dataReturn(returnValue, {
+                    sharedSecret: dataResult(sharedSecretBuffer, sharedSecretBytes),
+                });
+            }
+            finally {
+                release();
+                dataFree(sharedSecretBuffer);
+                dataFree(ciphertextBuffer);
+                dataFree(privateKeyBuffer);
+            }
+        },
+        decapsulate_internal: async (ciphertext, privateKey) => {
+            const release = await bindingCallerMutex.lock();
+            const sharedSecretBuffer = Module._malloc(sharedSecretBytes);
+            const ciphertextBuffer = Module._malloc(ciphertextBytes);
+            const privateKeyBuffer = Module._malloc(privateKeyBytes);
+            Module.writeArrayToMemory(ciphertext, ciphertextBuffer);
+            Module.writeArrayToMemory(privateKey, privateKeyBuffer);
+            try {
+                const returnValue = await Module.ccall('kem_decapsulate_internal', 'number', ['number', 'number', 'number'], [sharedSecretBuffer, ciphertextBuffer, privateKeyBuffer], { async: true });
+                return dataReturn(returnValue, {
+                    sharedSecret: dataResult(sharedSecretBuffer, sharedSecretBytes),
+                });
+            }
+            finally {
+                release();
+                dataFree(sharedSecretBuffer);
+                dataFree(ciphertextBuffer);
+                dataFree(privateKeyBuffer);
+            }
         },
     };
 }
@@ -161,7 +208,7 @@ class Mutex {
     }
     lock() {
         let _resolve;
-        const p = new Promise(resolve => {
+        const p = new Promise((resolve) => {
             _resolve = () => resolve();
         });
         const rv = this.current.then(() => _resolve);
diff --git a/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.wasm.js b/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.wasm.js
index 6e95137..c16aa86 100644
--- a/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.wasm.js
+++ b/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.wasm.js
@@ -1,59 +1,40 @@
 var createKEMNativeCaller = (() => {
-    var _scriptDir = import.meta.url;
-    return (function (createKEMNativeCaller) {
-        createKEMNativeCaller = createKEMNativeCaller || {};
-        var Module = typeof createKEMNativeCaller != "undefined" ? createKEMNativeCaller : {};
+    var _scriptName = import.meta.url;
+    return (async function (moduleArg = {}) {
+        var moduleRtn;
+        var Module = moduleArg;
         var readyPromiseResolve, readyPromiseReject;
-        Module["ready"] = new Promise(function (resolve, reject) { readyPromiseResolve = resolve; readyPromiseReject = reject; });
+        var readyPromise = new Promise((resolve, reject) => { readyPromiseResolve = resolve; readyPromiseReject = reject; });
+        var ENVIRONMENT_IS_WEB = typeof window == "object";
+        var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
+        var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
+        if (ENVIRONMENT_IS_NODE) {
+            const { createRequire: createRequire } = await import("module");
+            var require = createRequire(import.meta.url);
+        }
         var moduleOverrides = Object.assign({}, Module);
         var arguments_ = [];
         var thisProgram = "./this.program";
         var quit_ = (status, toThrow) => { throw toThrow; };
-        var ENVIRONMENT_IS_WEB = typeof window == "object";
-        var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
-        var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
         var scriptDirectory = "";
         function locateFile(path) { if (Module["locateFile"]) {
             return Module["locateFile"](path, scriptDirectory);
         } return scriptDirectory + path; }
-        var read_, readAsync, readBinary, setWindowTitle;
-        function logExceptionOnExit(e) { if (e instanceof ExitStatus)
-            return; let toLog = e; err("exiting due to exception: " + toLog); }
-        var fs;
-        var nodePath;
-        var requireNodeFS;
+        var readAsync, readBinary;
         if (ENVIRONMENT_IS_NODE) {
-            if (ENVIRONMENT_IS_WORKER) {
-                scriptDirectory = require("path").dirname(scriptDirectory) + "/";
-            }
-            else {
-                scriptDirectory = __dirname + "/";
-            }
-            requireNodeFS = (() => { if (!nodePath) {
-                fs = require("fs");
-                nodePath = require("path");
-            } });
-            read_ = function shell_read(filename, binary) { requireNodeFS(); filename = nodePath["normalize"](filename); return fs.readFileSync(new URL(filename), binary ? undefined : "utf8"); };
-            readBinary = (filename => { var ret = read_(filename, true); if (!ret.buffer) {
-                ret = new Uint8Array(ret);
-            } return ret; });
-            readAsync = ((filename, onload, onerror) => { requireNodeFS(); filename = nodePath["normalize"](filename); fs.readFile(filename, function (err, data) { if (err)
-                onerror(err);
+            var fs = require("fs");
+            var nodePath = require("path");
+            scriptDirectory = require("url").fileURLToPath(new URL("./", import.meta.url));
+            readBinary = filename => { filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename); var ret = fs.readFileSync(new URL(filename)); return ret; };
+            readAsync = (filename, binary = true) => { filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename); return new Promise((resolve, reject) => { fs.readFile(filename, binary ? undefined : "utf8", (err, data) => { if (err)
+                reject(err);
             else
-                onload(data.buffer); }); });
-            if (process["argv"].length > 1) {
-                thisProgram = process["argv"][1].replace(/\\/g, "/");
+                resolve(binary ? data.buffer : data); }); }); };
+            if (!Module["thisProgram"] && process.argv.length > 1) {
+                thisProgram = process.argv[1].replace(/\\/g, "/");
             }
-            arguments_ = process["argv"].slice(2);
-            process["on"]("uncaughtException", function (ex) { if (!(ex instanceof ExitStatus)) {
-                throw ex;
-            } });
-            process["on"]("unhandledRejection", function (reason) { throw reason; });
-            quit_ = ((status, toThrow) => { if (keepRuntimeAlive()) {
-                process["exitCode"] = status;
-                throw toThrow;
-            } logExceptionOnExit(toThrow); process["exit"](status); });
-            Module["inspect"] = function () { return "[Emscripten Module object]"; };
+            arguments_ = process.argv.slice(2);
+            quit_ = (status, toThrow) => { process.exitCode = status; throw toThrow; };
         }
         else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
             if (ENVIRONMENT_IS_WORKER) {
@@ -62,151 +43,45 @@ var createKEMNativeCaller = (() => {
             else if (typeof document != "undefined" && document.currentScript) {
                 scriptDirectory = document.currentScript.src;
             }
-            if (_scriptDir) {
-                scriptDirectory = _scriptDir;
+            if (_scriptName) {
+                scriptDirectory = _scriptName;
             }
-            if (scriptDirectory.indexOf("blob:") !== 0) {
-                scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
+            if (scriptDirectory.startsWith("blob:")) {
+                scriptDirectory = "";
             }
             else {
-                scriptDirectory = "";
+                scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
             }
             {
-                read_ = (url => { var xhr = new XMLHttpRequest; xhr.open("GET", url, false); xhr.send(null); return xhr.responseText; });
                 if (ENVIRONMENT_IS_WORKER) {
-                    readBinary = (url => { var xhr = new XMLHttpRequest; xhr.open("GET", url, false); xhr.responseType = "arraybuffer"; xhr.send(null); return new Uint8Array(xhr.response); });
+                    readBinary = url => { var xhr = new XMLHttpRequest; xhr.open("GET", url, false); xhr.responseType = "arraybuffer"; xhr.send(null); return new Uint8Array(xhr.response); };
                 }
-                readAsync = ((url, onload, onerror) => { var xhr = new XMLHttpRequest; xhr.open("GET", url, true); xhr.responseType = "arraybuffer"; xhr.onload = (() => { if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
-                    onload(xhr.response);
-                    return;
-                } onerror(); }); xhr.onerror = onerror; xhr.send(null); });
+                readAsync = url => { if (isFileURI(url)) {
+                    return new Promise((reject, resolve) => { var xhr = new XMLHttpRequest; xhr.open("GET", url, true); xhr.responseType = "arraybuffer"; xhr.onload = () => { if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
+                        resolve(xhr.response);
+                    } reject(xhr.status); }; xhr.onerror = reject; xhr.send(null); });
+                } return fetch(url, { credentials: "same-origin" }).then(response => { if (response.ok) {
+                    return response.arrayBuffer();
+                } return Promise.reject(new Error(response.status + " : " + response.url)); }); };
             }
-            setWindowTitle = (title => document.title = title);
         }
         else { }
         var out = console.log.bind(console);
-        var err = console.warn.bind(console);
+        var err = console.error.bind(console);
         Object.assign(Module, moduleOverrides);
         moduleOverrides = null;
         var wasmBinary;
-        var noExitRuntime = true;
-        if (typeof WebAssembly != "object") {
-            abort("no native wasm support detected");
-        }
         var wasmMemory;
         var ABORT = false;
         var EXITSTATUS;
-        function assert(condition, text) { if (!condition) {
-            abort(text);
-        } }
-        function getCFunc(ident) { var func = Module["_" + ident]; return func; }
-        function ccall(ident, returnType, argTypes, args, opts) { var toC = { "string": function (str) { var ret = 0; if (str !== null && str !== undefined && str !== 0) {
-                var len = (str.length << 2) + 1;
-                ret = stackAlloc(len);
-                stringToUTF8(str, ret, len);
-            } return ret; }, "array": function (arr) { var ret = stackAlloc(arr.length); writeArrayToMemory(arr, ret); return ret; } }; function convertReturnValue(ret) { if (returnType === "string")
-            return UTF8ToString(ret); if (returnType === "boolean")
-            return Boolean(ret); return ret; } var func = getCFunc(ident); var cArgs = []; var stack = 0; if (args) {
-            for (var i = 0; i < args.length; i++) {
-                var converter = toC[argTypes[i]];
-                if (converter) {
-                    if (stack === 0)
-                        stack = stackSave();
-                    cArgs[i] = converter(args[i]);
-                }
-                else {
-                    cArgs[i] = args[i];
-                }
-            }
-        } var ret = func.apply(null, cArgs); function onDone(ret) { runtimeKeepalivePop(); if (stack !== 0)
-            stackRestore(stack); return convertReturnValue(ret); } runtimeKeepalivePush(); var asyncMode = opts && opts.async; if (Asyncify.currData) {
-            return Asyncify.whenDone().then(onDone);
-        } ret = onDone(ret); if (asyncMode)
-            return Promise.resolve(ret); return ret; }
-        var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : undefined;
-        function UTF8ArrayToString(heap, idx, maxBytesToRead) { var endIdx = idx + maxBytesToRead; var endPtr = idx; while (heap[endPtr] && !(endPtr >= endIdx))
-            ++endPtr; if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
-            return UTF8Decoder.decode(heap.subarray(idx, endPtr));
-        }
-        else {
-            var str = "";
-            while (idx < endPtr) {
-                var u0 = heap[idx++];
-                if (!(u0 & 128)) {
-                    str += String.fromCharCode(u0);
-                    continue;
-                }
-                var u1 = heap[idx++] & 63;
-                if ((u0 & 224) == 192) {
-                    str += String.fromCharCode((u0 & 31) << 6 | u1);
-                    continue;
-                }
-                var u2 = heap[idx++] & 63;
-                if ((u0 & 240) == 224) {
-                    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
-                }
-                else {
-                    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
-                }
-                if (u0 < 65536) {
-                    str += String.fromCharCode(u0);
-                }
-                else {
-                    var ch = u0 - 65536;
-                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
-                }
-            }
-        } return str; }
-        function UTF8ToString(ptr, maxBytesToRead) { return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : ""; }
-        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) { if (!(maxBytesToWrite > 0))
-            return 0; var startIdx = outIdx; var endIdx = outIdx + maxBytesToWrite - 1; for (var i = 0; i < str.length; ++i) {
-            var u = str.charCodeAt(i);
-            if (u >= 55296 && u <= 57343) {
-                var u1 = str.charCodeAt(++i);
-                u = 65536 + ((u & 1023) << 10) | u1 & 1023;
-            }
-            if (u <= 127) {
-                if (outIdx >= endIdx)
-                    break;
-                heap[outIdx++] = u;
-            }
-            else if (u <= 2047) {
-                if (outIdx + 1 >= endIdx)
-                    break;
-                heap[outIdx++] = 192 | u >> 6;
-                heap[outIdx++] = 128 | u & 63;
-            }
-            else if (u <= 65535) {
-                if (outIdx + 2 >= endIdx)
-                    break;
-                heap[outIdx++] = 224 | u >> 12;
-                heap[outIdx++] = 128 | u >> 6 & 63;
-                heap[outIdx++] = 128 | u & 63;
-            }
-            else {
-                if (outIdx + 3 >= endIdx)
-                    break;
-                heap[outIdx++] = 240 | u >> 18;
-                heap[outIdx++] = 128 | u >> 12 & 63;
-                heap[outIdx++] = 128 | u >> 6 & 63;
-                heap[outIdx++] = 128 | u & 63;
-            }
-        } heap[outIdx] = 0; return outIdx - startIdx; }
-        function stringToUTF8(str, outPtr, maxBytesToWrite) { return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite); }
-        function writeArrayToMemory(array, buffer) { HEAP8.set(array, buffer); }
-        var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
-        function updateGlobalBufferAndViews(buf) { buffer = buf; Module["HEAP8"] = HEAP8 = new Int8Array(buf); Module["HEAP16"] = HEAP16 = new Int16Array(buf); Module["HEAP32"] = HEAP32 = new Int32Array(buf); Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf); Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf); Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf); Module["HEAPF32"] = HEAPF32 = new Float32Array(buf); Module["HEAPF64"] = HEAPF64 = new Float64Array(buf); }
-        var wasmTable;
+        var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
+        function updateMemoryViews() { var b = wasmMemory.buffer; Module["HEAP8"] = HEAP8 = new Int8Array(b); Module["HEAP16"] = HEAP16 = new Int16Array(b); Module["HEAPU8"] = HEAPU8 = new Uint8Array(b); Module["HEAPU16"] = HEAPU16 = new Uint16Array(b); Module["HEAP32"] = HEAP32 = new Int32Array(b); Module["HEAPU32"] = HEAPU32 = new Uint32Array(b); Module["HEAPF32"] = HEAPF32 = new Float32Array(b); Module["HEAPF64"] = HEAPF64 = new Float64Array(b); }
         var __ATPRERUN__ = [];
         var __ATINIT__ = [];
         var __ATPOSTRUN__ = [];
         var runtimeInitialized = false;
-        var runtimeExited = false;
-        var runtimeKeepaliveCounter = 0;
-        function keepRuntimeAlive() { return noExitRuntime || runtimeKeepaliveCounter > 0; }
         function preRun() { callRuntimeCallbacks(__ATPRERUN__); }
         function initRuntime() { runtimeInitialized = true; callRuntimeCallbacks(__ATINIT__); }
-        function exitRuntime() { runtimeExited = true; }
         function postRun() { callRuntimeCallbacks(__ATPOSTRUN__); }
         function addOnInit(cb) { __ATINIT__.unshift(cb); }
         var runDependencies = 0;
@@ -224,65 +99,34 @@ var createKEMNativeCaller = (() => {
                 callback();
             }
         } }
-        Module["preloadedImages"] = {};
-        Module["preloadedAudios"] = {};
-        function abort(what) { what = "Aborted(" + what + ")"; err(what); ABORT = true; EXITSTATUS = 1; what += ". Build with -s ASSERTIONS=1 for more info."; var e = new WebAssembly.RuntimeError(what); readyPromiseReject(e); throw e; }
+        function abort(what) { what = "Aborted(" + what + ")"; err(what); ABORT = true; EXITSTATUS = 1; what += ". Build with -sASSERTIONS for more info."; var e = new WebAssembly.RuntimeError(what); readyPromiseReject(e); throw e; }
         var dataURIPrefix = "data:application/octet-stream;base64,";
-        function isDataURI(filename) { return filename.startsWith(dataURIPrefix); }
-        function isFileURI(filename) { return filename.startsWith("file://"); }
-        var wasmBinaryFile;
-        if (Module["locateFile"]) {
-            wasmBinaryFile = "kem.wasm.wasm";
-            if (!isDataURI(wasmBinaryFile)) {
-                wasmBinaryFile = locateFile(wasmBinaryFile);
-            }
-        }
-        else {
-            wasmBinaryFile = new URL("kem.wasm.wasm", import.meta.url).toString();
-        }
-        function getBinary(file) { try {
-            if (file == wasmBinaryFile && wasmBinary) {
-                return new Uint8Array(wasmBinary);
-            }
-            if (readBinary) {
-                return readBinary(file);
-            }
-            else {
-                throw "both async and sync fetching of the wasm failed";
-            }
-        }
-        catch (err) {
-            abort(err);
-        } }
-        function getBinaryPromise() { if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
-            if (typeof fetch == "function" && !isFileURI(wasmBinaryFile)) {
-                return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function (response) { if (!response["ok"]) {
-                    throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
-                } return response["arrayBuffer"](); }).catch(function () { return getBinary(wasmBinaryFile); });
-            }
-            else {
-                if (readAsync) {
-                    return new Promise(function (resolve, reject) { readAsync(wasmBinaryFile, function (response) { resolve(new Uint8Array(response)); }, reject); });
-                }
-            }
-        } return Promise.resolve().then(function () { return getBinary(wasmBinaryFile); }); }
-        function createWasm() { var info = { "a": asmLibraryArg }; function receiveInstance(instance, module) { var exports = instance.exports; exports = Asyncify.instrumentWasmExports(exports); Module["asm"] = exports; wasmMemory = Module["asm"]["e"]; updateGlobalBufferAndViews(wasmMemory.buffer); wasmTable = Module["asm"]["i"]; addOnInit(Module["asm"]["f"]); removeRunDependency("wasm-instantiate"); } addRunDependency("wasm-instantiate"); function receiveInstantiationResult(result) { receiveInstance(result["instance"]); } function instantiateArrayBuffer(receiver) { return getBinaryPromise().then(function (binary) { return WebAssembly.instantiate(binary, info); }).then(function (instance) { return instance; }).then(receiver, function (reason) { err("failed to asynchronously prepare wasm: " + reason); abort(reason); }); } function instantiateAsync() { if (!wasmBinary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch == "function") {
-            return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function (response) { var result = WebAssembly.instantiateStreaming(response, info); return result.then(receiveInstantiationResult, function (reason) { err("wasm streaming compile failed: " + reason); err("falling back to ArrayBuffer instantiation"); return instantiateArrayBuffer(receiveInstantiationResult); }); });
-        }
-        else {
-            return instantiateArrayBuffer(receiveInstantiationResult);
-        } } if (Module["instantiateWasm"]) {
-            try {
-                var exports = Module["instantiateWasm"](info, receiveInstance);
-                exports = Asyncify.instrumentWasmExports(exports);
-                return exports;
-            }
-            catch (e) {
-                err("Module.instantiateWasm callback failed with error: " + e);
-                return false;
+        var isDataURI = filename => filename.startsWith(dataURIPrefix);
+        var isFileURI = filename => filename.startsWith("file://");
+        function findWasmBinary() { if (Module["locateFile"]) {
+            var f = "kem.wasm.wasm";
+            if (!isDataURI(f)) {
+                return locateFile(f);
             }
-        } instantiateAsync().catch(readyPromiseReject); return {}; }
-        var ASM_CONSTS = { 1572: function () { return Module.getRandomValue(); }, 1608: function () { if (Module.getRandomValue === undefined) {
+            return f;
+        } return new URL("kem.wasm.wasm", import.meta.url).href; }
+        var wasmBinaryFile;
+        function getBinarySync(file) { if (file == wasmBinaryFile && wasmBinary) {
+            return new Uint8Array(wasmBinary);
+        } if (readBinary) {
+            return readBinary(file);
+        } throw "both async and sync fetching of the wasm failed"; }
+        function getBinaryPromise(binaryFile) { if (!wasmBinary) {
+            return readAsync(binaryFile).then(response => new Uint8Array(response), () => getBinarySync(binaryFile));
+        } return Promise.resolve().then(() => getBinarySync(binaryFile)); }
+        function instantiateArrayBuffer(binaryFile, imports, receiver) { return getBinaryPromise(binaryFile).then(binary => WebAssembly.instantiate(binary, imports)).then(receiver, reason => { err(`failed to asynchronously prepare wasm: ${reason}`); abort(reason); }); }
+        function instantiateAsync(binary, binaryFile, imports, callback) { if (!binary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(binaryFile) && !isFileURI(binaryFile) && !ENVIRONMENT_IS_NODE && typeof fetch == "function") {
+            return fetch(binaryFile, { credentials: "same-origin" }).then(response => { var result = WebAssembly.instantiateStreaming(response, imports); return result.then(callback, function (reason) { err(`wasm streaming compile failed: ${reason}`); err("falling back to ArrayBuffer instantiation"); return instantiateArrayBuffer(binaryFile, imports, callback); }); });
+        } return instantiateArrayBuffer(binaryFile, imports, callback); }
+        function getWasmImports() { return { a: wasmImports }; }
+        function createWasm() { var info = getWasmImports(); function receiveInstance(instance, module) { wasmExports = instance.exports; wasmExports = Asyncify.instrumentWasmExports(wasmExports); wasmMemory = wasmExports["f"]; updateMemoryViews(); addOnInit(wasmExports["g"]); removeRunDependency("wasm-instantiate"); return wasmExports; } addRunDependency("wasm-instantiate"); function receiveInstantiationResult(result) { receiveInstance(result["instance"]); } if (!wasmBinaryFile)
+            wasmBinaryFile = findWasmBinary(); instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject); return {}; }
+        var ASM_CONSTS = { 1572: () => Module.getRandomValue(), 1608: () => { if (Module.getRandomValue === undefined) {
                 try {
                     var window_ = "object" === typeof window ? window : self;
                     var crypto_ = typeof window_.crypto !== "undefined" ? window_.crypto : window_.msCrypto;
@@ -302,98 +146,129 @@ var createKEMNativeCaller = (() => {
                     }
                 }
             } } };
-        function __asyncjs__aes_ctr_subtle_crypto(output, output_len, input, nblocks, iv, sk, sk_len) { return Asyncify.handleAsync(async () => { const inputJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, input, nblocks << 4)); const skJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, sk, sk_len)); const ivJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, iv, 16)); const key = await Module.subtleCrypto.importKey("raw", skJs.buffer, "AES-CTR", false, ["encrypt"]); const outputJs = await Module.subtleCrypto.encrypt({ name: "AES-CTR", counter: ivJs.buffer, length: 32 }, key, inputJs.buffer); writeArrayToMemory(new Uint8Array(outputJs).slice(0, output_len), output); }); }
-        function __asyncjs__sha256_subtle_crypto(output, input, inlen) { return Asyncify.handleAsync(async () => { const inputJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, input, inlen)).buffer; const outputJs = await Module.subtleCrypto.digest("SHA-256", inputJs); writeArrayToMemory(new Uint8Array(outputJs), output); }); }
-        function __asyncjs__sha384_subtle_crypto(output, input, inlen) { return Asyncify.handleAsync(async () => { const inputJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, input, inlen)).buffer; const outputJs = await Module.subtleCrypto.digest("SHA-384", inputJs); writeArrayToMemory(new Uint8Array(outputJs), output); }); }
-        function __asyncjs__sha512_subtle_crypto(output, input, inlen) { return Asyncify.handleAsync(async () => { const inputJs = new Uint8Array(new Uint8Array(Module.HEAPU8.buffer, input, inlen)).buffer; const outputJs = await Module.subtleCrypto.digest("SHA-512", inputJs); writeArrayToMemory(new Uint8Array(outputJs), output); }); }
-        function callRuntimeCallbacks(callbacks) { while (callbacks.length > 0) {
-            var callback = callbacks.shift();
-            if (typeof callback == "function") {
-                callback(Module);
+        function ExitStatus(status) { this.name = "ExitStatus"; this.message = `Program terminated with exit(${status})`; this.status = status; }
+        var callRuntimeCallbacks = callbacks => { while (callbacks.length > 0) {
+            callbacks.shift()(Module);
+        } };
+        var stackRestore = val => __emscripten_stack_restore(val);
+        var stackSave = () => _emscripten_stack_get_current();
+        var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder : undefined;
+        var UTF8ArrayToString = (heapOrArray, idx, maxBytesToRead) => { var endIdx = idx + maxBytesToRead; var endPtr = idx; while (heapOrArray[endPtr] && !(endPtr >= endIdx))
+            ++endPtr; if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
+            return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
+        } var str = ""; while (idx < endPtr) {
+            var u0 = heapOrArray[idx++];
+            if (!(u0 & 128)) {
+                str += String.fromCharCode(u0);
                 continue;
             }
-            var func = callback.func;
-            if (typeof func == "number") {
-                if (callback.arg === undefined) {
-                    (function () { dynCall_v.call(null, func); })();
-                }
-                else {
-                    (function (a1) { dynCall_vi.apply(null, [func, a1]); })(callback.arg);
-                }
+            var u1 = heapOrArray[idx++] & 63;
+            if ((u0 & 224) == 192) {
+                str += String.fromCharCode((u0 & 31) << 6 | u1);
+                continue;
+            }
+            var u2 = heapOrArray[idx++] & 63;
+            if ((u0 & 240) == 224) {
+                u0 = (u0 & 15) << 12 | u1 << 6 | u2;
             }
             else {
-                func(callback.arg === undefined ? null : callback.arg);
+                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
             }
-        } }
-        function handleException(e) { if (e instanceof ExitStatus || e == "unwind") {
-            return EXITSTATUS;
-        } quit_(1, e); }
-        var readAsmConstArgsArray = [];
-        function readAsmConstArgs(sigPtr, buf) { readAsmConstArgsArray.length = 0; var ch; buf >>= 2; while (ch = HEAPU8[sigPtr++]) {
-            var readAsmConstArgsDouble = ch < 105;
-            if (readAsmConstArgsDouble && buf & 1)
-                buf++;
-            readAsmConstArgsArray.push(readAsmConstArgsDouble ? HEAPF64[buf++ >> 1] : HEAP32[buf]);
-            ++buf;
-        } return readAsmConstArgsArray; }
-        function _emscripten_asm_const_int(code, sigPtr, argbuf) { var args = readAsmConstArgs(sigPtr, argbuf); return ASM_CONSTS[code].apply(null, args); }
-        function _emscripten_memcpy_big(dest, src, num) { HEAPU8.copyWithin(dest, src, src + num); }
-        function abortOnCannotGrowMemory(requestedSize) { abort("OOM"); }
-        function _emscripten_resize_heap(requestedSize) { var oldSize = HEAPU8.length; requestedSize = requestedSize >>> 0; abortOnCannotGrowMemory(requestedSize); }
-        function _exit(status) { exit(status); }
-        function runAndAbortIfError(func) { try {
+            if (u0 < 65536) {
+                str += String.fromCharCode(u0);
+            }
+            else {
+                var ch = u0 - 65536;
+                str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
+            }
+        } return str; };
+        var UTF8ToString = (ptr, maxBytesToRead) => ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
+        var ___assert_fail = (condition, filename, line, func) => { abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]); };
+        var __emscripten_memcpy_js = (dest, src, num) => HEAPU8.copyWithin(dest, src, src + num);
+        var readEmAsmArgsArray = [];
+        var readEmAsmArgs = (sigPtr, buf) => { readEmAsmArgsArray.length = 0; var ch; while (ch = HEAPU8[sigPtr++]) {
+            var wide = ch != 105;
+            wide &= ch != 112;
+            buf += wide && buf % 8 ? 4 : 0;
+            readEmAsmArgsArray.push(ch == 112 ? HEAPU32[buf >> 2] : ch == 105 ? HEAP32[buf >> 2] : HEAPF64[buf >> 3]);
+            buf += wide ? 8 : 4;
+        } return readEmAsmArgsArray; };
+        var runEmAsmFunction = (code, sigPtr, argbuf) => { var args = readEmAsmArgs(sigPtr, argbuf); return ASM_CONSTS[code](...args); };
+        var _emscripten_asm_const_int = (code, sigPtr, argbuf) => runEmAsmFunction(code, sigPtr, argbuf);
+        var abortOnCannotGrowMemory = requestedSize => { abort("OOM"); };
+        var _emscripten_resize_heap = requestedSize => { var oldSize = HEAPU8.length; requestedSize >>>= 0; abortOnCannotGrowMemory(requestedSize); };
+        var runtimeKeepaliveCounter = 0;
+        var keepRuntimeAlive = () => runtimeKeepaliveCounter > 0;
+        var _proc_exit = code => { EXITSTATUS = code; if (!keepRuntimeAlive()) {
+            ABORT = true;
+        } quit_(code, new ExitStatus(code)); };
+        var exitJS = (status, implicit) => { EXITSTATUS = status; _proc_exit(status); };
+        var _exit = exitJS;
+        var runAndAbortIfError = func => { try {
             return func();
         }
         catch (e) {
             abort(e);
-        } }
-        function callUserCallback(func, synchronous) { if (runtimeExited || ABORT) {
-            return;
-        } if (synchronous) {
-            func();
+        } };
+        var handleException = e => { if (e instanceof ExitStatus || e == "unwind") {
+            return EXITSTATUS;
+        } quit_(1, e); };
+        var maybeExit = () => { if (!keepRuntimeAlive()) {
+            try {
+                _exit(EXITSTATUS);
+            }
+            catch (e) {
+                handleException(e);
+            }
+        } };
+        var callUserCallback = func => { if (ABORT) {
             return;
         } try {
             func();
+            maybeExit();
         }
         catch (e) {
             handleException(e);
-        } }
-        function runtimeKeepalivePush() { runtimeKeepaliveCounter += 1; }
-        function runtimeKeepalivePop() { runtimeKeepaliveCounter -= 1; }
-        var Asyncify = { State: { Normal: 0, Unwinding: 1, Rewinding: 2, Disabled: 3 }, state: 0, StackSize: 4096, currData: null, handleSleepReturnValue: 0, exportCallStack: [], callStackNameToId: {}, callStackIdToName: {}, callStackId: 0, asyncPromiseHandlers: null, sleepCallbacks: [], getCallStackId: function (funcName) { var id = Asyncify.callStackNameToId[funcName]; if (id === undefined) {
-                id = Asyncify.callStackId++;
-                Asyncify.callStackNameToId[funcName] = id;
-                Asyncify.callStackIdToName[id] = funcName;
-            } return id; }, instrumentWasmExports: function (exports) { var ret = {}; for (var x in exports) {
-                (function (x) { var original = exports[x]; if (typeof original == "function") {
-                    ret[x] = function () { Asyncify.exportCallStack.push(x); try {
-                        return original.apply(null, arguments);
+        } };
+        var runtimeKeepalivePush = () => { runtimeKeepaliveCounter += 1; };
+        var runtimeKeepalivePop = () => { runtimeKeepaliveCounter -= 1; };
+        var Asyncify = { instrumentWasmImports(imports) { var importPattern = /^(__asyncjs__.*)$/; for (let [x, original] of Object.entries(imports)) {
+                if (typeof original == "function") {
+                    let isAsyncifyImport = original.isAsync || importPattern.test(x);
+                }
+            } }, instrumentWasmExports(exports) { var ret = {}; for (let [x, original] of Object.entries(exports)) {
+                if (typeof original == "function") {
+                    ret[x] = (...args) => { Asyncify.exportCallStack.push(x); try {
+                        return original(...args);
                     }
                     finally {
                         if (!ABORT) {
                             var y = Asyncify.exportCallStack.pop();
-                            assert(y === x);
                             Asyncify.maybeStopUnwind();
                         }
                     } };
                 }
                 else {
                     ret[x] = original;
-                } })(x);
-            } return ret; }, maybeStopUnwind: function () { if (Asyncify.currData && Asyncify.state === Asyncify.State.Unwinding && Asyncify.exportCallStack.length === 0) {
+                }
+            } return ret; }, State: { Normal: 0, Unwinding: 1, Rewinding: 2, Disabled: 3 }, state: 0, StackSize: 4096, currData: null, handleSleepReturnValue: 0, exportCallStack: [], callStackNameToId: {}, callStackIdToName: {}, callStackId: 0, asyncPromiseHandlers: null, sleepCallbacks: [], getCallStackId(funcName) { var id = Asyncify.callStackNameToId[funcName]; if (id === undefined) {
+                id = Asyncify.callStackId++;
+                Asyncify.callStackNameToId[funcName] = id;
+                Asyncify.callStackIdToName[id] = funcName;
+            } return id; }, maybeStopUnwind() { if (Asyncify.currData && Asyncify.state === Asyncify.State.Unwinding && Asyncify.exportCallStack.length === 0) {
                 Asyncify.state = Asyncify.State.Normal;
-                runAndAbortIfError(Module["_asyncify_stop_unwind"]);
+                runAndAbortIfError(_asyncify_stop_unwind);
                 if (typeof Fibers != "undefined") {
                     Fibers.trampoline();
                 }
-            } }, whenDone: function () { return new Promise((resolve, reject) => { Asyncify.asyncPromiseHandlers = { resolve: resolve, reject: reject }; }); }, allocateData: function () { var ptr = _malloc(12 + Asyncify.StackSize); Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize); Asyncify.setDataRewindFunc(ptr); return ptr; }, setDataHeader: function (ptr, stack, stackSize) { HEAP32[ptr >> 2] = stack; HEAP32[ptr + 4 >> 2] = stack + stackSize; }, setDataRewindFunc: function (ptr) { var bottomOfCallStack = Asyncify.exportCallStack[0]; var rewindId = Asyncify.getCallStackId(bottomOfCallStack); HEAP32[ptr + 8 >> 2] = rewindId; }, getDataRewindFunc: function (ptr) { var id = HEAP32[ptr + 8 >> 2]; var name = Asyncify.callStackIdToName[id]; var func = Module["asm"][name]; return func; }, doRewind: function (ptr) { var start = Asyncify.getDataRewindFunc(ptr); return start(); }, handleSleep: function (startAsync) { if (ABORT)
+            } }, whenDone() { return new Promise((resolve, reject) => { Asyncify.asyncPromiseHandlers = { resolve: resolve, reject: reject }; }); }, allocateData() { var ptr = _malloc(12 + Asyncify.StackSize); Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize); Asyncify.setDataRewindFunc(ptr); return ptr; }, setDataHeader(ptr, stack, stackSize) { HEAPU32[ptr >> 2] = stack; HEAPU32[ptr + 4 >> 2] = stack + stackSize; }, setDataRewindFunc(ptr) { var bottomOfCallStack = Asyncify.exportCallStack[0]; var rewindId = Asyncify.getCallStackId(bottomOfCallStack); HEAP32[ptr + 8 >> 2] = rewindId; }, getDataRewindFuncName(ptr) { var id = HEAP32[ptr + 8 >> 2]; var name = Asyncify.callStackIdToName[id]; return name; }, getDataRewindFunc(name) { var func = wasmExports[name]; return func; }, doRewind(ptr) { var name = Asyncify.getDataRewindFuncName(ptr); var func = Asyncify.getDataRewindFunc(name); return func(); }, handleSleep(startAsync) { if (ABORT)
                 return; if (Asyncify.state === Asyncify.State.Normal) {
                 var reachedCallback = false;
                 var reachedAfterCallback = false;
-                startAsync(handleSleepReturnValue => { if (ABORT)
-                    return; Asyncify.handleSleepReturnValue = handleSleepReturnValue || 0; reachedCallback = true; if (!reachedAfterCallback) {
+                startAsync((handleSleepReturnValue = 0) => { if (ABORT)
+                    return; Asyncify.handleSleepReturnValue = handleSleepReturnValue; reachedCallback = true; if (!reachedAfterCallback) {
                     return;
-                } Asyncify.state = Asyncify.State.Rewinding; runAndAbortIfError(() => Module["_asyncify_start_rewind"](Asyncify.currData)); if (typeof Browser != "undefined" && Browser.mainLoop.func) {
+                } Asyncify.state = Asyncify.State.Rewinding; runAndAbortIfError(() => _asyncify_start_rewind(Asyncify.currData)); if (typeof Browser != "undefined" && Browser.mainLoop.func) {
                     Browser.mainLoop.resume();
                 } var asyncWasmReturnValue, isError = false; try {
                     asyncWasmReturnValue = Asyncify.doRewind(Asyncify.currData);
@@ -415,50 +290,129 @@ var createKEMNativeCaller = (() => {
                 if (!reachedCallback) {
                     Asyncify.state = Asyncify.State.Unwinding;
                     Asyncify.currData = Asyncify.allocateData();
-                    runAndAbortIfError(() => Module["_asyncify_start_unwind"](Asyncify.currData));
                     if (typeof Browser != "undefined" && Browser.mainLoop.func) {
                         Browser.mainLoop.pause();
                     }
+                    runAndAbortIfError(() => _asyncify_start_unwind(Asyncify.currData));
                 }
             }
             else if (Asyncify.state === Asyncify.State.Rewinding) {
                 Asyncify.state = Asyncify.State.Normal;
-                runAndAbortIfError(Module["_asyncify_stop_rewind"]);
+                runAndAbortIfError(_asyncify_stop_rewind);
                 _free(Asyncify.currData);
                 Asyncify.currData = null;
-                Asyncify.sleepCallbacks.forEach(func => callUserCallback(func));
+                Asyncify.sleepCallbacks.forEach(callUserCallback);
+            }
+            else {
+                abort(`invalid state: ${Asyncify.state}`);
+            } return Asyncify.handleSleepReturnValue; }, handleAsync(startAsync) { return Asyncify.handleSleep(wakeUp => { startAsync().then(wakeUp); }); } };
+        var getCFunc = ident => { var func = Module["_" + ident]; return func; };
+        var writeArrayToMemory = (array, buffer) => { HEAP8.set(array, buffer); };
+        var lengthBytesUTF8 = str => { var len = 0; for (var i = 0; i < str.length; ++i) {
+            var c = str.charCodeAt(i);
+            if (c <= 127) {
+                len++;
+            }
+            else if (c <= 2047) {
+                len += 2;
+            }
+            else if (c >= 55296 && c <= 57343) {
+                len += 4;
+                ++i;
+            }
+            else {
+                len += 3;
+            }
+        } return len; };
+        var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => { if (!(maxBytesToWrite > 0))
+            return 0; var startIdx = outIdx; var endIdx = outIdx + maxBytesToWrite - 1; for (var i = 0; i < str.length; ++i) {
+            var u = str.charCodeAt(i);
+            if (u >= 55296 && u <= 57343) {
+                var u1 = str.charCodeAt(++i);
+                u = 65536 + ((u & 1023) << 10) | u1 & 1023;
+            }
+            if (u <= 127) {
+                if (outIdx >= endIdx)
+                    break;
+                heap[outIdx++] = u;
+            }
+            else if (u <= 2047) {
+                if (outIdx + 1 >= endIdx)
+                    break;
+                heap[outIdx++] = 192 | u >> 6;
+                heap[outIdx++] = 128 | u & 63;
+            }
+            else if (u <= 65535) {
+                if (outIdx + 2 >= endIdx)
+                    break;
+                heap[outIdx++] = 224 | u >> 12;
+                heap[outIdx++] = 128 | u >> 6 & 63;
+                heap[outIdx++] = 128 | u & 63;
             }
             else {
-                abort("invalid state: " + Asyncify.state);
-            } return Asyncify.handleSleepReturnValue; }, handleAsync: function (startAsync) { return Asyncify.handleSleep(wakeUp => { startAsync().then(wakeUp); }); } };
-        var asmLibraryArg = { "__asyncjs__aes_ctr_subtle_crypto": __asyncjs__aes_ctr_subtle_crypto, "__asyncjs__sha256_subtle_crypto": __asyncjs__sha256_subtle_crypto, "__asyncjs__sha384_subtle_crypto": __asyncjs__sha384_subtle_crypto, "__asyncjs__sha512_subtle_crypto": __asyncjs__sha512_subtle_crypto, "a": _emscripten_asm_const_int, "d": _emscripten_memcpy_big, "c": _emscripten_resize_heap, "b": _exit };
-        var asm = createWasm();
-        var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function () { return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["f"]).apply(null, arguments); };
-        var _malloc = Module["_malloc"] = function () { return (_malloc = Module["_malloc"] = Module["asm"]["g"]).apply(null, arguments); };
-        var _free = Module["_free"] = function () { return (_free = Module["_free"] = Module["asm"]["h"]).apply(null, arguments); };
-        var _kem_init = Module["_kem_init"] = function () { return (_kem_init = Module["_kem_init"] = Module["asm"]["j"]).apply(null, arguments); };
-        var _kem_public_key_bytes = Module["_kem_public_key_bytes"] = function () { return (_kem_public_key_bytes = Module["_kem_public_key_bytes"] = Module["asm"]["k"]).apply(null, arguments); };
-        var _kem_private_key_bytes = Module["_kem_private_key_bytes"] = function () { return (_kem_private_key_bytes = Module["_kem_private_key_bytes"] = Module["asm"]["l"]).apply(null, arguments); };
-        var _kem_ciphertext_bytes = Module["_kem_ciphertext_bytes"] = function () { return (_kem_ciphertext_bytes = Module["_kem_ciphertext_bytes"] = Module["asm"]["m"]).apply(null, arguments); };
-        var _kem_shared_secret_bytes = Module["_kem_shared_secret_bytes"] = function () { return (_kem_shared_secret_bytes = Module["_kem_shared_secret_bytes"] = Module["asm"]["n"]).apply(null, arguments); };
-        var _kem_keypair = Module["_kem_keypair"] = function () { return (_kem_keypair = Module["_kem_keypair"] = Module["asm"]["o"]).apply(null, arguments); };
-        var _kem_encapsulate = Module["_kem_encapsulate"] = function () { return (_kem_encapsulate = Module["_kem_encapsulate"] = Module["asm"]["p"]).apply(null, arguments); };
-        var _kem_decapsulate = Module["_kem_decapsulate"] = function () { return (_kem_decapsulate = Module["_kem_decapsulate"] = Module["asm"]["q"]).apply(null, arguments); };
-        var stackSave = Module["stackSave"] = function () { return (stackSave = Module["stackSave"] = Module["asm"]["r"]).apply(null, arguments); };
-        var stackRestore = Module["stackRestore"] = function () { return (stackRestore = Module["stackRestore"] = Module["asm"]["s"]).apply(null, arguments); };
-        var stackAlloc = Module["stackAlloc"] = function () { return (stackAlloc = Module["stackAlloc"] = Module["asm"]["t"]).apply(null, arguments); };
-        var _asyncify_start_unwind = Module["_asyncify_start_unwind"] = function () { return (_asyncify_start_unwind = Module["_asyncify_start_unwind"] = Module["asm"]["u"]).apply(null, arguments); };
-        var _asyncify_stop_unwind = Module["_asyncify_stop_unwind"] = function () { return (_asyncify_stop_unwind = Module["_asyncify_stop_unwind"] = Module["asm"]["v"]).apply(null, arguments); };
-        var _asyncify_start_rewind = Module["_asyncify_start_rewind"] = function () { return (_asyncify_start_rewind = Module["_asyncify_start_rewind"] = Module["asm"]["w"]).apply(null, arguments); };
-        var _asyncify_stop_rewind = Module["_asyncify_stop_rewind"] = function () { return (_asyncify_stop_rewind = Module["_asyncify_stop_rewind"] = Module["asm"]["x"]).apply(null, arguments); };
+                if (outIdx + 3 >= endIdx)
+                    break;
+                heap[outIdx++] = 240 | u >> 18;
+                heap[outIdx++] = 128 | u >> 12 & 63;
+                heap[outIdx++] = 128 | u >> 6 & 63;
+                heap[outIdx++] = 128 | u & 63;
+            }
+        } heap[outIdx] = 0; return outIdx - startIdx; };
+        var stringToUTF8 = (str, outPtr, maxBytesToWrite) => stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
+        var stackAlloc = sz => __emscripten_stack_alloc(sz);
+        var stringToUTF8OnStack = str => { var size = lengthBytesUTF8(str) + 1; var ret = stackAlloc(size); stringToUTF8(str, ret, size); return ret; };
+        var ccall = (ident, returnType, argTypes, args, opts) => { var toC = { string: str => { var ret = 0; if (str !== null && str !== undefined && str !== 0) {
+                ret = stringToUTF8OnStack(str);
+            } return ret; }, array: arr => { var ret = stackAlloc(arr.length); writeArrayToMemory(arr, ret); return ret; } }; function convertReturnValue(ret) { if (returnType === "string") {
+            return UTF8ToString(ret);
+        } if (returnType === "boolean")
+            return Boolean(ret); return ret; } var func = getCFunc(ident); var cArgs = []; var stack = 0; if (args) {
+            for (var i = 0; i < args.length; i++) {
+                var converter = toC[argTypes[i]];
+                if (converter) {
+                    if (stack === 0)
+                        stack = stackSave();
+                    cArgs[i] = converter(args[i]);
+                }
+                else {
+                    cArgs[i] = args[i];
+                }
+            }
+        } var previousAsync = Asyncify.currData; var ret = func(...cArgs); function onDone(ret) { runtimeKeepalivePop(); if (stack !== 0)
+            stackRestore(stack); return convertReturnValue(ret); } var asyncMode = opts?.async; runtimeKeepalivePush(); if (Asyncify.currData != previousAsync) {
+            return Asyncify.whenDone().then(onDone);
+        } ret = onDone(ret); if (asyncMode)
+            return Promise.resolve(ret); return ret; };
+        var wasmImports = { e: ___assert_fail, d: __emscripten_memcpy_js, b: _emscripten_asm_const_int, c: _emscripten_resize_heap, a: _exit };
+        var wasmExports = createWasm();
+        var ___wasm_call_ctors = () => (___wasm_call_ctors = wasmExports["g"])();
+        var _malloc = Module["_malloc"] = a0 => (_malloc = Module["_malloc"] = wasmExports["h"])(a0);
+        var _free = Module["_free"] = a0 => (_free = Module["_free"] = wasmExports["i"])(a0);
+        var _kem_init = Module["_kem_init"] = () => (_kem_init = Module["_kem_init"] = wasmExports["k"])();
+        var _kem_public_key_bytes = Module["_kem_public_key_bytes"] = () => (_kem_public_key_bytes = Module["_kem_public_key_bytes"] = wasmExports["l"])();
+        var _kem_private_key_bytes = Module["_kem_private_key_bytes"] = () => (_kem_private_key_bytes = Module["_kem_private_key_bytes"] = wasmExports["m"])();
+        var _kem_ciphertext_bytes = Module["_kem_ciphertext_bytes"] = () => (_kem_ciphertext_bytes = Module["_kem_ciphertext_bytes"] = wasmExports["n"])();
+        var _kem_shared_secret_bytes = Module["_kem_shared_secret_bytes"] = () => (_kem_shared_secret_bytes = Module["_kem_shared_secret_bytes"] = wasmExports["o"])();
+        var _kem_keypair = Module["_kem_keypair"] = (a0, a1) => (_kem_keypair = Module["_kem_keypair"] = wasmExports["p"])(a0, a1);
+        var _kem_encapsulate = Module["_kem_encapsulate"] = (a0, a1, a2) => (_kem_encapsulate = Module["_kem_encapsulate"] = wasmExports["q"])(a0, a1, a2);
+        var _kem_decapsulate = Module["_kem_decapsulate"] = (a0, a1, a2) => (_kem_decapsulate = Module["_kem_decapsulate"] = wasmExports["r"])(a0, a1, a2);
+        var _kem_encapsulate_internal = Module["_kem_encapsulate_internal"] = (a0, a1, a2) => (_kem_encapsulate_internal = Module["_kem_encapsulate_internal"] = wasmExports["s"])(a0, a1, a2);
+        var _kem_decapsulate_internal = Module["_kem_decapsulate_internal"] = (a0, a1, a2) => (_kem_decapsulate_internal = Module["_kem_decapsulate_internal"] = wasmExports["t"])(a0, a1, a2);
+        var _kem_keypair_seeded = Module["_kem_keypair_seeded"] = (a0, a1, a2) => (_kem_keypair_seeded = Module["_kem_keypair_seeded"] = wasmExports["u"])(a0, a1, a2);
+        var __emscripten_stack_restore = a0 => (__emscripten_stack_restore = wasmExports["v"])(a0);
+        var __emscripten_stack_alloc = a0 => (__emscripten_stack_alloc = wasmExports["w"])(a0);
+        var _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports["x"])();
+        var _asyncify_start_unwind = a0 => (_asyncify_start_unwind = wasmExports["y"])(a0);
+        var _asyncify_stop_unwind = () => (_asyncify_stop_unwind = wasmExports["z"])();
+        var _asyncify_start_rewind = a0 => (_asyncify_start_rewind = wasmExports["A"])(a0);
+        var _asyncify_stop_rewind = () => (_asyncify_stop_rewind = wasmExports["B"])();
         Module["ccall"] = ccall;
         Module["writeArrayToMemory"] = writeArrayToMemory;
         var calledRun;
-        function ExitStatus(status) { this.name = "ExitStatus"; this.message = "Program terminated with exit(" + status + ")"; this.status = status; }
         dependenciesFulfilled = function runCaller() { if (!calledRun)
             run(); if (!calledRun)
             dependenciesFulfilled = runCaller; };
-        function run(args) { args = args || arguments_; if (runDependencies > 0) {
+        function run() { if (runDependencies > 0) {
             return;
         } preRun(); if (runDependencies > 0) {
             return;
@@ -467,16 +421,9 @@ var createKEMNativeCaller = (() => {
             return; initRuntime(); readyPromiseResolve(Module); postRun(); } {
             doRun();
         } }
-        Module["run"] = run;
-        function exit(status, implicit) { EXITSTATUS = status; if (keepRuntimeAlive()) { }
-        else {
-            exitRuntime();
-        } procExit(status); }
-        function procExit(code) { EXITSTATUS = code; if (!keepRuntimeAlive()) {
-            ABORT = true;
-        } quit_(code, new ExitStatus(code)); }
         run();
-        return createKEMNativeCaller.ready;
+        moduleRtn = readyPromise;
+        return moduleRtn;
     });
 })();
 export default createKEMNativeCaller;
diff --git a/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.wasm.wasm b/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.wasm.wasm
index 838aa91..ba6489f 100755
Binary files a/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.wasm.wasm and b/node_modules/@dashlane/pqc-kem-kyber512-node/dist/kem.wasm.wasm differ
